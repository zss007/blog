<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>青松的博客</title>
  
  <subtitle>天行健，君子以自强不息；地势坤，君子以厚德载物。</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://blog.master-ss.cn/"/>
  <updated>2020-03-15T13:16:29.418Z</updated>
  <id>http://blog.master-ss.cn/</id>
  
  <author>
    <name>张松松</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>python 协程</title>
    <link href="http://blog.master-ss.cn/note/python/coroutine/"/>
    <id>http://blog.master-ss.cn/note/python/coroutine/</id>
    <published>2020-03-15T13:02:11.719Z</published>
    <updated>2020-03-15T13:16:29.418Z</updated>
    
    <content type="html"><![CDATA[<p>python 的协程基础介绍</p><a id="more"></a><h3 id="一、协程简介"><a href="#一、协程简介" class="headerlink" title="一、协程简介"></a>一、协程简介</h3><ul><li>协程就是协同多任务</li><li>协程就是在一个进程或一个线程中执行</li><li>不需要锁机制</li><li>对多核 CPU 的利用——多进程+协程</li><li>Python3.5 以前使用生成器（yield）来实现协程</li><li>Python3.5 以后使用 async 和 await 关键字实现<ul><li>async 关键字<ul><li>定义特殊函数</li><li>当被调用时，不执行里面的代码，而是返回一个协程对象</li><li>在事件循环中调度其执行前，协程对象不执行任何操作</li></ul></li><li>await 关键字<ul><li>等待协程执行完成</li><li>当遇到阻塞调用的函数的时候，使用 await 方法将协程的控制权让出，以便 loop 调用其他的协程</li></ul></li></ul></li><li>asyncio 模块<ul><li>get_event_loop 获得事件循环队列</li><li>run_until_complete() 注册任务到队列</li><li>在事件循环中调度其执行前，协程对象不执行任何操作</li><li>asyncio 模块用于事件循环</li></ul></li><li>协程之间的数据通信<ul><li>嵌套调用</li><li>队列</li></ul></li></ul><h3 id="二、yield-创建协程"><a href="#二、yield-创建协程" class="headerlink" title="二、yield 创建协程"></a>二、yield 创建协程</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">def count_down(n):</span><br><span class="line">    &quot;&quot;&quot; 倒计时效果 &quot;&quot;&quot;</span><br><span class="line">    while n &gt; 0:</span><br><span class="line">        yield n</span><br><span class="line">        n -= 1</span><br><span class="line"></span><br><span class="line">def yield_test():</span><br><span class="line">    &quot;&quot;&quot; 实现协程函数 &quot;&quot;&quot;</span><br><span class="line">    while True:</span><br><span class="line">        n = (yield)</span><br><span class="line">        print(n)</span><br><span class="line"></span><br><span class="line">if __name__ == &apos;__main__&apos;:</span><br><span class="line">    # rest = count_down(5)</span><br><span class="line">    # print(next(rest))</span><br><span class="line">    # print(next(rest))</span><br><span class="line">    # print(next(rest))</span><br><span class="line">    # print(next(rest))</span><br><span class="line">    # print(next(rest))</span><br><span class="line">    rest = yield_test()</span><br><span class="line">    next(rest)</span><br><span class="line">    rest.send(&apos;6666&apos;)</span><br><span class="line">    rest.send(&apos;6666&apos;)</span><br></pre></td></tr></table></figure><h3 id="三、async-创建协程"><a href="#三、async-创建协程" class="headerlink" title="三、async 创建协程"></a>三、async 创建协程</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">import asyncio</span><br><span class="line"></span><br><span class="line">async def do_sth(x):</span><br><span class="line">    &quot;&quot;&quot; 定义协程函数 &quot;&quot;&quot;</span><br><span class="line">    print(&apos;等待中: &#123;0&#125;&apos;.format(x))</span><br><span class="line">    # 立即返回一个 Future 对象，下次循环的判断是否已经过 2s，而不是阻塞等待</span><br><span class="line">    await asyncio.sleep(x)</span><br><span class="line"></span><br><span class="line"># 判断是否为协程函数</span><br><span class="line">print(asyncio.iscoroutinefunction(do_sth))</span><br><span class="line"></span><br><span class="line">coroutine = do_sth(5)</span><br><span class="line"># 事件的循环队列</span><br><span class="line">loop = asyncio.get_event_loop()</span><br><span class="line"># 注册任务</span><br><span class="line">task = loop.create_task(coroutine)</span><br><span class="line">print(&apos;1、task: &apos;, task)</span><br><span class="line"># 等待协程任务执行结束</span><br><span class="line">loop.run_until_complete(task)</span><br><span class="line">print(&apos;2、task: &apos;, task)</span><br></pre></td></tr></table></figure><h3 id="四、协程嵌套调用通信"><a href="#四、协程嵌套调用通信" class="headerlink" title="四、协程嵌套调用通信"></a>四、协程嵌套调用通信</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">import asyncio</span><br><span class="line"></span><br><span class="line">async def compute(x, y):</span><br><span class="line">    print(&apos;计算 x + y =&gt; &#123;0&#125; + &#123;1&#125;&apos;.format(x, y))</span><br><span class="line">    # time.sleep 是同步阻塞接口</span><br><span class="line">    await asyncio.sleep(3)</span><br><span class="line">    return x + y</span><br><span class="line"></span><br><span class="line">async def get_sum(x, y):</span><br><span class="line">    rest = await compute(x, y)</span><br><span class="line">    print(&apos;&#123;0&#125; + &#123;1&#125; = &#123;2&#125;&apos;.format(x, y, rest))</span><br><span class="line"></span><br><span class="line"># 拿到事件循环</span><br><span class="line">loop = asyncio.get_event_loop()</span><br><span class="line">loop.run_until_complete(get_sum(1, 2))</span><br><span class="line">loop.close()</span><br></pre></td></tr></table></figure><h3 id="五、协程队列通信"><a href="#五、协程队列通信" class="headerlink" title="五、协程队列通信"></a>五、协程队列通信</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"># 1. 定义一个队列</span><br><span class="line"># 2. 让两个协程来进行通信</span><br><span class="line"># 3. 让其中一个协程往队列中写入数据</span><br><span class="line"># 4. 让另一个协程从队列中删除数据</span><br><span class="line">import asyncio</span><br><span class="line">import random</span><br><span class="line"></span><br><span class="line">async def add(store, name):</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    写入数据到队列</span><br><span class="line">    :param store: 队列的对象</span><br><span class="line">    :return:</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    for i in range(5):</span><br><span class="line">        # 往队列中添加数字</span><br><span class="line">        num = &apos;&#123;0&#125; - &#123;1&#125;&apos;.format(name, i)</span><br><span class="line">        await asyncio.sleep(random.randint(1, 5))</span><br><span class="line">        await store.put(i)</span><br><span class="line">        print(&apos;&#123;2&#125; add one ... &#123;0&#125;, size: &#123;1&#125;&apos;.format(</span><br><span class="line">            num, store.qsize(), name))</span><br><span class="line"></span><br><span class="line">async def reduce(store):</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    从队列中删除数据</span><br><span class="line">    :param store:</span><br><span class="line">    :return:</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    for i in range(10):</span><br><span class="line">        rest = await store.get()</span><br><span class="line">        print(&apos; reduce one.. &#123;0&#125;, size: &#123;1&#125;&apos;.format(rest, store.qsize()))</span><br><span class="line"></span><br><span class="line">if __name__ == &apos;__main__&apos;:</span><br><span class="line">    # 准备一个队列</span><br><span class="line">    store = asyncio.Queue(maxsize=5)</span><br><span class="line">    a1 = add(store, &apos;a1&apos;)</span><br><span class="line">    a2 = add(store, &apos;a2&apos;)</span><br><span class="line">    r1 = reduce(store)</span><br><span class="line"></span><br><span class="line">    # 添加到事件队列</span><br><span class="line">    loop = asyncio.get_event_loop()</span><br><span class="line">    loop.run_until_complete(asyncio.gather(a1, a2, r1))</span><br><span class="line">    loop.close()</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;python 的协程基础介绍&lt;/p&gt;
    
    </summary>
    
      <category term="note" scheme="http://blog.master-ss.cn/categories/note/"/>
    
    
  </entry>
  
  <entry>
    <title>python 线程</title>
    <link href="http://blog.master-ss.cn/note/python/thread/"/>
    <id>http://blog.master-ss.cn/note/python/thread/</id>
    <published>2020-03-15T09:53:55.752Z</published>
    <updated>2020-03-15T13:01:05.086Z</updated>
    
    <content type="html"><![CDATA[<p>python 的线程基础介绍</p><a id="more"></a><h3 id="一、线程简介"><a href="#一、线程简介" class="headerlink" title="一、线程简介"></a>一、线程简介</h3><ul><li>在同一个进程下执行，并共享相同的上下文</li><li>一个进程中的各个线程与主线程共享同一片数据空间</li><li>线程包括开始、执行顺序和结束三部分</li><li>它可以被抢占（中断）和临时挂起（也称为睡眠）——线程让步</li><li>一般是以并发方式执行</li><li><p>线程的实现</p><ul><li>用 threading 模块代替 thread 模块</li><li>用 threading.Tread 创建线程</li><li>start() 启用线程</li><li>join() 挂起线程</li></ul></li><li><p>threading 模块的对象</p></li></ul><table><thead><tr><th>对象</th><th>描述</th></tr></thead><tbody><tr><td>Thread</td><td>表示一个执行线程的对象</td></tr><tr><td>Lock</td><td>锁原语对象（和 thread 模块中的锁一样）</td></tr><tr><td>RLock</td><td>可重入锁对象，使单一线程可以（再次）获得已持有的锁（递归锁）</td></tr><tr><td>Condition</td><td>条件变量对象，使得一个线程等待另一个线程满足特定的“条件”，比如改变状态或某个数据值</td></tr><tr><td>Event</td><td>条件变量的通用版本，任意数量的线程等待某个事件的发生，在该事件发生后所有线程将被激活</td></tr><tr><td>Semaphore</td><td>为线程间共享的有限资源提供了一个“计数器”，如果没有可用资源时会被阻塞</td></tr><tr><td>BoundedSemaphore</td><td>与 Semaphore 相似，不过它不允许超过初始值</td></tr><tr><td>Timer</td><td>与 Thread 相似，不过它要在运行前等待一段时间</td></tr><tr><td>Barrier</td><td>创建一个“障碍”，必须达到指定数量的线程后才可以继续</td></tr></tbody></table><ul><li>Thread 对象数据属性</li></ul><table><thead><tr><th>属性</th><th>描述</th></tr></thead><tbody><tr><td>name</td><td>表示一个执行线程的对象</td></tr><tr><td>ident</td><td>线程的标识符</td></tr><tr><td>daemon</td><td>布尔标志，表示这个线程是否是守护线程</td></tr></tbody></table><ul><li>Thread 对象方法</li></ul><table><thead><tr><th>属性</th><th>描述</th></tr></thead><tbody><tr><td><code>_init_</code>()</td><td>实例化一个线程对象，需要有一个可调用的 target，以及其参数 args 或 kwargs</td></tr><tr><td>start()</td><td>开始执行该线程</td></tr><tr><td>run()</td><td>定义线程功能的方法（通常在子类中被应用开发者重写）</td></tr><tr><td>join(timeout=None)</td><td>直至启动的线程终止之前一直挂起；除非给出了 timeout（秒），否则一直阻塞</td></tr><tr><td>getName()</td><td>返回线程名</td></tr><tr><td>setName(name)</td><td>设置线程名</td></tr><tr><td>isAlivel/is_alive()</td><td>布尔标志，表示这个线程是否还存活</td></tr><tr><td>isDaemon()</td><td>如果是守护线程，则返回 True；否则返回 False</td></tr><tr><td>setDaemon()</td><td>把线程的守护标志设定为布尔值 daemonic（必须在线程 start()之前调用）</td></tr></tbody></table><h3 id="二、线程的实现"><a href="#二、线程的实现" class="headerlink" title="二、线程的实现"></a>二、线程的实现</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">import threading</span><br><span class="line">import time</span><br><span class="line"></span><br><span class="line">def loop():</span><br><span class="line">    &quot;&quot;&quot; 新的线程执行的代码 &quot;&quot;&quot;</span><br><span class="line">    n = 0</span><br><span class="line">    while n &lt; 5:</span><br><span class="line">        print(n)</span><br><span class="line">        now_thread = threading.current_thread()</span><br><span class="line">        print(&apos;[loop]now  thread name : &#123;0&#125;&apos;.format(now_thread.name))</span><br><span class="line">        time.sleep(1)</span><br><span class="line">        n += 1</span><br><span class="line"></span><br><span class="line">class LoopThread(threading.Thread):</span><br><span class="line">    &quot;&quot;&quot; 自定义线程 &quot;&quot;&quot;</span><br><span class="line">    n = 0</span><br><span class="line"></span><br><span class="line">    def run(self):</span><br><span class="line">        while self.n &lt; 5:</span><br><span class="line">            print(self.n)</span><br><span class="line">            now_thread = threading.current_thread()</span><br><span class="line">            print(&apos;[loop]now  thread name : &#123;0&#125;&apos;.format(now_thread.name))</span><br><span class="line">            time.sleep(1)</span><br><span class="line">            self.n += 1</span><br><span class="line"></span><br><span class="line">def use_thread():</span><br><span class="line">    &quot;&quot;&quot; 使用线程来实现 &quot;&quot;&quot;</span><br><span class="line">    # 当前正在执行的线程名称</span><br><span class="line">    now_thread = threading.current_thread()</span><br><span class="line">    print(&apos;now  thread name : &#123;0&#125;&apos;.format(now_thread.name))</span><br><span class="line">    # 函数方法设置线程</span><br><span class="line">    # t = threading.Thread(target=loop, name=&apos;loop_thread&apos;)</span><br><span class="line">    # class 方法设置线程</span><br><span class="line">    t = LoopThread(name=&apos;loop_thread_oop&apos;)</span><br><span class="line">    # 启动线程</span><br><span class="line">    t.start()</span><br><span class="line">    # 挂起线程</span><br><span class="line">    t.join()</span><br><span class="line"></span><br><span class="line">if __name__ == &apos;__main__&apos;:</span><br><span class="line">    use_thread()</span><br></pre></td></tr></table></figure><h3 id="三、多线程的锁"><a href="#三、多线程的锁" class="headerlink" title="三、多线程的锁"></a>三、多线程的锁</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line">import threading</span><br><span class="line">import time</span><br><span class="line"></span><br><span class="line"># 获得一把锁</span><br><span class="line">my_lock = threading.Lock()</span><br><span class="line">your_lock = threading.RLock()</span><br><span class="line"></span><br><span class="line"># 我的银行账户</span><br><span class="line">balance = 0</span><br><span class="line"></span><br><span class="line">def change_it(n):</span><br><span class="line">    &quot;&quot;&quot; 改变我的余额 &quot;&quot;&quot;</span><br><span class="line">    global balance</span><br><span class="line"></span><br><span class="line">    # 方式一，使用with</span><br><span class="line">    with your_lock:</span><br><span class="line">        balance = balance + n</span><br><span class="line">        time.sleep(2)</span><br><span class="line">        balance = balance - n</span><br><span class="line">        time.sleep(1)</span><br><span class="line">        print(&apos;-N---&gt; &#123;0&#125;; balance: &#123;1&#125;&apos;.format(n, balance))</span><br><span class="line"></span><br><span class="line">    # 方式二</span><br><span class="line">    # try:</span><br><span class="line">    #     print(&apos;start lock&apos;)</span><br><span class="line">    #     # 添加锁</span><br><span class="line">    #     your_lock.acquire()</span><br><span class="line">    #     print(&apos;locked one &apos;)</span><br><span class="line">    #     # 资源已经被锁住了，不能重复锁定, 产生死锁</span><br><span class="line">    #     your_lock.acquire()</span><br><span class="line">    #     print(&apos;locked two&apos;)</span><br><span class="line">    #     balance = balance + n</span><br><span class="line">    #     time.sleep(2)</span><br><span class="line">    #     balance = balance - n</span><br><span class="line">    #     time.sleep(1)</span><br><span class="line">    #     print(&apos;-N---&gt; &#123;0&#125;; balance: &#123;1&#125;&apos;.format(n, balance))</span><br><span class="line">    # finally:</span><br><span class="line">    #     # 释放掉锁</span><br><span class="line">    #     your_lock.release()</span><br><span class="line">    #     your_lock.release()</span><br><span class="line"></span><br><span class="line">class ChangeBalanceThread(threading.Thread):</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    改变银行余额的线程</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    def __init__(self, num, *args, **kwargs):</span><br><span class="line">        super().__init__(*args, **kwargs)</span><br><span class="line">        self.num = num</span><br><span class="line"></span><br><span class="line">    def run(self):</span><br><span class="line">        for i in range(100):</span><br><span class="line">            change_it(self.num)</span><br><span class="line"></span><br><span class="line">if __name__ == &apos;__main__&apos;:</span><br><span class="line">    t1 = ChangeBalanceThread(5)</span><br><span class="line">    t2 = ChangeBalanceThread(8)</span><br><span class="line">    t1.start()</span><br><span class="line">    t2.start()</span><br><span class="line">    t1.join()</span><br><span class="line">    t2.join()</span><br><span class="line">    print(&apos;the last: &#123;0&#125;&apos;.format(balance))</span><br></pre></td></tr></table></figure><h3 id="四、线程池"><a href="#四、线程池" class="headerlink" title="四、线程池"></a>四、线程池</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line">import time</span><br><span class="line">import threading</span><br><span class="line"># ThreadPoolExecutor 性能比 Pool 性能更强</span><br><span class="line">from concurrent.futures import ThreadPoolExecutor</span><br><span class="line">from multiprocessing.dummy import Pool</span><br><span class="line"></span><br><span class="line">def run(n):</span><br><span class="line">    &quot;&quot;&quot; 线程要做的事情 &quot;&quot;&quot;</span><br><span class="line">    time.sleep(2)</span><br><span class="line">    print(threading.current_thread().name, n)</span><br><span class="line"></span><br><span class="line">def main():</span><br><span class="line">    &quot;&quot;&quot; 使用传统的方法来做任务 &quot;&quot;&quot;</span><br><span class="line">    t1 = time.time()</span><br><span class="line">    for n in range(100):</span><br><span class="line">        run(n)</span><br><span class="line">    print(time.time() - t1)</span><br><span class="line"></span><br><span class="line">def main_use_thread():</span><br><span class="line">    &quot;&quot;&quot; 使用线程优化任务 &quot;&quot;&quot;</span><br><span class="line">    # 资源有限，最多只能跑10个线程</span><br><span class="line">    t1 = time.time()</span><br><span class="line">    ls = []</span><br><span class="line">    for count in range(10):</span><br><span class="line">        for i in range(10):</span><br><span class="line">            t = threading.Thread(target=run, args=(i,))</span><br><span class="line">            ls.append(t)</span><br><span class="line">            t.start()</span><br><span class="line"></span><br><span class="line">        for l in ls:</span><br><span class="line">            l.join()</span><br><span class="line">    print(time.time() - t1)</span><br><span class="line"></span><br><span class="line">def main_use_pool():</span><br><span class="line">    &quot;&quot;&quot; 使用线程池来优化 &quot;&quot;&quot;</span><br><span class="line">    t1 = time.time()</span><br><span class="line">    n_list = range(100)</span><br><span class="line">    pool = Pool(10)</span><br><span class="line">    pool.map(run, n_list)</span><br><span class="line">    pool.close()</span><br><span class="line">    pool.join()</span><br><span class="line">    print(time.time() - t1)</span><br><span class="line"></span><br><span class="line">def main_use_executor():</span><br><span class="line">    &quot;&quot;&quot; 使用 ThreadPoolExecutor 来优化&quot;&quot;&quot;</span><br><span class="line">    t1 = time.time()</span><br><span class="line">    n_list = range(100)</span><br><span class="line">    with ThreadPoolExecutor(max_workers=10) as executor:</span><br><span class="line">        executor.map(run, n_list)</span><br><span class="line">    print(time.time() - t1)</span><br><span class="line"></span><br><span class="line">if __name__ == &apos;__main__&apos;:</span><br><span class="line">    # main() # 同步阻塞</span><br><span class="line">    # main_use_thread() # 20.058868885040283</span><br><span class="line">    # main_use_pool() # 24.130047082901，数据量更大的情况下，比上一种情况更省性能</span><br><span class="line">    main_use_executor() # 20.038520097732544</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;python 的线程基础介绍&lt;/p&gt;
    
    </summary>
    
      <category term="note" scheme="http://blog.master-ss.cn/categories/note/"/>
    
    
  </entry>
  
  <entry>
    <title>python 进程</title>
    <link href="http://blog.master-ss.cn/note/python/process/"/>
    <id>http://blog.master-ss.cn/note/python/process/</id>
    <published>2020-03-15T09:19:26.428Z</published>
    <updated>2020-03-15T09:54:23.644Z</updated>
    
    <content type="html"><![CDATA[<p>python 的进程基础介绍</p><a id="more"></a><h3 id="一、进程简介"><a href="#一、进程简介" class="headerlink" title="一、进程简介"></a>一、进程简介</h3><ul><li>一个执行中的程序</li><li>每个进程都拥有自己的地址空间、内存、数据栈以及其他用于跟踪执行的辅助数据</li><li>操作系统管理其上所有进程的执行，并为这些进程合理地分配时间</li><li>进程也可以通过派生（fork 或 spawn）新的进程来执行其他任务</li><li>进程的实现<ul><li>使用 multiprocessing 实现多进程代码</li><li>用 multiprocessing.Process 创建进程</li><li>start() 启动进程</li><li>os.getpid() 获得进程的 ID</li><li>进程间的通信：通过 Queue、Pipes 等实现进程之间的通信</li></ul></li></ul><h3 id="二、进程的实现"><a href="#二、进程的实现" class="headerlink" title="二、进程的实现"></a>二、进程的实现</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">import os</span><br><span class="line">import time</span><br><span class="line">from multiprocessing import Process</span><br><span class="line"></span><br><span class="line">def do_sth(name):</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    进程要做的事情</span><br><span class="line">    :param name: str 进程的名称</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    print(&apos;进程的名称：&#123;0&#125;， pid: &#123;1&#125;&apos;.format(name, os.getpid()))</span><br><span class="line">    time.sleep(15)</span><br><span class="line">    print(&apos;进程要做的事情&apos;)</span><br><span class="line"></span><br><span class="line">class MyProcess(Process):</span><br><span class="line"></span><br><span class="line">    def __init__(self, name, *args, **kwargs):</span><br><span class="line">        self.my_name = name</span><br><span class="line">        # print(self.name)</span><br><span class="line">        super().__init__(*args, **kwargs)</span><br><span class="line">        print(self.name)</span><br><span class="line"></span><br><span class="line">    def run(self):</span><br><span class="line">        print(&apos;MyProcess进程的名称：&#123;0&#125;， pid: &#123;1&#125;&apos;.format(</span><br><span class="line">            self.my_name, os.getpid()))</span><br><span class="line">        time.sleep(15)</span><br><span class="line">        print(&apos;MyProcess进程要做的事情&apos;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">if __name__ == &apos;__main__&apos;:</span><br><span class="line">    # 函数形式创建进程</span><br><span class="line">    # p = Process(target=do_sth, args=(&apos;my process&apos;, ))</span><br><span class="line">    # class 形式创建进程</span><br><span class="line">    p = MyProcess(&apos;my process class&apos;)</span><br><span class="line">    # 启动进程</span><br><span class="line">    p.start()</span><br><span class="line">    # 挂起进程</span><br><span class="line">    p.join()</span><br></pre></td></tr></table></figure><h3 id="三、进程之间的通信"><a href="#三、进程之间的通信" class="headerlink" title="三、进程之间的通信"></a>三、进程之间的通信</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line">from multiprocessing import Process, Queue, current_process</span><br><span class="line">import random</span><br><span class="line">import time</span><br><span class="line"></span><br><span class="line">class WriteProcess(Process):</span><br><span class="line">    &quot;&quot;&quot; 写的进程 &quot;&quot;&quot;</span><br><span class="line">    def __init__(self, q, *args, **kwargs):</span><br><span class="line">        self.q = q</span><br><span class="line">        super().__init__(*args, **kwargs)</span><br><span class="line"></span><br><span class="line">    def run(self):</span><br><span class="line">        &quot;&quot;&quot; 实现进程的业务逻辑 &quot;&quot;&quot;</span><br><span class="line">        # 要写的内容</span><br><span class="line">        ls = [</span><br><span class="line">            &quot;第一行内容&quot;,</span><br><span class="line">            &quot;第2行内容&quot;,</span><br><span class="line">            &quot;第3行内容&quot;,</span><br><span class="line">            &quot;第4行内容&quot;,</span><br><span class="line">        ]</span><br><span class="line">        for line in ls:</span><br><span class="line">            print(&apos;写入内容: &#123;0&#125; - &#123;1&#125;&apos;.format(line, current_process().name))</span><br><span class="line">            self.q.put(line)</span><br><span class="line">            # 每写入一次，休息1-5秒</span><br><span class="line">            time.sleep(random.randint(1, 5))</span><br><span class="line"></span><br><span class="line">class ReadProcess(Process):</span><br><span class="line">    &quot;&quot;&quot; 读取内容进程 &quot;&quot;&quot;</span><br><span class="line">    def __init__(self, q, *args, **kwargs):</span><br><span class="line">        self.q = q</span><br><span class="line">        super().__init__(*args, **kwargs)</span><br><span class="line"></span><br><span class="line">    def run(self):</span><br><span class="line">        while True:</span><br><span class="line">            content = self.q.get()</span><br><span class="line">            print(&apos;读取到的内容：&#123;0&#125; - &#123;1&#125;&apos;.format(content, self.name))</span><br><span class="line"></span><br><span class="line">if __name__ == &apos;__main__&apos;:</span><br><span class="line">    # 通过Queue共享数据</span><br><span class="line">    q = Queue()</span><br><span class="line">    # 写入内容的进程</span><br><span class="line">    t_write = WriteProcess(q)</span><br><span class="line">    t_write.start()</span><br><span class="line">    # 读取进程启动</span><br><span class="line">    t_read = ReadProcess(q)</span><br><span class="line">    t_read.start()</span><br><span class="line"></span><br><span class="line">    t_write.join()</span><br><span class="line">    # t_read.join()</span><br><span class="line"></span><br><span class="line">    # 因为读的进程是死循环，无法等待其结束，只能强制终止</span><br><span class="line">    t_read.terminate()</span><br></pre></td></tr></table></figure><h3 id="四、多进程的锁"><a href="#四、多进程的锁" class="headerlink" title="四、多进程的锁"></a>四、多进程的锁</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line">import random</span><br><span class="line">from multiprocessing import Process, Lock, RLock</span><br><span class="line"></span><br><span class="line">import time</span><br><span class="line"></span><br><span class="line">class WriteProcess(Process):</span><br><span class="line">    &quot;&quot;&quot; 写入文件 &quot;&quot;&quot;</span><br><span class="line"></span><br><span class="line">    def __init__(self, file_name, num, lock, *args, **kwargs):</span><br><span class="line">        # 文件的名称</span><br><span class="line">        self.file_name = file_name</span><br><span class="line">        self.num = num</span><br><span class="line">        # 锁对象</span><br><span class="line">        self.lock = lock</span><br><span class="line">        super().__init__(*args, **kwargs)</span><br><span class="line"></span><br><span class="line">    def run(self):</span><br><span class="line">        &quot;&quot;&quot; 写入文件的主要业务逻辑 &quot;&quot;&quot;</span><br><span class="line">        with self.lock:</span><br><span class="line">        # try:</span><br><span class="line">        #     # 添加锁</span><br><span class="line">        #     self.lock.acquire()</span><br><span class="line">        #     print(&apos;locked&apos;)</span><br><span class="line">        #     self.lock.acquire()</span><br><span class="line">        #     print(&apos;relocked&apos;)</span><br><span class="line">            for i in range(5):</span><br><span class="line">                content = &apos;现在是： &#123;0&#125; : &#123;1&#125; - &#123;2&#125; \n&apos;.format(</span><br><span class="line">                    self.name,</span><br><span class="line">                    self.pid,</span><br><span class="line">                    self.num</span><br><span class="line">                )</span><br><span class="line">                with open(self.file_name, &apos;a+&apos;, encoding=&apos;utf-8&apos;) as f:</span><br><span class="line">                    f.write(content)</span><br><span class="line">                    time.sleep(random.randint(1, 5))</span><br><span class="line">                    print(content)</span><br><span class="line">        # finally:</span><br><span class="line">        #     # 释放锁</span><br><span class="line">        #     self.lock.release()</span><br><span class="line">        #     self.lock.release()</span><br><span class="line"></span><br><span class="line">if __name__ == &apos;__main__&apos;:</span><br><span class="line">    file_name = &apos;test.txt&apos;</span><br><span class="line">    # 所的对象</span><br><span class="line">    lock = RLock()</span><br><span class="line">    for x in range(5):</span><br><span class="line">        p = WriteProcess(file_name, x, lock)</span><br><span class="line">        p.start()</span><br></pre></td></tr></table></figure><h3 id="五、进程池"><a href="#五、进程池" class="headerlink" title="五、进程池"></a>五、进程池</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line">import random</span><br><span class="line">import time</span><br><span class="line">from multiprocessing import current_process, Pool</span><br><span class="line"></span><br><span class="line">def run(file_name, num):</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    进程执行的业务逻辑</span><br><span class="line">    往文件中写入数据</span><br><span class="line">    :param file_name: str 文件名称</span><br><span class="line">    :param num: int 写入的数字</span><br><span class="line">    :return: str 写入的结果</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    with open(file_name, &apos;a+&apos;, encoding=&apos;utf-8&apos;) as f:</span><br><span class="line">        # 当前的进程</span><br><span class="line">        now_process = current_process()</span><br><span class="line">        # 写入的内容</span><br><span class="line">        content = &apos;&#123;0&#125; - &#123;1&#125;- &#123;2&#125;&apos;.format(</span><br><span class="line">            now_process.name,</span><br><span class="line">            now_process.pid,</span><br><span class="line">            num</span><br><span class="line">        )</span><br><span class="line">        f.write(content)</span><br><span class="line">        f.write(&apos;\n&apos;)</span><br><span class="line">        # 写完之后随机休息1-5秒</span><br><span class="line">        time.sleep(random.randint(1, 5))</span><br><span class="line">        print(content)</span><br><span class="line">    return &apos;ok&apos;</span><br><span class="line"></span><br><span class="line">if __name__ == &apos;__main__&apos;:</span><br><span class="line">    file_name = &apos;test_pool.txt&apos;</span><br><span class="line">    # 进程池</span><br><span class="line">    pool = Pool(2)</span><br><span class="line">    rest_list = []</span><br><span class="line">    for i in range(20):</span><br><span class="line">        # 同步添加任务</span><br><span class="line">        # rest = pool.apply(run, args=(file_name, i))</span><br><span class="line">        rest = pool.apply_async(run, args=(file_name, i))</span><br><span class="line">        rest_list.append(rest)</span><br><span class="line">        print(&apos;&#123;0&#125;--- &#123;1&#125;&apos;.format(i, rest))</span><br><span class="line">    # 关闭池子</span><br><span class="line">    pool.close()</span><br><span class="line">    pool.join()</span><br><span class="line">    # 查看异步执行的结果</span><br><span class="line">    print(rest_list[0].get())</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;python 的进程基础介绍&lt;/p&gt;
    
    </summary>
    
      <category term="note" scheme="http://blog.master-ss.cn/categories/note/"/>
    
    
  </entry>
  
  <entry>
    <title>python 装饰器与异常处理</title>
    <link href="http://blog.master-ss.cn/note/python/oop/"/>
    <id>http://blog.master-ss.cn/note/python/oop/</id>
    <published>2020-03-10T06:12:41.849Z</published>
    <updated>2020-03-10T06:32:00.290Z</updated>
    
    <content type="html"><![CDATA[<p>python 装饰器与异常处理</p><a id="more"></a><h3 id="一、装饰器"><a href="#一、装饰器" class="headerlink" title="一、装饰器"></a>一、装饰器</h3><ul><li>用于拓展原来函数功能</li><li>返回函数的函数</li><li>在不用更改原函数的代码前提下给函数增加新的功能</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br></pre></td><td class="code"><pre><span class="line">from functools import wraps</span><br><span class="line"></span><br><span class="line">def log_simple(func):</span><br><span class="line">    &quot;&quot;&quot; 记录函数执行的日志 &quot;&quot;&quot;</span><br><span class="line">    def wrapper():</span><br><span class="line">        print(&apos;start...&apos;)</span><br><span class="line">        func()</span><br><span class="line">        print(&apos;end..&apos;)</span><br><span class="line">    return wrapper</span><br><span class="line"></span><br><span class="line">def log_simple2(func):</span><br><span class="line">    &quot;&quot;&quot; 记录函数执行的日志 &quot;&quot;&quot;</span><br><span class="line">    def wrapper():</span><br><span class="line">        print(&apos;开始进入...&apos;)</span><br><span class="line">        func()</span><br><span class="line">        print(&apos;结束..&apos;)</span><br><span class="line">    return wrapper</span><br><span class="line"></span><br><span class="line">def log(name=None):</span><br><span class="line">    &quot;&quot;&quot; 记录函数执行的日志 &quot;&quot;&quot;</span><br><span class="line"></span><br><span class="line">    def decorator(func):</span><br><span class="line">        @wraps(func)</span><br><span class="line">        def wrapper(*args, **kwargs):</span><br><span class="line">            # *args：元祖；**kwargs：字典</span><br><span class="line">            print(&apos;&#123;0&#125;.start...&apos;.format(name))</span><br><span class="line">            print(args)</span><br><span class="line">            print(kwargs)</span><br><span class="line">            rest = func(*args, **kwargs)</span><br><span class="line">            print(&apos;&#123;0&#125;.end..&apos;.format(name))</span><br><span class="line">            return rest</span><br><span class="line">        return wrapper</span><br><span class="line">    return decorator</span><br><span class="line"></span><br><span class="line"># 无参多个装饰器，注意执行顺序</span><br><span class="line">@log_simple</span><br><span class="line">@log_simple2</span><br><span class="line">def hello():</span><br><span class="line">    &quot;&quot;&quot; 简单功能模拟 &quot;&quot;&quot;</span><br><span class="line">    print(&apos;hello world&apos;)</span><br><span class="line"></span><br><span class="line"># 有参</span><br><span class="line">@log(&apos;from add&apos;)</span><br><span class="line">def add(a, b, *args, **kwargs):</span><br><span class="line">    &quot;&quot;&quot; 参数相加 &quot;&quot;&quot;</span><br><span class="line">    return a + b</span><br><span class="line"></span><br><span class="line">def eat(cls):</span><br><span class="line">    &quot;&quot;&quot; 吃东西装饰器 &quot;&quot;&quot;</span><br><span class="line">    cls.eat = lambda self: print(&apos;&#123;0&#125;&gt;我要吃东西&apos;.format(self.name))</span><br><span class="line">    return cls</span><br><span class="line"></span><br><span class="line"># 类装饰器</span><br><span class="line">@eat</span><br><span class="line">class Cat(object):</span><br><span class="line">    &quot;&quot;&quot; 猫类 &quot;&quot;&quot;</span><br><span class="line"></span><br><span class="line">    def __init__(self, name):</span><br><span class="line">        self.name = name</span><br><span class="line"></span><br><span class="line">if __name__ == &apos;__main__&apos;:</span><br><span class="line">    # 无参</span><br><span class="line">    hello()</span><br><span class="line">    # start...</span><br><span class="line">    # 开始进入...</span><br><span class="line">    # hello world</span><br><span class="line">    # 结束..</span><br><span class="line">    # end..</span><br><span class="line"></span><br><span class="line">    # 有参</span><br><span class="line">    rest = add(5, 6, k=5, v=6)</span><br><span class="line">    print(rest) # 11</span><br><span class="line">    # from add.start...</span><br><span class="line">    # (5, 6)</span><br><span class="line">    # &#123;&apos;k&apos;: 5, &apos;v&apos;: 6&#125;</span><br><span class="line">    # from add.end..</span><br><span class="line"></span><br><span class="line">    # 通过 @wraps(func) 来修复 __doc__ 和 __name__ 的值，否者使用 wrapper 的相应属性</span><br><span class="line">    print(&apos;doc: &#123;0&#125;&apos;.format(add.__doc__)) # doc:  参数相加</span><br><span class="line">    print(&apos;name: &#123;0&#125;&apos;.format(add.__name__)) # name: add</span><br><span class="line"></span><br><span class="line">    # 类装饰器</span><br><span class="line">    cat = Cat(&apos;小黑&apos;)</span><br><span class="line">    cat.eat() # 小黑&gt;我要吃东西</span><br></pre></td></tr></table></figure><h3 id="二、迭代器"><a href="#二、迭代器" class="headerlink" title="二、迭代器"></a>二、迭代器</h3><ul><li>迭代意味着重复多次，就像循环那样</li><li>实现了方法 <code>__iter__</code> 的对象是可迭代的，可使用 for 循环取值，而实现了方法 <code>__next__</code> 的对象是迭代器</li><li>调用方法 <code>__next__</code> 时（或 next()）, 迭代器返回其下一个值</li><li>如果迭代器没有可供返回的值，触发 StopIteration 异常</li><li>列表、字典、元组均为可迭代对象，所有可直接作用于 for…in 循环的数据类型都被称为可迭代对象</li><li>可使用 iter() 将可迭代对象转换为迭代器</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"># 通过可迭代对象调用内置函数 iter，可获得一个迭代器</span><br><span class="line">l = [1, 2, 3]</span><br><span class="line">l1 = iter(l)</span><br><span class="line">print(next(l1))  # 1</span><br><span class="line">print(next(l1))  # 2</span><br><span class="line">print(next(l1))  # 3</span><br><span class="line">print(next(l1))  # StopIteration error</span><br><span class="line"></span><br><span class="line"># 自定义迭代器</span><br><span class="line">class PowNumber(object):</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    迭代器</span><br><span class="line">    生成1,2,3,4,5,... 数的平方</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    value = 0</span><br><span class="line"></span><br><span class="line">    def __next__(self):</span><br><span class="line">        self.value += 1</span><br><span class="line">        if self.value &gt; 10:</span><br><span class="line">            raise StopIteration</span><br><span class="line">        return self.value * self.value</span><br><span class="line"></span><br><span class="line">    def __iter__(self):</span><br><span class="line">        return self</span><br><span class="line"></span><br><span class="line">if __name__ == &apos;__main__&apos;:</span><br><span class="line">    pow = PowNumber()</span><br><span class="line">    # 调用 __next__ 方法</span><br><span class="line">    print(pow.__next__()) # 1</span><br><span class="line">    # 调用内置 next 方法</span><br><span class="line">    print(next(pow)) # 4</span><br><span class="line">    # 循环迭代器</span><br><span class="line">    for i in pow:</span><br><span class="line">        print(i, end=&quot; &quot;) # 9 16 25 36 49 64 81 100</span><br><span class="line">    print(&apos;&apos;)</span><br></pre></td></tr></table></figure><h3 id="三、生成器"><a href="#三、生成器" class="headerlink" title="三、生成器"></a>三、生成器</h3><ul><li>生成器是一种使用普通函数语法定义的迭代器</li><li>包含 yield 语句的函数都被称为生成器</li><li>不使用 return 返回一个值，而是可以生成多个值，每次一个</li><li>每次使用 yield 生成一个值后，函数都将冻结，即在此停止执行</li><li>被重新唤醒后，函数将从停止的地址开始继续执行</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br></pre></td><td class="code"><pre><span class="line">def pow():</span><br><span class="line">    yield 1</span><br><span class="line">    yield 2</span><br><span class="line">    yield 3</span><br><span class="line">    yield 4</span><br><span class="line"></span><br><span class="line">def pow_number():</span><br><span class="line">    # 通过推导式得到生成器</span><br><span class="line">    return (x * x for x in [1, 2, 3, 4, 5])</span><br><span class="line"></span><br><span class="line">def pow_number2():</span><br><span class="line">    for x in [1, 2, 3, 4, 5]:</span><br><span class="line">        yield x * x</span><br><span class="line"></span><br><span class="line">if __name__ == &apos;__main__&apos;:</span><br><span class="line">    rest = pow()</span><br><span class="line">    print(next(rest)) # 1</span><br><span class="line">    for i in rest:</span><br><span class="line">        print(i, end=&quot; &quot;) # 2 3 4</span><br><span class="line">    print(&quot;&quot;)</span><br><span class="line"></span><br><span class="line">    rest2 = pow_number2()</span><br><span class="line">    print(rest2.__next__()) # 1</span><br><span class="line">    print(next(rest2)) # 4</span><br><span class="line"></span><br><span class="line"># 综合实例：模拟内置 range 函数</span><br><span class="line">def use_range():</span><br><span class="line">    &quot;&quot;&quot; python内置的range函数 &quot;&quot;&quot;</span><br><span class="line">    for i in range(5, 10):</span><br><span class="line">        print(i, end=&quot; &quot;) # 5 6 7 8 9</span><br><span class="line">    print(&quot;&quot;)</span><br><span class="line"></span><br><span class="line">class IterRange(object):</span><br><span class="line">    &quot;&quot;&quot; 使用迭代器来模拟range函数 &quot;&quot;&quot;</span><br><span class="line">    def __init__(self, start, end):</span><br><span class="line">        self.start = start - 1</span><br><span class="line">        self.end = end</span><br><span class="line"></span><br><span class="line">    def __next__(self):</span><br><span class="line">        self.start += 1</span><br><span class="line">        if self.start &gt;= self.end:</span><br><span class="line">            raise StopIteration</span><br><span class="line">        return self.start</span><br><span class="line"></span><br><span class="line">    def __iter__(self):</span><br><span class="line">        return self</span><br><span class="line"></span><br><span class="line">class GenRange(object):</span><br><span class="line">    &quot;&quot;&quot; 使用生成器来模拟range函数 &quot;&quot;&quot;</span><br><span class="line">    def __init__(self, start, end):</span><br><span class="line">        self.start = start - 1</span><br><span class="line">        self.end = end</span><br><span class="line"></span><br><span class="line">    def get_num(self):</span><br><span class="line">        while True:</span><br><span class="line">            if self.start &gt;= self.end - 1:</span><br><span class="line">                break</span><br><span class="line">            self.start += 1</span><br><span class="line">            yield self.start</span><br><span class="line"></span><br><span class="line">def get_num(start, end):</span><br><span class="line">    start -= 1</span><br><span class="line">    while True:</span><br><span class="line">        if start &gt;= end - 1:</span><br><span class="line">            break</span><br><span class="line">        start += 1</span><br><span class="line">        yield start</span><br><span class="line"></span><br><span class="line">if __name__ == &apos;__main__&apos;:</span><br><span class="line">    use_range()</span><br><span class="line">    print(&apos;--------------------&apos;)</span><br><span class="line">    iter = IterRange(5, 10)</span><br><span class="line">    # print(next(iter))</span><br><span class="line">    l = list(iter) # [5, 6, 7, 8, 9]</span><br><span class="line">    print(l)</span><br><span class="line"></span><br><span class="line">    print(&apos;--------------------&apos;)</span><br><span class="line">    gen = GenRange(5, 10).get_num() # &lt;generator object GenRange.get_num at 0x102750d68&gt;</span><br><span class="line">    print(gen) # [5, 6, 7, 8, 9]</span><br><span class="line">    # print(next(gen))</span><br><span class="line">    print(list(gen))</span><br><span class="line"></span><br><span class="line">    print(&apos;--------------------&apos;)</span><br><span class="line">    gen_f = get_num(5, 10)</span><br><span class="line">    print(gen_f) # &lt;generator object get_num at 0x102750de0&gt;</span><br><span class="line">    print(list(gen_f)) # [5, 6, 7, 8, 9]</span><br></pre></td></tr></table></figure><h3 id="四、异常处理"><a href="#四、异常处理" class="headerlink" title="四、异常处理"></a>四、异常处理</h3><ul><li>每个异常都是某个类的实例</li><li>发生了异常如果不捕获，则程序将终止执行</li><li>有一些内置的异常类</li><li>使用 try…except 捕获多个指定异常</li><li>可选的 else 子句，必须放在所有的 except 子句之后，将在 try 子句没有发生任何异常的时候执行</li><li>使用 raise 语句抛出一个指定的异常：raise [Exception [, args [, traceback]]]</li><li>只想知道是否抛出了一个异常，并不想去处理它，一个简单的 raise 语句就可以再次把它抛出</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">try:</span><br><span class="line">    raise NameError(&apos;HiThere&apos;)</span><br><span class="line">except NameError:</span><br><span class="line">    print(&apos;An exception flew by!&apos;)</span><br><span class="line">    raise</span><br></pre></td></tr></table></figure><ul><li>finally 子句，无论是否发生异常都将执行最后的代码</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">try:</span><br><span class="line">    raise KeyboardInterrupt</span><br><span class="line">finally:</span><br><span class="line">    print(&apos;Goodbye, world!&apos;)</span><br><span class="line"></span><br><span class="line"># 先执行 finally 子句，再抛出异常（没有任何的 except 把它截住，那么这个异常会在 finally 子句执行后被抛出）</span><br><span class="line">Goodbye, world!</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File &quot;/test.py&quot;, line 2, in &lt;module&gt;</span><br><span class="line">    raise KeyboardInterrupt</span><br><span class="line">KeyboardInterrupt</span><br></pre></td></tr></table></figure><h4 id="4-1、异常的捕获"><a href="#4-1、异常的捕获" class="headerlink" title="4.1、异常的捕获"></a>4.1、异常的捕获</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">def test_div(num1, num2):</span><br><span class="line">    &quot;&quot;&quot; 当除数为0时 &quot;&quot;&quot;</span><br><span class="line">    return num1 / num2</span><br><span class="line"></span><br><span class="line">def test_file():</span><br><span class="line">    &quot;&quot;&quot; 读取文件 &quot;&quot;&quot;</span><br><span class="line">    try:</span><br><span class="line">        f = open(&apos;testx.txt&apos;, &apos;r&apos;, encoding=&apos;utf-8&apos;)</span><br><span class="line">        rest = f.read()</span><br><span class="line">        print(rest)</span><br><span class="line">    except Exception as err:</span><br><span class="line">        print(&apos;open file error&apos;)</span><br><span class="line">        print(err)</span><br><span class="line">    finally:</span><br><span class="line">        try:</span><br><span class="line">            f.close()</span><br><span class="line">            print(&apos;closed&apos;)</span><br><span class="line">        except:</span><br><span class="line">            pass</span><br><span class="line"></span><br><span class="line">if __name__ == &apos;__main__&apos;:</span><br><span class="line">    try:</span><br><span class="line">        rest = test_div(5, 0)</span><br><span class="line">        print(rest)</span><br><span class="line">    # 统一处理多个错误</span><br><span class="line">    except (ZeroDivisionError, TypeError) as err:</span><br><span class="line">        print(&apos;反正就是报错了&apos;)</span><br><span class="line">        print(err)</span><br><span class="line">    # except ZeroDivisionError:</span><br><span class="line">    #     print(&apos;报错了，除数不能为0&apos;)</span><br><span class="line">    # except TypeError:</span><br><span class="line">    #     print(&apos;报错了，请输入数字&apos;)</span><br><span class="line"></span><br><span class="line">    test_file()</span><br></pre></td></tr></table></figure><h4 id="4-2、自定义异常"><a href="#4-2、自定义异常" class="headerlink" title="4.2、自定义异常"></a>4.2、自定义异常</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line">class ApiException(Exception):</span><br><span class="line">    &quot;&quot;&quot; 我的自定义异常 &quot;&quot;&quot;</span><br><span class="line">    err_code = &apos;&apos;</span><br><span class="line">    err_msg = &apos;&apos;</span><br><span class="line"></span><br><span class="line">    def __init__(self, err_code=None, err_msg=None):</span><br><span class="line">        &quot;&quot;&quot;</span><br><span class="line">        :param err_code:</span><br><span class="line">        :param err_msg:</span><br><span class="line">        &quot;&quot;&quot;</span><br><span class="line">        self.err_code = self.err_code if self.err_code else err_code</span><br><span class="line">        self.err_msg = self.err_msg if self.err_msg else err_msg</span><br><span class="line"></span><br><span class="line">    def __str__(self):</span><br><span class="line">        return &apos;Error: &#123;0&#125; - &#123;1&#125;&apos;.format(self.err_code, self.err_msg)</span><br><span class="line"></span><br><span class="line">class BadPramsException(ApiException):</span><br><span class="line">    &quot;&quot;&quot; 参数不正确 &quot;&quot;&quot;</span><br><span class="line">    err_code = &apos;40002&apos;</span><br><span class="line">    err_msg = &apos;两个参数必须都是整数&apos;</span><br><span class="line"></span><br><span class="line">def divide(num1, num2):</span><br><span class="line">    &quot;&quot;&quot; 除法的实现 &quot;&quot;&quot;</span><br><span class="line">    # 两个数必须为整数</span><br><span class="line">    if not isinstance(num1, int) or not isinstance(num2, int):</span><br><span class="line">        raise BadPramsException()</span><br><span class="line">    # 除数不能为0</span><br><span class="line">    if num2 == 0:</span><br><span class="line">        raise ApiException(&apos;400000&apos;, &apos;除数不能为0&apos;)</span><br><span class="line">    return num1 / num2</span><br><span class="line"></span><br><span class="line">if __name__ == &apos;__main__&apos;:</span><br><span class="line"></span><br><span class="line">    try:</span><br><span class="line">        rest = divide(5, &apos;s&apos;)</span><br><span class="line">        print(rest)</span><br><span class="line">    # except BadPramsException as e:</span><br><span class="line">    #     print(&apos;----------------&apos;)</span><br><span class="line">    #     print(e)</span><br><span class="line">    except ApiException as err:</span><br><span class="line">        print(&apos;出错了&apos;)</span><br><span class="line">        print(err)</span><br></pre></td></tr></table></figure><h4 id="4-3、抛出异常及异常的传递"><a href="#4-3、抛出异常及异常的传递" class="headerlink" title="4.3、抛出异常及异常的传递"></a>4.3、抛出异常及异常的传递</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">class MyException(Exception):</span><br><span class="line">    &quot;&quot;&quot; 自定义异常类 &quot;&quot;&quot;</span><br><span class="line">    pass</span><br><span class="line"></span><br><span class="line">def v_for():</span><br><span class="line">    &quot;&quot;&quot; 自定义函数 &quot;&quot;&quot;</span><br><span class="line">    for i in range(1, 100):</span><br><span class="line">        if i == 20:</span><br><span class="line">            raise MyException</span><br><span class="line">        print(i)</span><br><span class="line"></span><br><span class="line">def call_v_for():</span><br><span class="line">    &quot;&quot;&quot; 调用vfor函数 &quot;&quot;&quot;</span><br><span class="line">    print(&apos;开始调用v_for&apos;)</span><br><span class="line">    try:</span><br><span class="line">        v_for()</span><br><span class="line">    except MyException:</span><br><span class="line">        print(&apos;-------------------------&apos;)</span><br><span class="line">    print(&apos;结束调用v_for&apos;)</span><br><span class="line"></span><br><span class="line">def test_rasie():</span><br><span class="line">    print(&apos;测试函数&apos;)</span><br><span class="line">    call_v_for()</span><br><span class="line">    print(&apos;测试完毕&apos;)</span><br><span class="line"></span><br><span class="line">if __name__ == &apos;__main__&apos;:</span><br><span class="line">    test_rasie()</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;python 装饰器与异常处理&lt;/p&gt;
    
    </summary>
    
      <category term="note" scheme="http://blog.master-ss.cn/categories/note/"/>
    
    
  </entry>
  
  <entry>
    <title>python 面对对象</title>
    <link href="http://blog.master-ss.cn/note/python/class/"/>
    <id>http://blog.master-ss.cn/note/python/class/</id>
    <published>2020-03-10T03:12:00.743Z</published>
    <updated>2020-03-10T03:36:39.852Z</updated>
    
    <content type="html"><![CDATA[<p>python 面对对象</p><a id="more"></a><h3 id="一、定义"><a href="#一、定义" class="headerlink" title="一、定义"></a>一、定义</h3><ul><li><p>类与对象</p><ul><li>类是模子，确定对象将会拥有的特征（属性）和行为（方法）</li><li>对象是类的实例表现</li><li>类是对象的类型</li><li>对象是特定类型的数据</li></ul></li><li><p>属性与方法</p><ul><li>属性：对象具有的各种静态特征</li><li>方法：对象具有的各种动态行为</li></ul></li></ul><h3 id="二、-三大特性"><a href="#二、-三大特性" class="headerlink" title="二、 三大特性"></a>二、 三大特性</h3><ul><li><p>封装：对外部隐藏有关对象工作原理的细节，提供一些可以被外界访问的属性的方法</p></li><li><p>继承：继承是使用现有类的所有功能，并在无需重新编写原来的类的情况下对这些功能进行拓展</p></li><li><p>多态：可对不同类型的对象执行相同的操作，得到的确是不同的结果</p></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br></pre></td><td class="code"><pre><span class="line">class Cat(object):</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    猫科动物 # __doc__ 文档信息</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    # 类的属性</span><br><span class="line">    tag = &apos;Cat base&apos;</span><br><span class="line"></span><br><span class="line">    def __init__(self, name, age, sex=None):</span><br><span class="line">        # 构造函数（默认构造函数可以不传参）</span><br><span class="line">        self.name = name  # 实例化后的属性</span><br><span class="line">        self.__age = age  # 私有属性</span><br><span class="line">        self.sex = sex</span><br><span class="line">        pass</span><br><span class="line"></span><br><span class="line">    # 方法</span><br><span class="line">    def showInfo(self):</span><br><span class="line">        &quot;&quot;&quot;</span><br><span class="line">        显示信息</span><br><span class="line">        &quot;&quot;&quot;</span><br><span class="line">        rest = &apos;我叫：&#123;0&#125;，年龄：&#123;1&#125;，性别：&#123;2&#125;，tag：&#123;3&#125;&apos;.format(</span><br><span class="line">            self.name, self.__age, self.sex, self.tag)</span><br><span class="line">        return rest</span><br><span class="line"></span><br><span class="line">    def eat(self):</span><br><span class="line">        print(&apos;要吃东西&apos;)</span><br><span class="line"></span><br><span class="line">    # 析构函数</span><br><span class="line">    def __del__(self):</span><br><span class="line">        pass</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">class Beast(object):</span><br><span class="line">    def eat(self):</span><br><span class="line">        print(&apos;喜欢吃肉&apos;)</span><br><span class="line"></span><br><span class="line">    def danger(self):</span><br><span class="line">        print(&apos;我是危险猛兽&apos;)</span><br><span class="line"></span><br><span class="line">    # 私有方法（两个下划线开头，声明该方法为私有方法，只能在类的内部调用）</span><br><span class="line">    def __foo(self):</span><br><span class="line">        print(&apos;这是私有方法&apos;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">class Tiger(Cat, Beast):</span><br><span class="line">    tag: &apos;Tiger base&apos;</span><br><span class="line"></span><br><span class="line">    def __init__(self, name, age, color=&apos;yellow&apos;):</span><br><span class="line">        # 调用父类构造函数（如果子类不重写 __init__，则默认调用父类方法）</span><br><span class="line">        super().__init__(name, age)</span><br><span class="line">        self.color = color</span><br><span class="line"></span><br><span class="line">    def eat(self):</span><br><span class="line">        super().eat()</span><br><span class="line">        print(&apos;特喜欢吃猪肉&apos;)</span><br><span class="line"></span><br><span class="line">    # 方法（重载/重写）</span><br><span class="line">    def showInfo(self):</span><br><span class="line">        &quot;&quot;&quot;</span><br><span class="line">        显示信息</span><br><span class="line">        &quot;&quot;&quot;</span><br><span class="line">        rest = &apos;我叫：&#123;0&#125;，性别：&#123;1&#125;，tag：&#123;2&#125;, 颜色：&#123;3&#125;&apos;.format(</span><br><span class="line">            self.name, self.sex, self.tag, self.color)</span><br><span class="line">        return rest</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">if __name__ == &apos;__main__&apos;:</span><br><span class="line">    # 实例化</span><br><span class="line">    cat_black = Cat(&apos;ss&apos;, 2)</span><br><span class="line"></span><br><span class="line">    # 报错，不能直接访问到私有变量，解析器对外把 __age 变量改成了 _Cat__age</span><br><span class="line">    # print(cat_black.__age)</span><br><span class="line">    # 不推荐使用 _Cat__age，因为 Python 可能会把 __age 改成不同的变量名</span><br><span class="line">    # print(cat_black._Cat__age) # 2</span><br><span class="line">    print(cat_black.showInfo()) # 我叫：ss，年龄：2，性别：None，tag：Cat base</span><br><span class="line"></span><br><span class="line">    # 修改实例属性</span><br><span class="line">    cat_black.name = &apos;黑黑&apos;</span><br><span class="line">    cat_black.__age = 6  # 不报错</span><br><span class="line">    print(&apos;cat_black.__age：&apos;, cat_black.__age)  # 经过上次设置后直接访问返回 6</span><br><span class="line">    print(cat_black.showInfo())  # 我叫：黑黑，年龄：2，性别：None，tag：Cat base（打印的年龄信息仍是 2，因为外部设置的 __age 跟类内部的 __age 不是一个变量）</span><br><span class="line"></span><br><span class="line">    # 判断对象是否为类的实例</span><br><span class="line">    print(&apos;判断 cat_black 是否为 Cat 的实例：&apos;, isinstance(cat_black, Cat)) # True</span><br><span class="line">    print(&apos;判断 cat_black 是否为 Tiger 的实例：&apos;, isinstance(cat_black, Tiger)) # False</span><br><span class="line">    print(&apos;--------------------------------------\n&apos;)</span><br><span class="line"></span><br><span class="line">    # 实例可以访问类属性</span><br><span class="line">    cat_white = Cat(&apos;小白&apos;, 3)</span><br><span class="line">    print(cat_white.showInfo()) # 我叫：小白，年龄：3，性别：None，tag：Cat base</span><br><span class="line">    print(&apos;实例可以访问类属性：&apos;, cat_black.tag == Cat.tag and cat_white.tag == Cat.tag) # True</span><br><span class="line"></span><br><span class="line">    # 类属性会被实例属性覆盖</span><br><span class="line">    cat_white.tag = &apos;ss&apos;</span><br><span class="line">    print(&apos;类属性会被实例属性覆盖：&apos;, cat_white.tag != Cat.tag) # True</span><br><span class="line">    print(cat_white.showInfo()) # 我叫：小白，年龄：3，性别：None，tag：ss</span><br><span class="line">    print(&apos;--------------------------------------\n&apos;)</span><br><span class="line"></span><br><span class="line">    # 类的继承</span><br><span class="line">    tiger = Tiger(&apos;东北虎&apos;, 3)</span><br><span class="line">    print(tiger.showInfo()) # 我叫：东北虎，性别：None，tag：Cat base, 颜色：yellow</span><br><span class="line"></span><br><span class="line">    # 子类调用父类方法</span><br><span class="line">    tiger.danger() # 我是危险猛兽</span><br><span class="line"></span><br><span class="line">    # 多重继承时如果方法重名，则只继承第一个继承的父类</span><br><span class="line">    # 如果子类未定义方法，则按类声明的圆括号中基类顺序从左至右搜索基类中是否包含方法</span><br><span class="line">    tiger.eat() # 要吃东西\n特喜欢吃猪肉</span><br><span class="line"></span><br><span class="line">    # 判断是否为子孙类</span><br><span class="line">    print(&apos;判断 Tiger 是否为 Cat 子孙类：&apos;, issubclass(Tiger, Cat)) # True</span><br><span class="line">    print(&apos;判断 Tiger 是否为 Beast 子孙类：&apos;, issubclass(Tiger, Beast)) # True</span><br></pre></td></tr></table></figure><h3 id="三、-类的高级特性"><a href="#三、-类的高级特性" class="headerlink" title="三、 类的高级特性"></a>三、 类的高级特性</h3><ul><li>@property: 将类的方法当做属性来使用</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line">class PetCat(object):</span><br><span class="line">    &quot;&quot;&quot; 家猫类 &quot;&quot;&quot;</span><br><span class="line"></span><br><span class="line">    def __init__(self, name, age):</span><br><span class="line">        &quot;&quot;&quot;</span><br><span class="line">        构造方法</span><br><span class="line">        :param name: 猫的名称</span><br><span class="line">        :param age: 猫的年龄</span><br><span class="line">        &quot;&quot;&quot;</span><br><span class="line">        self.name = name</span><br><span class="line">        # 私有属性，不能给你们操作</span><br><span class="line">        self.__age = age</span><br><span class="line"></span><br><span class="line">    @property</span><br><span class="line">    def age(self):</span><br><span class="line">        return self.__age</span><br><span class="line"></span><br><span class="line">    @age.setter</span><br><span class="line">    def age(self, value):</span><br><span class="line">        if not isinstance(value, int):</span><br><span class="line">            print(&apos;年龄只能是整数&apos;)</span><br><span class="line">            return 0</span><br><span class="line">        if value &lt; 0 or value &gt; 100:</span><br><span class="line">            print(&apos;年龄只能介于0-100之间&apos;)</span><br><span class="line">            return 0</span><br><span class="line">        self.__age = value</span><br><span class="line"></span><br><span class="line">    # 描述符</span><br><span class="line">    @property</span><br><span class="line">    def show_info(self):</span><br><span class="line">        &quot;&quot;&quot; 显示猫的信息 &quot;&quot;&quot;</span><br><span class="line">        return &apos;我叫：&#123;0&#125;，今年&#123;1&#125;岁&apos;.format(self.name, self.age)</span><br><span class="line"></span><br><span class="line">    def __str__(self):</span><br><span class="line">        &quot;&quot;&quot; 显示实例对象的描述信息 &quot;&quot;&quot;</span><br><span class="line">        return &apos;我的对象: &#123;0&#125;&apos;.format(self.name)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">if __name__ == &apos;__main__&apos;:</span><br><span class="line">    cat_black = PetCat(&apos;小黑&apos;, 2)</span><br><span class="line">    rest = cat_black.show_info</span><br><span class="line">    print(rest) # # 我叫：小黑，今年2岁</span><br><span class="line">    # 改变猫的age</span><br><span class="line">    cat_black.age = &apos;hello&apos; # 年龄只能是整数</span><br><span class="line">    rest = cat_black.show_info</span><br><span class="line">    print(rest) # 我叫：小黑，今年2岁</span><br><span class="line">    # 打印对象的描述信息，可在 __str__ 方法中自定义</span><br><span class="line">    print(cat_black) # 我的对象: 小黑</span><br></pre></td></tr></table></figure><ul><li><code>__slots__</code>: 限制实例的属性</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line">class PetCat(object):</span><br><span class="line">    &quot;&quot;&quot; 家猫类 &quot;&quot;&quot;</span><br><span class="line"></span><br><span class="line">    __slots__ = (&apos;name&apos;, &apos;age&apos;)</span><br><span class="line"></span><br><span class="line">    def __init__(self, name, age):</span><br><span class="line">        &quot;&quot;&quot;</span><br><span class="line">        构造方法</span><br><span class="line">        :param name: 猫吃的名称</span><br><span class="line">        :param age: 猫的年龄</span><br><span class="line">        &quot;&quot;&quot;</span><br><span class="line">        self.name = name</span><br><span class="line">        self.age = age</span><br><span class="line"></span><br><span class="line">    @property</span><br><span class="line">    def show_info(self):</span><br><span class="line">        &quot;&quot;&quot; 显示猫的信息 &quot;&quot;&quot;</span><br><span class="line">        return &apos;我叫：&#123;0&#125;，今年&#123;1&#125;岁&apos;.format(self.name, self.age)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">class HuaCat(PetCat):</span><br><span class="line">    &quot;&quot;&quot; 中华田园猫 &quot;&quot;&quot;</span><br><span class="line">    __slots__ = (&apos;color&apos;, )</span><br><span class="line"></span><br><span class="line">def eat():</span><br><span class="line">    print(&apos;我喜欢吃鱼&apos;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">if __name__ == &apos;__main__&apos;:</span><br><span class="line">    # cat_black = PetCat(&apos;小黑&apos;, 2)</span><br><span class="line">    # rest = cat_black.show_info</span><br><span class="line">    # print(rest)</span><br><span class="line"></span><br><span class="line">    # # 给实例添加新的属性（使用 slots 后不允许给实例添加新的属性）</span><br><span class="line">    # cat_black.color = &apos;白色&apos;</span><br><span class="line">    # print(cat_black.color)</span><br><span class="line">    # # 给实例添加新的方法（使用 slots 后不允许给实例添加新的方法）</span><br><span class="line">    # cat_black.eat = eat</span><br><span class="line">    # cat_black.eat()</span><br><span class="line"></span><br><span class="line">    # slots 定义的属性仅对当前类实例起作用，对继承的子类是不起作用</span><br><span class="line">    # 除非在子类中也定义 slots，这样，子类实例允许定义的属性就是自身的 slots 加上父类的 slots</span><br><span class="line">    cat_white = HuaCat(&apos;小白&apos;, 3)</span><br><span class="line">    rest = cat_white.show_info</span><br><span class="line">    print(rest) # 我叫：小白，今年3岁</span><br><span class="line">    cat_white.color = &apos;白色&apos;</span><br><span class="line">    print(cat_white.color) # 白色</span><br><span class="line">    cat_white.name = &apos;旺旺&apos;</span><br><span class="line">    print(cat_white.show_info) # 我叫：旺旺，今年3岁</span><br></pre></td></tr></table></figure><h3 id="四、-类的静态方法和实例方法"><a href="#四、-类的静态方法和实例方法" class="headerlink" title="四、 类的静态方法和实例方法"></a>四、 类的静态方法和实例方法</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line">class Cat(object):</span><br><span class="line">    tag = &apos;猫科动物&apos;</span><br><span class="line"></span><br><span class="line">    def __init__(self, name):</span><br><span class="line">        self.name = name</span><br><span class="line"></span><br><span class="line">    # 类的静态方法</span><br><span class="line">    @staticmethod</span><br><span class="line">    def breath():</span><br><span class="line">        &quot;&quot;&quot; 呼吸 &quot;&quot;&quot;</span><br><span class="line">        print(&apos;猫都需要呼吸空气&apos;)</span><br><span class="line"></span><br><span class="line">    @classmethod</span><br><span class="line">    def show_info(cls, name):</span><br><span class="line">        &quot;&quot;&quot; 显示猫的信息，cls 代表当前类 &quot;&quot;&quot;</span><br><span class="line">        # print(&apos;类的属性：&#123;0&#125;， 实例的属性： &#123;1&#125;&apos;.format(cls.tag, cls.name))</span><br><span class="line">        return cls(name)</span><br><span class="line"></span><br><span class="line">    def show_info2(self):</span><br><span class="line">        &quot;&quot;&quot; 显示猫的信息 &quot;&quot;&quot;</span><br><span class="line">        # 设计模式</span><br><span class="line">        print(&apos;类的属性：&#123;0&#125;， 实例的属性： &#123;1&#125;&apos;.format(self.tag, self.name))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">if __name__ == &apos;__main__&apos;:</span><br><span class="line">    # 通过类进行调用静态方法</span><br><span class="line">    Cat.breath() # 猫都需要呼吸空气</span><br><span class="line"></span><br><span class="line">    # 通过类的实例进行调用静态方法</span><br><span class="line">    cat = Cat(&apos;小黑&apos;)</span><br><span class="line">    cat.breath() # 猫都需要呼吸空气</span><br><span class="line"></span><br><span class="line">    # 方法内 self 既可以访问实例属性也可以访问类属性</span><br><span class="line">    cat.show_info2() # 类的属性：猫科动物， 实例的属性： 小黑</span><br><span class="line"></span><br><span class="line">    # 类调用 classMethod</span><br><span class="line">    cat2 = Cat.show_info(&apos;小黄&apos;)</span><br><span class="line">    cat2.show_info2() # 类的属性：猫科动物， 实例的属性： 小黄</span><br><span class="line"></span><br><span class="line">    # 实例调用 classMethod</span><br><span class="line">    cat3 = cat.show_info(&apos;小蓝&apos;)</span><br><span class="line">    cat3.show_info2() # 类的属性：猫科动物， 实例的属性： 小蓝</span><br></pre></td></tr></table></figure><h3 id="五、-类的专有方法"><a href="#五、-类的专有方法" class="headerlink" title="五、 类的专有方法"></a>五、 类的专有方法</h3><ul><li><code>__init__</code> : 构造函数，在生成对象时调用</li><li><code>__del__</code>: 析构函数，释放对象时使用</li><li><code>__repr__</code>: 打印，转换</li><li><code>__setitem__</code>: 按照索引赋值</li><li><code>__getitem__</code>: 按照索引获取值</li><li><code>__len__</code>: 获得长度</li><li><code>__cmp__</code>: 比较运算</li><li><code>__call__</code>: 函数调用</li><li><code>__add__</code>: 加运算</li><li><code>__sub__</code>: 减运算</li><li><code>__mul__</code>: 乘运算</li><li><code>__truediv__</code>: 除运算</li><li><code>__mod__</code>: 求余运算</li><li><code>__pow__</code>: 乘方</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"># 运算符重载，对类的专有方法进行重载</span><br><span class="line">class Vector:</span><br><span class="line">   def __init__(self, a, b):</span><br><span class="line">      self.a = a</span><br><span class="line">      self.b = b</span><br><span class="line"></span><br><span class="line">   def __str__(self):</span><br><span class="line">      return &apos;Vector (%d, %d)&apos; % (self.a, self.b)</span><br><span class="line"></span><br><span class="line">   def __add__(self,other):</span><br><span class="line">      return Vector(self.a + other.a, self.b + other.b)</span><br><span class="line"></span><br><span class="line">v1 = Vector(2,10)</span><br><span class="line">v2 = Vector(5,-2)</span><br><span class="line">print (v1 + v2) # Vector (7, 8)</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;python 面对对象&lt;/p&gt;
    
    </summary>
    
      <category term="note" scheme="http://blog.master-ss.cn/categories/note/"/>
    
    
  </entry>
  
  <entry>
    <title>python 作用域与垃圾回收</title>
    <link href="http://blog.master-ss.cn/note/python/gc/"/>
    <id>http://blog.master-ss.cn/note/python/gc/</id>
    <published>2020-03-10T02:58:39.055Z</published>
    <updated>2020-03-10T03:11:25.062Z</updated>
    
    <content type="html"><![CDATA[<p>python 作用域与垃圾回收</p><a id="more"></a><h3 id="一、命名空间"><a href="#一、命名空间" class="headerlink" title="一、命名空间"></a>一、命名空间</h3><ul><li>命名空间提供了在项目中避免名字冲突的一种方法</li><li>各个命名空间是独立的，没有任何关系的，所以一个命名空间中不能有重名，但不同的命名空间是可以重名而没有任何影响</li><li>三种命名空间：<ul><li>内置名称，Python 语言内置的名称，比如函数名 abs、char 和异常名称 BaseException、Exception 等等</li><li>全局名称，模块中定义的名称，记录了模块的变量，包括函数、类、其它导入的模块、模块级的变量和常量</li><li>局部名称，函数中定义的名称，记录了函数的变量，包括函数的参数和局部定义的变量（类中定义的也是）</li></ul></li><li>命名空间查找顺序：局部的命名空间去 -&gt; 全局命名空间 -&gt; 内置命名空间</li><li>如果找不到变量 runoob，它将放弃查找并引发一个 NameError 异常</li><li>声明周期：取决于对象的作用域，如果对象执行完成，则该命名空间的生命周期就结束；故无法从外部命名空间访问内部命名空间的对象</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"># var1 是全局名称</span><br><span class="line">var1 = 5</span><br><span class="line">def some_func():</span><br><span class="line"> </span><br><span class="line">    # var2 是局部名称</span><br><span class="line">    var2 = 6</span><br><span class="line">    def some_inner_func():</span><br><span class="line"> </span><br><span class="line">        # var3 是内嵌的局部名称</span><br><span class="line">        var3 = 7</span><br></pre></td></tr></table></figure><h3 id="二、作用域"><a href="#二、作用域" class="headerlink" title="二、作用域"></a>二、作用域</h3><ul><li>作用域就是一个 Python 程序可以直接访问命名空间的正文区域</li><li>在一个 python 程序中，直接访问一个变量，会从内到外依次访问所有的作用域直到找到，否则会报未定义的错误</li><li>四种作用域：<ul><li>局部作用域（Local）：最内层，包含局部变量，比如一个函数/方法内部</li><li>闭包函数外的函数（Enclosing）：包含了非局部(non-local)也非全局(non-global)的变量。比如两个嵌套函数，一个函数（或类） A 里面又包含了一个函数 B ，那么对于 B 中的名称来说 A 中的作用域就为 nonlocal</li><li>全局作用域（Global）：当前脚本的最外层，比如当前模块的全局变量</li><li>内建作用域（Built-in）：包含了内建的变量/关键字等，最后被搜索</li></ul></li><li>当内部作用域想修改外部作用域的变量时，就要用到 global 和 nonlocal 关键字</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"># 修改外部作用域</span><br><span class="line">num = 1</span><br><span class="line">def fun1():</span><br><span class="line">    global num # 需要使用 global 关键字声明</span><br><span class="line">    print(num) # 1</span><br><span class="line">    num = 123</span><br><span class="line">    print(num) # 123</span><br><span class="line">fun1()</span><br><span class="line">print(num) # 123</span><br><span class="line"></span><br><span class="line"># 修改嵌套作用域</span><br><span class="line">def outer():</span><br><span class="line">    num = 10</span><br><span class="line">    def inner():</span><br><span class="line">        nonlocal num # nonlocal关键字声明</span><br><span class="line">        num = 100</span><br><span class="line">        print(num) # 100</span><br><span class="line">    inner()</span><br><span class="line">    print(num) # 100</span><br><span class="line">outer()</span><br><span class="line"></span><br><span class="line"># 特殊情况，局部作用域引用错误（test 函数中的 a 使用的是局部，未定义，无法修改）</span><br><span class="line">a = 10</span><br><span class="line">def test():</span><br><span class="line">    a = a + 1</span><br><span class="line">    print(a)</span><br><span class="line">test()</span><br><span class="line"># Traceback (most recent call last):</span><br><span class="line">#   File &quot;test.py&quot;, line 7, in &lt;module&gt;</span><br><span class="line">#     test()</span><br><span class="line">#   File &quot;test.py&quot;, line 5, in test</span><br><span class="line">#     a = a + 1</span><br><span class="line"># UnboundLocalError: local variable &apos;a&apos; referenced before assignment</span><br><span class="line"># 修改方法：</span><br><span class="line"># 1、a = a + 1 改为 b = a + 1</span><br><span class="line"># 2、通过函数参数传递，def test() 改为 def test(a)</span><br></pre></td></tr></table></figure><h3 id="三、赋值语句内存分析"><a href="#三、赋值语句内存分析" class="headerlink" title="三、赋值语句内存分析"></a>三、赋值语句内存分析</h3><ul><li>通过 id() 方法访问内存地址</li><li>== 表示值相等，is 表示内存引用地址相同</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">a = 1</span><br><span class="line">b = 1</span><br><span class="line">a is b # True，如果是较小数字或较短字符串，python 让变量共用内存地址</span><br><span class="line"></span><br><span class="line">e = 999999999</span><br><span class="line">f = 999999999</span><br><span class="line">e == f # True，值相等</span><br><span class="line">e is f # False，如果是较大数字或较长字符串，内存地址不共用</span><br><span class="line"></span><br><span class="line">g = []</span><br><span class="line">h = []</span><br><span class="line">id(g) == id(h) # False，引用类型内存地址不共用</span><br><span class="line"></span><br><span class="line"># 综合实例</span><br><span class="line">def extend_list(val, l=[]):</span><br><span class="line">    print(&apos;------------------&apos;)</span><br><span class="line">    print(l, id(l))</span><br><span class="line">    l.append(val)</span><br><span class="line">    print(l, id(l))</span><br><span class="line">    return l</span><br><span class="line"></span><br><span class="line">list1 = extend_list(10)</span><br><span class="line">list2 = extend_list(123, [])</span><br><span class="line">list3 = extend_list(&apos;a&apos;)</span><br><span class="line"></span><br><span class="line">print(list1) # [10, &apos;a&apos;]</span><br><span class="line">print(list2) # [123]</span><br><span class="line">print(list3) # [10, &apos;a&apos;]</span><br><span class="line">print(list3 is list1) # True，list1 和 list3 共用同一个内存地址</span><br></pre></td></tr></table></figure><h3 id="四、垃圾回收机制"><a href="#四、垃圾回收机制" class="headerlink" title="四、垃圾回收机制"></a>四、垃圾回收机制</h3><ul><li>以引用计数为主，分代收集为辅</li><li>如果一个对象的引用数为 0，python 虚拟机就会回收这个对象的内存</li><li>引用计数的缺陷是循环引用的问题</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">class Cat(object):</span><br><span class="line">    def __init__(self):</span><br><span class="line">        print(&apos;对象产生了: &#123;0&#125;&apos;.format(id(self)))</span><br><span class="line"></span><br><span class="line">    # 对象被回收的时候被调用</span><br><span class="line">    def __del__(self):</span><br><span class="line">        print(&apos;对象删除了: &#123;0&#125;&apos;.format(id(self)))</span><br><span class="line"></span><br><span class="line">def f0():</span><br><span class="line">    &quot;&quot;&quot; 自动回收内存 &quot;&quot;&quot;</span><br><span class="line">    while True:</span><br><span class="line">        c1 = Cat()</span><br><span class="line"></span><br><span class="line">def f1():</span><br><span class="line">    &quot;&quot;&quot; 一直在被引用，不会被回收 &quot;&quot;&quot;</span><br><span class="line">    l = []</span><br><span class="line">    while True:</span><br><span class="line">        c1 = Cat()</span><br><span class="line">        l.append(c1)</span><br><span class="line">        print(len(l))</span><br><span class="line"></span><br><span class="line">if __name__ == &apos;__main__&apos;:</span><br><span class="line">    f1()</span><br></pre></td></tr></table></figure><h3 id="五、内存管理机制"><a href="#五、内存管理机制" class="headerlink" title="五、内存管理机制"></a>五、内存管理机制</h3><h4 id="5-1、引用计数"><a href="#5-1、引用计数" class="headerlink" title="5.1、引用计数"></a>5.1、引用计数</h4><ul><li>每个对象都有存有指向该对象的引用总数</li><li>查看某个对象的引用计数 sys.getrefcount()</li><li>可以使用 del 关键字删除某个引用</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">import sys</span><br><span class="line"></span><br><span class="line">l = []</span><br><span class="line">l2 = l</span><br><span class="line">l3 = l</span><br><span class="line">l5 = l3</span><br><span class="line">print(sys.getrefcount(l))  # 5，对象 l 被引用的数量，方法执行时有个临时的引用，会比实际看到的多 1</span><br><span class="line">del l2 # 删除某个引用</span><br><span class="line">print(sys.getrefcount(l)) # 4</span><br><span class="line"></span><br><span class="line">print(&apos;xxxxxxxxxxxxx&apos;)</span><br><span class="line">i = 1</span><br><span class="line">print(sys.getrefcount(i)) # 177，基于 python 内部的内存共享机制</span><br><span class="line">a = i</span><br><span class="line">print(sys.getrefcount(i)) # 178</span><br></pre></td></tr></table></figure><h4 id="5-2、垃圾回收"><a href="#5-2、垃圾回收" class="headerlink" title="5.2、垃圾回收"></a>5.2、垃圾回收</h4><ul><li>满足特定条件，自动启动垃圾回收</li><li>当 python 运行时，会记录其中分配对象（object allocation）和取消分配对象（object deallocation）的次数</li><li>当两者的差值高于某个阀值时，垃圾回收才会启动</li><li>查看阀值 gc.get_threshold()，返回 (threshold0, threshold1, threshold2)，比如 (700, 10, 10)</li><li>分代回收<ul><li>python 将所有的对象分为 0，1，2 三代</li><li>所有的新建对象都是 0 代对象</li><li>当某一代对象经历过垃圾回收，依然存活，那么他将被归入下一代对象</li></ul></li><li>手动回收 gc.collect([generation])，可指定具体哪一代进行回收，不传则回收所有</li><li>objgraph 模块中的 count() 记录当前类产生的实例对象的个数</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">import gc</span><br><span class="line">import sys</span><br><span class="line">import objgraph</span><br><span class="line"></span><br><span class="line">print(gc.get_threshold()) # (700, 10, 10)</span><br><span class="line"></span><br><span class="line">class Persion(object):</span><br><span class="line">    pass</span><br><span class="line"></span><br><span class="line">class Cat(object):</span><br><span class="line">    pass</span><br><span class="line"></span><br><span class="line">p = Persion()</span><br><span class="line">c = Cat()</span><br><span class="line">p.name = &apos;Susan&apos;</span><br><span class="line"></span><br><span class="line"># 循环引用</span><br><span class="line">p.pet = c</span><br><span class="line">c.master = p</span><br><span class="line">print(sys.getrefcount(p)) # 3</span><br><span class="line">print(sys.getrefcount(c)) # 3</span><br><span class="line"></span><br><span class="line"># 调用 del 解除循环引用状态</span><br><span class="line">del p</span><br><span class="line">del c</span><br><span class="line"></span><br><span class="line"># 手动执行垃圾回收</span><br><span class="line">gc.collect()</span><br><span class="line"></span><br><span class="line"># 就算进行手动垃圾回收，引用次数仍为 1，因为存在循环引用，除非调用 del 方法</span><br><span class="line">print(objgraph.count(&apos;Persion&apos;)) # 0</span><br><span class="line">print(objgraph.count(&apos;Cat&apos;)) # 0</span><br></pre></td></tr></table></figure><h4 id="5-3、内存管理机制"><a href="#5-3、内存管理机制" class="headerlink" title="5.3、内存管理机制"></a>5.3、内存管理机制</h4><ul><li>内存池机制<ul><li>当创建大量消耗小内存的对象时，频繁调用 new/malloc 会导致大量的内存碎片，致使效率降低</li><li>内存池就是预先在内存中申请一定数量的，大小相等的内存块留作备用</li><li>当有新的内存需求时，就先从内存池中分配内存给这个需求，不够了之后再申请新的内存</li><li>这样做最显著的优势就是能够减少内存碎片，提升效率</li></ul></li><li>python3 内存管理机制 Pymalloc<ul><li>针对小对象（&lt;=512bytes），pymalloc 会在内存池中申请内存空间</li><li>当 &gt;512bytes，则会 PyMem_RawMalloc() 和 PyMem_RawRealloc() 来申请新的内存空间</li></ul></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;python 作用域与垃圾回收&lt;/p&gt;
    
    </summary>
    
      <category term="note" scheme="http://blog.master-ss.cn/categories/note/"/>
    
    
  </entry>
  
  <entry>
    <title>python 文件</title>
    <link href="http://blog.master-ss.cn/note/python/file/"/>
    <id>http://blog.master-ss.cn/note/python/file/</id>
    <published>2020-03-10T02:37:27.888Z</published>
    <updated>2020-03-10T02:38:26.580Z</updated>
    
    <content type="html"><![CDATA[<p>python 文件</p><a id="more"></a><h3 id="一、文件读写模式"><a href="#一、文件读写模式" class="headerlink" title="一、文件读写模式"></a>一、文件读写模式</h3><ul><li>r：读取模式（默认值）</li><li>w：写入模式，覆盖原内容</li><li>x：独占写入模式</li><li>a：附加模式，追加在原内容后</li><li>b：二进制模式（与其他模式结合使用）</li><li>t：文本模式（默认模式，与其他模式结合使用）</li><li>+：读写模式（与其他模式结合使用）</li></ul><table><thead><tr><th>模式</th><th>r</th><th>r+</th><th>w</th><th>w+</th><th>a</th><th>a+</th></tr></thead><tbody><tr><td>读</td><td>+</td><td>+</td><td></td><td>+</td><td></td><td>+</td></tr><tr><td>写</td><td></td><td>+</td><td>+</td><td>+</td><td>+</td><td>+</td></tr><tr><td>创建</td><td></td><td></td><td>+</td><td>+</td><td>+</td><td>+</td></tr><tr><td>覆盖</td><td></td><td></td><td></td><td>+</td><td>+</td><td></td></tr><tr><td>指针在开始</td><td>+</td><td>+</td><td>+</td><td>+</td><td></td><td></td></tr><tr><td>指针在结尾</td><td></td><td></td><td></td><td></td><td>+</td><td>+</td></tr></tbody></table><h3 id="二、文件的打开和关闭"><a href="#二、文件的打开和关闭" class="headerlink" title="二、文件的打开和关闭"></a>二、文件的打开和关闭</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"># 使用 open 函数打开文件（如果文件不存在则新建一个文件）</span><br><span class="line">f = open(&apos;test.py&apos;) # &lt;_io.TextIOWrapper name=&apos;test.py&apos; mode=&apos;r&apos; encoding=&apos;UTF-8&apos;&gt;</span><br><span class="line"></span><br><span class="line"># 使用 close 函数关闭文件</span><br><span class="line">f.close() # 要做异常处理</span><br><span class="line"></span><br><span class="line"># 使用 with 语法（到达该语句末尾时，将自动关闭文件，即便出现异常亦如此）</span><br><span class="line">with open(&apos;test.py&apos;) as f:</span><br><span class="line">    do_something(f)</span><br></pre></td></tr></table></figure><h3 id="三、文件的读写"><a href="#三、文件的读写" class="headerlink" title="三、文件的读写"></a>三、文件的读写</h3><ul><li>read()：读取文件，可以指定参数，表示读几个字符（字节），如果没传参数或者参数为负, 那么读取文件所有内容并返回</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">def read_file():</span><br><span class="line">    f = open(&apos;file.md&apos;, encoding=&apos;utf-8&apos;)</span><br><span class="line">    print(f.read(8)) # 先读取 8 个字符</span><br><span class="line">    rest = f.read() # 再前面的基础上读取剩余字符</span><br><span class="line">    print(rest)</span><br><span class="line">    f.close()</span><br><span class="line"></span><br><span class="line">read_file()</span><br></pre></td></tr></table></figure><ul><li>readline()：读取一行数据（可以指定参数，表示读前几个字符，指定参数效果同 read 函数；如果返回为空字符串，则说明读取到最后一行）</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">def read_file():</span><br><span class="line">    f = open(&apos;file.md&apos;, encoding=&apos;utf-8&apos;)</span><br><span class="line">    rest = f.readline()</span><br><span class="line">    print(rest)</span><br><span class="line">    f.close()</span><br><span class="line"></span><br><span class="line">read_file()</span><br></pre></td></tr></table></figure><ul><li>readlines()：读取所有行，并返回列表（可设置参数 sizehint, 读取指定长度的字节, 并且将这些字节按行分割）</li><li>seek(offset[, whence])<ul><li>offset：开始的偏移量，也就是代表需要移动偏移的字节数，如果是负数表示从倒数第几位开始</li><li>whence：可选，默认值为 0。给 offset 定义一个参数，表示要从哪个位置开始偏移；0 代表从文件开头开始算起，1 代表从当前位置开始算起，2 代表从文件末尾算起</li></ul></li></ul><h3 id="四、文件写入"><a href="#四、文件写入" class="headerlink" title="四、文件写入"></a>四、文件写入</h3><ul><li>使用 write 函数向打开的文件对象写入内容</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">def write_file():</span><br><span class="line">    f = open(&apos;test.txt&apos;, &apos;w&apos;, encoding=&apos;utf-8&apos;)</span><br><span class="line">    f.write(&apos;hello\n&apos;)</span><br><span class="line">    f.write(&apos;world&apos;)</span><br><span class="line">    f.close()</span><br><span class="line"></span><br><span class="line">write_file()</span><br></pre></td></tr></table></figure><ul><li>使用 writelines 函数向打开的文件对象写入多行内容</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">def write_file():</span><br><span class="line">    f = open(&apos;test.txt&apos;, &apos;w&apos;, encoding=&apos;utf-8&apos;)</span><br><span class="line">    l = [&apos;第一行\n&apos;, &apos;第二行&apos;]</span><br><span class="line">    f.writelines(l)</span><br><span class="line">    f.close()</span><br><span class="line"></span><br><span class="line">write_file()</span><br><span class="line"></span><br><span class="line"># 追加在原内容后</span><br><span class="line">def write_log():</span><br><span class="line">    f = open(&apos;test.txt&apos;, &apos;a&apos;, encoding=&apos;utf-8&apos;)</span><br><span class="line">    l = [&apos;第一行\n&apos;, &apos;第二行\n&apos;]</span><br><span class="line">    f.writelines(l)</span><br><span class="line">    f.close()</span><br><span class="line"></span><br><span class="line">write_log()</span><br><span class="line">write_log()</span><br><span class="line"></span><br><span class="line"># 读写模式</span><br><span class="line">def read_and_write():</span><br><span class="line">    f = open(&apos;test.txt&apos;, &apos;r+&apos;, encoding=&apos;utf-8&apos;)</span><br><span class="line">    read_test = f.read()</span><br><span class="line">    if &apos;1&apos; in read_test:</span><br><span class="line">        f.write(&apos;bbb&apos;)</span><br><span class="line">    else:</span><br><span class="line">        f.write(&apos;aaa&apos;)</span><br><span class="line">    f.close()</span><br><span class="line"></span><br><span class="line">read_and_write()</span><br></pre></td></tr></table></figure><h3 id="五、数据备份"><a href="#五、数据备份" class="headerlink" title="五、数据备份"></a>五、数据备份</h3><ul><li>pickle 模块实现了基本的数据序列和反序列化</li><li>通过 pickle 模块的序列化操作我们能够将程序中运行的对象信息保存到文件中去，永久存储</li><li>通过 pickle 模块的反序列化操作，我们能够从文件中创建上一次程序保存的对象</li><li>基本语法：<ul><li>pickle.dump(obj, file, [,protocol])</li><li>protocol 为序列化使用的协议版本：0：ASCII 协议；1：老式的二进制协议；2：2.3 版本引入的新二进制协议，较以前的更高效</li></ul></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">import pprint, pickle</span><br><span class="line"></span><br><span class="line"># 使用 pickle 模块将数据对象保存到文件</span><br><span class="line">data_w = &#123;</span><br><span class="line">    &apos;a&apos;: [1, 2.0, 3, 4+6j],</span><br><span class="line">    &apos;b&apos;: (&apos;string&apos;, u&apos;Unicode string&apos;),</span><br><span class="line">    &apos;c&apos;: None</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">list_w = [1, 2, 3]</span><br><span class="line">list_w.append(list_w)</span><br><span class="line"></span><br><span class="line">file_w = open(&apos;test.pkl&apos;, &apos;wb&apos;)</span><br><span class="line">pickle.dump(data_w, file_w)</span><br><span class="line"># Pickle the list using the highest protocol available.</span><br><span class="line">pickle.dump(list_w, file_w, -1)</span><br><span class="line">file_w.close()</span><br><span class="line"></span><br><span class="line">file_r = open(&apos;test.pkl&apos;, &apos;rb&apos;)</span><br><span class="line">data1 = pickle.load(file_r)</span><br><span class="line">pprint.pprint(data1)</span><br><span class="line">data2 = pickle.load(file_r)</span><br><span class="line">pprint.pprint(data2)</span><br><span class="line">file_r.close()</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;python 文件&lt;/p&gt;
    
    </summary>
    
      <category term="note" scheme="http://blog.master-ss.cn/categories/note/"/>
    
    
  </entry>
  
  <entry>
    <title>python 模块</title>
    <link href="http://blog.master-ss.cn/note/python/module/"/>
    <id>http://blog.master-ss.cn/note/python/module/</id>
    <published>2020-03-10T02:35:36.924Z</published>
    <updated>2020-03-10T02:54:27.584Z</updated>
    
    <content type="html"><![CDATA[<p>python 模块</p><a id="more"></a><h3 id="一、定义"><a href="#一、定义" class="headerlink" title="一、定义"></a>一、定义</h3><p>模块是一个包含所有你定义的函数和变量的文件，其后缀名是 .py。模块可以被别的程序引入，以使用该模块中的函数等功能。这也是使用 python 标准库的方法。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"># 文件名: using_sys.py</span><br><span class="line">import sys</span><br><span class="line"></span><br><span class="line">print(&apos;命令行参数如下:&apos;)</span><br><span class="line">for i in sys.argv:</span><br><span class="line">   print(i)</span><br><span class="line"></span><br><span class="line">print(&apos;\n\nPython 路径为：&apos;, sys.path, &apos;\n&apos;)</span><br></pre></td></tr></table></figure><ul><li>import sys 引入 python 标准库中的 sys.py 模块；这是引入某一模块的方法。</li><li>sys.argv 是一个包含命令行参数的列表。</li><li>sys.path 包含了一个 Python 解释器自动查找所需模块的路径的列表，其中第一项是当前目录。</li></ul><h3 id="二、import"><a href="#二、import" class="headerlink" title="二、import"></a>二、import</h3><p>想使用 Python 源文件，只需在另一个源文件里执行 import 语句。一个模块只会被导入一次，不管你执行了多少次 import。这样可以防止导入模块被一遍又一遍地执行。<br>编码时，import 顺序推荐为：标准库、第三方库包、自定义的包/模块。<br>在函数内部也可以 import 包，不过函数内部引用的包不能被函数外调用。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"># 语法，将整个模块导入</span><br><span class="line">import module1[, module2[,... moduleN]</span><br><span class="line"></span><br><span class="line"># from 语句让你从模块中导入指定的部分到当前命名空间中</span><br><span class="line">from modname import name1[, name2[, ... nameN]]</span><br><span class="line"></span><br><span class="line"># 指定别名</span><br><span class="line">from modname import name1 as rename</span><br><span class="line"></span><br><span class="line"># 把一个模块的所有内容全都导入到当前的命名空间，不推荐，不直观，直接调用模块方法会给用户带来困惑</span><br><span class="line">from modname import *</span><br></pre></td></tr></table></figure><h3 id="三、-name-属性"><a href="#三、-name-属性" class="headerlink" title="三、__name__属性"></a>三、<code>__name__</code>属性</h3><p>一个模块被另一个程序第一次引入时，其主程序将运行。如果我们想在模块被引入时，模块中的某一程序块不执行，我们可以用<code>__name__</code>属性来使该程序块仅在该模块自身运行时执行。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"># Filename: using_name.py</span><br><span class="line">if __name__ == &apos;__main__&apos;:</span><br><span class="line">   print(&apos;程序自身在运行&apos;)</span><br><span class="line">else:</span><br><span class="line">   print(&apos;我来自另一模块&apos;)</span><br><span class="line"></span><br><span class="line">python using_name.py # 程序自身在运行</span><br><span class="line">import using_name # 我来自另一模块</span><br></pre></td></tr></table></figure><p>每个模块都有一个<code>__name__</code>属性，当其值是<code>__name__</code>时，表明该模块自身在运行，否则是被引入。</p><h3 id="四、dir-函数"><a href="#四、dir-函数" class="headerlink" title="四、dir() 函数"></a>四、dir() 函数</h3><p>内置的函数 dir() 可以找到模块内定义的所有名称，以一个字符串列表的形式返回:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">import fibo</span><br><span class="line">dir(fibo) # [&apos;__name__&apos;, &apos;__file__&apos;, &apos;fib&apos;, &apos;fib2&apos;]，其中 __file__ 表示文件全路径</span><br><span class="line">fibo.__file__ # /Users/songsong.zhang/study/python-test/fibo.py</span><br><span class="line"></span><br><span class="line"># 如果没有给定参数，那么 dir() 函数会罗列出当前定义的所有名称:</span><br><span class="line">a = [1, 2, 3, 4, 5]</span><br><span class="line">import fibo</span><br><span class="line">fib = fibo.fib</span><br><span class="line">dir() # 得到一个当前模块中定义的属性列表，[&apos;__builtins__&apos;, &apos;__name__&apos;, &apos;a&apos;, &apos;fib&apos;, &apos;fibo&apos;, &apos;sys&apos;]</span><br><span class="line">a = 5 # 建立一个新的变量 &apos;a&apos;</span><br><span class="line">dir() # [&apos;__builtins__&apos;, &apos;__doc__&apos;, &apos;__name__&apos;, &apos;a&apos;, &apos;sys&apos;]</span><br><span class="line">del a # 删除变量名a</span><br><span class="line">dir() # [&apos;__builtins__&apos;, &apos;__doc__&apos;, &apos;__name__&apos;, &apos;sys&apos;]</span><br></pre></td></tr></table></figure><h3 id="五、package"><a href="#五、package" class="headerlink" title="五、package"></a>五、package</h3><ul><li>定义<br>包是一种管理 Python 模块命名空间的形式，采用”点模块名称”。比如一个模块的名称是 A.B，那么他表示一个包 A 中的子模块 B。采用点模块名称这种形式也不用担心不同库之间的模块重名的情况，这样不同的作者都可以提供 NumPy 模块，或者是 Python 图形库。</li><li>导入<br>在导入一个包的时候，依次从当前包、内置标准库、sys.path（环境变量）查找包中包含的子目录。目录只有包含一个叫做 <code>__init__.py</code> 的文件才会被认作是一个包，主要是为了避免一些滥俗的名字（比如叫做 string）不小心的影响搜索路径中的有效模块。<br>最简单的情况，放一个空的 <code>:file:__init__.py</code> 就可以了。当然这个文件中也可以包含一些初始化代码或者为 <code>__all__</code> 变量赋值。<br>导入语句遵循如下规则：如果包定义文件 <code>__init__.py</code> 存在一个叫做 <code>__all__</code> 的列表变量，那么在使用 from package import * 的时候就把这个列表中的所有名字作为包内容导入，如：</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># sounds/effects/__init__.py</span><br><span class="line">__all__ = [&quot;echo&quot;, &quot;surround&quot;, &quot;reverse&quot;] # 当你使用from sound.effects import * 这种用法时，你只会导入包里面这三个子模块</span><br></pre></td></tr></table></figure><p>如果 <code>__all__</code> 真的没有定义，那么使用 from sound.effects import * 这种语法的时候，就不会导入包 sound.effects 里的任何子模块。他只是把包 sound.effects 和它里面定义的所有内容导入进来（可能运行 <code>__init__.py</code> 里定义的初始化代码），并且他不会破坏掉我们在这句话之前导入的所有明确指定的模块，如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">import sound.effects.echo</span><br><span class="line">import sound.effects.surround</span><br><span class="line">from sound.effects import *</span><br></pre></td></tr></table></figure><p>在执行 from…import 前，包 sound.effects 中的 echo 和 surround 模块都被导入到当前的命名空间中了。（当然如果定义了 <code>__all__</code> 就更没问题了）。<br>通常我们并不主张使用 * 这种方法来导入模块，因为这种方法经常会导致代码的可读性降低。不过这样倒的确是可以省去不少敲键的功夫，而且一些模块都设计成了只能通过特定的方法导入。使用 from Package import specific_submodule 这种方法永远不会有错，这也是推荐的方法。<br>如果在结构中包是一个子包（比如这个例子中对于包 sound 来说），而你又想导入兄弟包（同级别的包）你就得使用导入绝对的路径来导入。比如，如果模块 sound.filters.vocoder 要使用包 sound.effects 中的模块 echo，你就要写成 from sound.effects import echo。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">from . import echo</span><br><span class="line">from .. import formats</span><br><span class="line">from ..filters import equalizer</span><br></pre></td></tr></table></figure><p>无论是隐式的还是显式的相对导入都是从当前模块开始的。主模块的名字永远是 <code>__main__</code>，一个 Python 应用程序的主模块，应当总是使用绝对路径引用。<br>包还提供一个额外的属性<code>__path__</code>。这是一个目录列表，里面每一个包含的目录都有为这个包服务的<code>__init__.py</code>，得在其他<code>__init__.py</code> 被执行前定义。可以修改这个变量，用来影响包含在包里面的模块和子包。<br>这个功能并不常用，一般用来扩展包里面的模块。</p><h3 id="五、标准模块"><a href="#五、标准模块" class="headerlink" title="五、标准模块"></a>五、标准模块</h3><p>Python 本身带着一些标准的模块库，有些模块直接被构建在解析器里，这些虽然不是一些语言内置的功能，但是他却能很高效的使用，甚至是系统级调用也没问题。这些组件会根据不同的操作系统进行不同形式的配置，比如 winreg 这个模块就只会提供给 Windows 系统。</p><h4 id="5-1、OS"><a href="#5-1、OS" class="headerlink" title="5.1、OS"></a>5.1、OS</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">os.environ          # 包含环境变量的映射</span><br><span class="line">os.sep              # / ，路径中使用的分隔符</span><br><span class="line">os.pathsep          # : ，分割不同路径的分隔符</span><br><span class="line">os.linesep          # \n，行分隔符</span><br><span class="line"></span><br><span class="line">os.urandom(n)       # b&apos;H\x8b\xa9&apos;，返回 n 个字节的强加密随机数据</span><br><span class="line">os.getcwd()         # 返回当前所在的目录</span><br><span class="line">os.chdir(&apos;/Users&apos;)  # /Users，修改当前所在目录</span><br><span class="line">os.listdir()        # [&apos;Shared&apos;, &apos;songsong.zhang&apos;]，返回当前目录下所有目录与文件</span><br><span class="line">os.mkdir(&apos;hello&apos;)   # 文件夹创建，如果文件夹已存在则报错</span><br><span class="line">or.rmdir(&apos;w&apos;)       # 删除文件夹，如果已经不存在则报错</span><br><span class="line">os.rename(&apos;h&apos;, &apos;w&apos;) # 重命名，h 改为 w</span><br><span class="line">d = &apos;/Users/songsong.zhang/Desktop/a/c&apos;</span><br><span class="line">os.makedirs(d)      # 创建多层目录</span><br><span class="line"></span><br><span class="line">os.path.exists(&apos;y&apos;) # 判断是否存在</span><br><span class="line">os.path.isdir(&apos;py&apos;) # 判断是否是文件夹</span><br><span class="line">os.path.isfile(&apos;py&apos;)# 判断是否是文件</span><br><span class="line">f = &apos;/Users/songsong.zhang/Desktop/event-loop.jpg&apos;</span><br><span class="line">os.path.dirname(f)  # 返回文件的目录路径，&apos;/Users/songsong.zhang/Desktop&apos;</span><br><span class="line">os.path.split(f)    # 返回元组，第一个是目录路径，第二个是文件名，(&apos;/Users/songsong.zhang/Desktop&apos;, &apos;event-loop.jpg&apos;)</span><br><span class="line">os.path.basename(f) # 返回文件名称，&apos;event-loop.jpg&apos;</span><br><span class="line">os.path.splitext(f) # 返回元组获取文件后缀名，(&apos;/Users/songsong.zhang/Desktop/event-loop&apos;, &apos;.jpg&apos;)</span><br><span class="line">os.path.join(&apos;/User&apos;, &apos;a&apos;, &apos;b&apos;, &apos;c&apos;) # 返回组合路径，&apos;/User/a/b/c&apos;</span><br></pre></td></tr></table></figure><p>PS：其他常用函数/变量</p><ul><li>platform.system()：判断平台，分别返回 ‘Linux’, ‘Darwin’, ‘Java’, ‘Windows’</li><li>sys.argv：命令行参数，包括脚本名</li></ul><h4 id="5-2、DateTime-模块"><a href="#5-2、DateTime-模块" class="headerlink" title="5.2、DateTime 模块"></a>5.2、DateTime 模块</h4><ul><li><p>DateTime 模块转换参数表</p><ul><li>%A：星期的名称，如 Monday</li><li>%B：月份名：如 January</li><li>%m：用数字表示的月份（01-12）</li><li>%d：用数字表示月份中的一天（01-31）</li><li>%Y：四位的年份，如 2015</li><li>%y：两位的年份，如 15</li><li>%H：24 小时制的小时数（00-23）</li><li>%l：12 小时制的小时数（01-12）</li><li>%p：am 或 pm</li><li>%M：分钟数（00-59）</li><li>%S：秒数（00-59）</li></ul></li><li><p>常见函数/变量</p></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line">from datetime import datetime, date, time as time2, timedelta</span><br><span class="line">import time</span><br><span class="line"></span><br><span class="line"># datetime.now 返回系统的当前时间</span><br><span class="line">now_time = datetime.now()</span><br><span class="line"></span><br><span class="line"># 基本同 datetime.now（如果 now 的可选参数 tz 时区为 None 或未指定的话）</span><br><span class="line">print(datetime.today())</span><br><span class="line">print(now_time)</span><br><span class="line">print(now_time.date()) # 获取日期</span><br><span class="line">print(now_time.time()) # 获取时间</span><br><span class="line">print(now_time.year, now_time.month, now_time.day) # 打印年、月、日属性</span><br><span class="line">print(now_time.hour, now_time.minute, now_time.second, now_time.microsecond) # 打印时、分、秒、毫秒属性</span><br><span class="line"></span><br><span class="line"># 获取从格林威治时间到现在的毫秒数</span><br><span class="line">print(time.time())</span><br><span class="line"></span><br><span class="line"># 自定义日期与事件</span><br><span class="line">d = datetime(2020, 10, 30, 14, 5)</span><br><span class="line">print(d)</span><br><span class="line">d2 = date(2019, 2, 23)</span><br><span class="line">print(d2)</span><br><span class="line">t = time2(9, 2, 13)</span><br><span class="line">print(t)</span><br><span class="line"></span><br><span class="line"># 字符串转 datetime 对象</span><br><span class="line">ds = &apos;2018-10-3 13:42:09&apos;</span><br><span class="line">ds_t = datetime.strptime(ds, &apos;%Y-%m-%d %H:%M:%S&apos;)</span><br><span class="line">print(ds_t)</span><br><span class="line">ds2 = &apos;2018/10/3T13:42:09&apos;</span><br><span class="line">ds_t2 = datetime.strptime(ds2, &apos;%Y/%m/%dT%H:%M:%S&apos;)</span><br><span class="line">print(ds_t2)</span><br><span class="line"></span><br><span class="line"># datetime 对象转字符串</span><br><span class="line">n = datetime.now()</span><br><span class="line">n_str = n.strftime(&apos;%Y/%m/%dT%H:%M:%S&apos;)</span><br><span class="line">print(n_str)</span><br><span class="line"></span><br><span class="line"># datetime 之间的加操作</span><br><span class="line">n = datetime.now()</span><br><span class="line">n_next = n + timedelta(days=5, hours=42)</span><br><span class="line">print(n_next)</span><br><span class="line"></span><br><span class="line"># datetime 之间的减操作</span><br><span class="line">d1 = datetime(2018, 10, 15)</span><br><span class="line">d2 = datetime(2018, 11, 13)</span><br><span class="line">rest = d2 - d1</span><br><span class="line">print(type(rest)) # &lt;class &apos;datetime.timedelta&apos;&gt;</span><br><span class="line">print(rest.days) # 29</span><br></pre></td></tr></table></figure><h3 id="六、第三方模块"><a href="#六、第三方模块" class="headerlink" title="六、第三方模块"></a>六、第三方模块</h3><ul><li>安装网站：<a href="https://pypi.org" target="_blank" rel="noopener">https://pypi.org</a></li><li>安装方法<ul><li>pip install Django</li><li>python setup.py install</li></ul></li></ul><h3 id="七、虚拟环境"><a href="#七、虚拟环境" class="headerlink" title="七、虚拟环境"></a>七、虚拟环境</h3><ul><li><p>定义</p><ul><li>建立在宿主环境上的独立容器</li><li>具备和宿主环境相同的功能</li><li>快速创建和删除、方便管理</li></ul></li><li><p>优点</p><ul><li>独立：相互隔离、互不影响</li><li>纯净：只有我一个项目用的包和依赖，好管理</li><li>方便：摒弃频繁安装/卸载包和依赖</li></ul></li><li><p>virtualenv</p></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"># 创建虚拟环境</span><br><span class="line">pip3 install virtualenv</span><br><span class="line">virtualenv .pyenv</span><br><span class="line"></span><br><span class="line"># active 后，在虚拟环境中进行安装</span><br><span class="line">source ~/.pyenv/bin/activate</span><br><span class="line">pip install xxx</span><br><span class="line"></span><br><span class="line"># deactivate 退出虚拟环境</span><br><span class="line">deactivate</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;python 模块&lt;/p&gt;
    
    </summary>
    
      <category term="note" scheme="http://blog.master-ss.cn/categories/note/"/>
    
    
  </entry>
  
  <entry>
    <title>python 函数介绍</title>
    <link href="http://blog.master-ss.cn/note/python/function/"/>
    <id>http://blog.master-ss.cn/note/python/function/</id>
    <published>2020-03-10T02:24:24.435Z</published>
    <updated>2020-03-10T02:28:10.815Z</updated>
    
    <content type="html"><![CDATA[<p>python 函数介绍</p><a id="more"></a><h3 id="二、内置函数"><a href="#二、内置函数" class="headerlink" title="二、内置函数"></a>二、内置函数</h3><ul><li>range(start, stop[, step])，用于表示数字序列，内容不可变</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># [0, 1, 2, 3, 4]，等价于 range(0, 5)</span><br><span class="line">range(5)</span><br><span class="line"></span><br><span class="line"># [0, 5, 10, 15, 20, 25]</span><br><span class="line">range(0, 30, 5)  # 步长为 5</span><br></pre></td></tr></table></figure><h3 id="一、函数定义"><a href="#一、函数定义" class="headerlink" title="一、函数定义"></a>一、函数定义</h3><ul><li>函数代码块以 def 关键词开头，后接函数标识符名称和圆括号 ()</li><li>任何传入参数和自变量必须放在圆括号中间，圆括号之间可以用于定义参数</li><li>函数的第一行语句可以选择性地使用文档字符串—用于存放函数说明</li><li>函数内容以冒号起始，并且缩进</li><li>return [表达式] 结束函数，选择性地返回一个值给调用方。不带表达式的 return 相当于返回 None</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">def 函数名（参数列表）:</span><br><span class="line">    函数体</span><br></pre></td></tr></table></figure><h3 id="二、可更改-mutable-与不可更改-immutable-对象"><a href="#二、可更改-mutable-与不可更改-immutable-对象" class="headerlink" title="二、可更改(mutable)与不可更改(immutable)对象"></a>二、可更改(mutable)与不可更改(immutable)对象</h3><ul><li>不可变类型：变量赋值 a=5 后再赋值 a=10，这里实际是新生成一个 int 值对象 10，再让 a 指向它，而 5 被丢弃，不是改变 a 的值，相当于新生成了 a</li><li>可变类型：变量赋值 la=[1,2,3,4] 后再赋值 la[2]=5 则是将 list la 的第三个元素值更改，本身 la 没有动，只是其内部的一部分值被修改了</li></ul><p>python 函数的参数传递：</p><ul><li>不可变类型：类似 c++ 的值传递，如 整数、字符串、元组。如 fun（a），传递的只是 a 的值，没有影响 a 对象本身。比如在 fun（a）内部修改 a 的值，只是修改另一个复制的对象，不会影响 a 本身</li><li>可变类型：类似 c++ 的引用传递，如 列表、字典、集合。如 fun（la），则是将 la 真正的传过去，修改后 fun 外部的 la 也会受影响</li></ul><p>python 中一切都是对象，严格意义我们不能说值传递还是引用传递，我们应该说传不可变对象和传可变对象</p><h3 id="三、函数参数"><a href="#三、函数参数" class="headerlink" title="三、函数参数"></a>三、函数参数</h3><ul><li>必需参数</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">#可写函数说明</span><br><span class="line">def printme( str ):</span><br><span class="line">   &quot;打印任何传入的字符串&quot;</span><br><span class="line">   print (str)</span><br><span class="line">   return</span><br><span class="line"></span><br><span class="line"># 调用 printme 函数，不加参数会报错</span><br><span class="line">printme()</span><br></pre></td></tr></table></figure><ul><li>关键字参数<br>使用关键字参数允许函数调用时参数的顺序与声明时不一致，因为 Python 解释器能够用参数名匹配参数值</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">#可写函数说明</span><br><span class="line">def printinfo( name, age ):</span><br><span class="line">   &quot;打印任何传入的字符串&quot;</span><br><span class="line">   print (&quot;名字: &quot;, name)</span><br><span class="line">   print (&quot;年龄: &quot;, age)</span><br><span class="line">   return</span><br><span class="line"></span><br><span class="line">#调用printinfo函数</span><br><span class="line">printinfo( age=50, name=&quot;runoob&quot; )</span><br></pre></td></tr></table></figure><ul><li>默认参数</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">def printinfo( name, age = 35 ):</span><br><span class="line">   &quot;打印任何传入的字符串&quot;</span><br><span class="line">   print (&quot;名字: &quot;, name, &quot; 年龄: &quot;, age)</span><br><span class="line">   return</span><br><span class="line"></span><br><span class="line">#调用printinfo函数</span><br><span class="line">printinfo( age=50, name=&quot;runoob&quot; ) # 名字:  runoob  年龄:  50</span><br><span class="line">printinfo( name=&quot;runoob&quot; ) # 名字:  runoob  年龄:  35</span><br></pre></td></tr></table></figure><ul><li>不定长参数<br>可能需要一个函数能处理比当初声明时更多的参数，这些参数叫做不定长参数</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"># 定义</span><br><span class="line">def functionname([formal_args,] *var_args_tuple ):</span><br><span class="line">   &quot;函数_文档字符串&quot;</span><br><span class="line">   function_suite</span><br><span class="line">   return [expression]</span><br><span class="line"></span><br><span class="line"># 实例1（加了星号 * 的参数会以元组(tuple)的形式导入，存放所有未命名的变量参数）</span><br><span class="line">def printinfo( arg1, *vartuple ):</span><br><span class="line">   &quot;打印任何传入的参数&quot;</span><br><span class="line">   print (arg1, vartuple)</span><br><span class="line"># 调用printinfo 函数</span><br><span class="line">printinfo( 70, 60, 50 ) # 70 (60, 50)</span><br><span class="line"></span><br><span class="line"># 实例2（* 解包传入列表）</span><br><span class="line">a = [1, 2, 3]</span><br><span class="line">def func(a, b, c):</span><br><span class="line">    print(a, b, c)</span><br><span class="line">func(*a) # 1 2 3</span><br><span class="line"></span><br><span class="line"># 实例3（加了两个星号 ** 的参数会以字典的形式导入）</span><br><span class="line">def printinfo( arg1, **vardict ):</span><br><span class="line">   &quot;打印任何传入的参数&quot;</span><br><span class="line">   print (arg1, vardict)</span><br><span class="line"># 调用printinfo 函数</span><br><span class="line">printinfo(1, a=2,b=3) # 1 &#123;&apos;a&apos;: 2, &apos;b&apos;: 3&#125;</span><br><span class="line"></span><br><span class="line"># 实例4（* 解包传入字典）</span><br><span class="line">a = &#123;&apos;a&apos;: 1, &apos;b&apos;: 2, &apos;c&apos;: 3&#125;</span><br><span class="line">def func(a, b, c):</span><br><span class="line">    print(a, b, c)</span><br><span class="line">func(*a)  # a b c</span><br><span class="line"></span><br><span class="line"># 实例5（** 解包传入字段）</span><br><span class="line">a = &#123;&apos;a&apos;: 1, &apos;b&apos;: 2, &apos;c&apos;: 3&#125;</span><br><span class="line">def func(a, b, c):</span><br><span class="line">    print(a, b, c)</span><br><span class="line">func(**a)  # 1 2 3</span><br><span class="line"></span><br><span class="line"># 实例6（声明函数时，参数中星号 * 可以单独出现，星号 * 后的参数必须用关键字传入）</span><br><span class="line">def f(a,b,*,c):</span><br><span class="line">    return a+b+c</span><br><span class="line">f(1,2,3)   # 报错</span><br><span class="line">f(1,2,c=3) # 正常</span><br><span class="line"></span><br><span class="line"># * 和 ** 在表达式中应用</span><br><span class="line">*range(5), 6, 7, 8 # (0, 1, 2, 3, 4, 6, 7, 8)</span><br><span class="line">[*range(5), 6, 7, 8] # [0, 1, 2, 3, 4, 6, 7, 8]</span><br><span class="line">&#123;*range(3), 4, 5&#125; # &#123;0, 1, 2, 4, 5&#125;</span><br><span class="line">a = &#123;&apos;a&apos;: 1, &apos;b&apos;: 2, &apos;c&apos;: 3&#125;</span><br><span class="line">b = &#123;&apos;d&apos;: 4, &apos;e&apos;: 5, &apos;f&apos;: 6&#125;</span><br><span class="line">&#123;**a, **b&#125; # &#123;&apos;a&apos;: 1, &apos;b&apos;: 2, &apos;c&apos;: 3, &apos;d&apos;: 4, &apos;e&apos;: 5, &apos;f&apos;: 6&#125;</span><br></pre></td></tr></table></figure><h3 id="四、匿名函数"><a href="#四、匿名函数" class="headerlink" title="四、匿名函数"></a>四、匿名函数</h3><p>python 使用 lambda 来创建匿名函数。所谓匿名，意即不再使用 def 语句这样标准的形式定义一个函数：</p><ul><li>lambda 只是一个表达式，函数体比 def 简单很多</li><li>lambda 的主体是一个表达式，而不是一个代码块。仅仅能在 lambda 表达式中封装有限的逻辑进去</li><li>lambda 函数拥有自己的命名空间，且不能访问自己参数列表之外或全局命名空间里的参数</li><li>虽然 lambda 函数看起来只能写一行，却不等同于 C 或 C++的内联函数，后者的目的是调用小函数时不占用栈内存从而增加运行效率</li><li>语法：lambda [arg1 [,arg2,…..argn]]:expression</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">sum = lambda arg1, arg2: arg1 + arg2</span><br><span class="line"># 调用sum函数</span><br><span class="line">print (&quot;相加后的值为 : &quot;, sum( 10, 20 )) # 30</span><br><span class="line">print (&quot;相加后的值为 : &quot;, sum( 20, 20 )) # 40</span><br></pre></td></tr></table></figure><h3 id="五、return-语句"><a href="#五、return-语句" class="headerlink" title="五、return 语句"></a>五、return 语句</h3><p>用于退出函数，选择性地向调用方返回一个表达式。不带参数值的 return 语句返回 None。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">def sum( arg1, arg2 ):</span><br><span class="line">   total = arg1 + arg2</span><br><span class="line">   print (&quot;函数内 : &quot;, total) # 30</span><br><span class="line">   return total</span><br><span class="line">total = sum( 10, 20 )</span><br><span class="line">print (&quot;函数外 : &quot;, total) # 30</span><br></pre></td></tr></table></figure><h3 id="六、filter-函数"><a href="#六、filter-函数" class="headerlink" title="六、filter 函数"></a>六、filter 函数</h3><p>返回一个 filter 对象，其中包括对其执行函数时为真的所有元素</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"># 语法</span><br><span class="line">filter(func, seq)</span><br><span class="line"></span><br><span class="line"># 实例</span><br><span class="line">l = range(0, 10)</span><br><span class="line">res = filter(lambda item: item % 2 != 0, l)</span><br><span class="line">print(list(res)) # [1, 3, 5, 7, 9]</span><br></pre></td></tr></table></figure><h3 id="七、map-函数"><a href="#七、map-函数" class="headerlink" title="七、map 函数"></a>七、map 函数</h3><p>创建一个列表，其中包含对指定序列包含的项执行指定函数返回的值</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"># 语法</span><br><span class="line">map(func, seq)</span><br><span class="line"></span><br><span class="line"># 实例</span><br><span class="line">l = range(0, 10)</span><br><span class="line">res = map(lambda item: item * 2, l)</span><br><span class="line">print(list(res)) # [0, 2, 4, 6, 8, 10, 12, 14, 16, 18]</span><br></pre></td></tr></table></figure><h3 id="八、reduce-函数"><a href="#八、reduce-函数" class="headerlink" title="八、reduce 函数"></a>八、reduce 函数</h3><p>使用指定的函数将序列的前两个元素合二为一，再将结果与第三个元素合二为一，依次类推，直到处理完整个序列并得到一个结果</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"># 语法</span><br><span class="line">reduce(func, seq[, initial])</span><br><span class="line"></span><br><span class="line"># 实例</span><br><span class="line">from functools import reduce # python3 中 reduce 函数被取消了，放入到了 functools 模块中</span><br><span class="line">l = range(0, 10)</span><br><span class="line">res = reduce(lambda prev, item: prev + item, l)</span><br><span class="line">print(res)  # 45</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;python 函数介绍&lt;/p&gt;
    
    </summary>
    
      <category term="note" scheme="http://blog.master-ss.cn/categories/note/"/>
    
    
  </entry>
  
  <entry>
    <title>python 数据类型</title>
    <link href="http://blog.master-ss.cn/note/python/type/"/>
    <id>http://blog.master-ss.cn/note/python/type/</id>
    <published>2020-03-10T01:04:59.237Z</published>
    <updated>2020-03-14T01:21:56.800Z</updated>
    
    <content type="html"><![CDATA[<p>python 数据类型</p><a id="more"></a><h3 id="一、基本数据类型"><a href="#一、基本数据类型" class="headerlink" title="一、基本数据类型"></a>一、基本数据类型</h3><ul><li>Python 中的变量不需要声明。每个变量在使用前都必须赋值，变量赋值以后该变量才会被创建</li><li>在 Python 中，变量就是变量，它没有类型，我们所说的”类型”是变量所指的内存中对象的类型</li><li>等号（=）用来给变量赋值</li><li>等号（=）运算符左边是一个变量名,等号（=）运算符右边是存储在变量中的值</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># 允许同时为多个变量赋值</span><br><span class="line">a = b = c = 1</span><br><span class="line"></span><br><span class="line"># 可以为多个对象指定多个变量</span><br><span class="line">a, b, c = 1, 2, &quot;runoob&quot;</span><br></pre></td></tr></table></figure><ul><li>标准数据类型<ul><li>六个标准的数据类型<ul><li>Number</li><li>String</li><li>List</li><li>Dictionary</li><li>Tuple</li><li>Set</li></ul></li><li>是否可变<ul><li>不可变数据：Number（数字）、String（字符串）、Tuple（元组）</li><li>可变数据：List（列表）、Dictionary（字典）、Set（集合）</li></ul></li></ul></li></ul><h3 id="二、Number"><a href="#二、Number" class="headerlink" title="二、Number"></a>二、Number</h3><ul><li>整数(int)</li><li>浮点型(float)</li><li>布尔型(bool)，值是 1（True） 和 0（False），它们可以和数字相加</li><li>复数(complex)，复数是一个数学概念，包含实部和虚部，如 1 + 2j、 1.1 + 2.2j，其中 1、1.1 为实部，2、2.2 为虚部</li><li>常用函数<ul><li>abs 绝对值</li><li>max(x1, x2,…)</li><li>min(x1, x2,…)</li><li>pow(x, y)</li><li>round(x, [n]) 返回浮点数 x 的四舍五入值，如给出 n 值，则代表舍入到小数点后的位数</li><li>sqrt(x) 数字 x 的平方根</li></ul></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">a, b, c, d = 20, 5.5, True, 4+3j</span><br><span class="line"># &lt;class &apos;int&apos;&gt; &lt;class &apos;float&apos;&gt; &lt;class &apos;bool&apos;&gt; &lt;class &apos;complex&apos;&gt;</span><br><span class="line">print(type(a), type(b), type(c), type(d))</span><br><span class="line"></span><br><span class="line">a = 111</span><br><span class="line">isinstance(a, int)</span><br><span class="line"></span><br><span class="line"># isinstance 和 type 的区别：type() 不会认为子类是一种父类类型；isinstance() 会认为子类是一种父类类型</span><br><span class="line">class A:</span><br><span class="line">    pass</span><br><span class="line"></span><br><span class="line">class B(A):</span><br><span class="line">    pass</span><br><span class="line"></span><br><span class="line">isinstance(A(), A)  # True</span><br><span class="line">type(A()) == A  # True</span><br><span class="line">isinstance(B(), A)  # True</span><br><span class="line">type(B()) == A  # False</span><br><span class="line"></span><br><span class="line"># 1234.57 str</span><br><span class="line">format(1234.567, &apos;0.2f&apos;)</span><br><span class="line"></span><br><span class="line"># 1,234.567 str</span><br><span class="line">format(1234.567, &apos;,&apos;)</span><br><span class="line"></span><br><span class="line"># 123,456,789.00 str</span><br><span class="line">format(123456789, &apos;0,.2f&apos;)</span><br><span class="line"></span><br><span class="line"># 请您向8810381账户转账￥12,334.100 如遇格式化输出数字，则在 &#123;&#125; 增加 : 前缀，之后写上数字格式化语句</span><br><span class="line">&apos;请您向&#123;&#125;账户转账￥&#123;:0,.3f&#125;&apos;.format(&apos;8810381&apos;, 12334.1)</span><br></pre></td></tr></table></figure><h3 id="三、String"><a href="#三、String" class="headerlink" title="三、String"></a>三、String</h3><ul><li>拼接</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># MF123</span><br><span class="line">&apos;MF&apos; + &apos;123&apos;</span><br><span class="line">&apos;MF&apos; + str(123)</span><br></pre></td></tr></table></figure><ul><li>反斜杠</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"># 使用反斜杠(\)转义特殊字符</span><br><span class="line">print(&apos;Ru\noob&apos;)</span><br><span class="line"># Ru</span><br><span class="line"># oob</span><br><span class="line"></span><br><span class="line"># 如果不想让反斜杠发生转义，可以在字符串前面添加一个 r，表示原始字符串</span><br><span class="line">print(r&apos;Ru\noob&apos;)</span><br><span class="line"># Ru\noob</span><br><span class="line"></span><br><span class="line"># 反斜杠(\)可以作为续行符，表示下一行是上一行的延续。也可以使用 &quot;&quot;&quot;...&quot;&quot;&quot; 或者 &apos;&apos;&apos;...&apos;&apos;&apos; 跨越多行</span><br></pre></td></tr></table></figure><ul><li><p>大小写转换</p><ul><li>str.lower() 转换为小写</li><li>str.upper() 转换为大写</li><li>str.capitalize() 字符串首字母大写</li><li>str.title() 每个单词首字母大写</li><li>str.swapcase() 大小写互换</li></ul></li><li><p>格式化</p></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"># I love you</span><br><span class="line">&apos;&#123;&#125; &#123;&#125; you&apos;.format(&apos;I&apos;, &apos;love&apos;)</span><br><span class="line"></span><br><span class="line"># www.imooc.com</span><br><span class="line">&apos;&#123;2&#125;.&#123;1&#125;.&#123;0&#125;&apos;.format(&apos;com&apos;, &apos;imooc&apos;, &apos;www&apos;)</span><br><span class="line"></span><br><span class="line"># 我叫小明,我在3-2</span><br><span class="line">print(&apos;我叫&#123;p1&#125;,我在&#123;p2&#125;&apos;.format(p1=&apos;小明&apos;, p2=&apos;3-2&apos;))</span><br><span class="line"></span><br><span class="line"># 在 : 后传入一个整数, 可以保证该域至少有这么多的宽度，用于美化表格时很有用</span><br><span class="line">table = &#123;&apos;Google&apos;: 1, &apos;Runoob&apos;: 2, &apos;Taobao&apos;: 3&#125;</span><br><span class="line">for name, number in table.items():</span><br><span class="line">    print(&apos;&#123;0:10&#125; ==&gt; &#123;1:10&#125;&apos;.format(name, number))</span><br><span class="line"># Google     ==&gt;          1</span><br><span class="line"># Runoob     ==&gt;          2</span><br><span class="line"># Taobao     ==&gt;          3</span><br><span class="line"></span><br><span class="line"># 字典输出格式化</span><br><span class="line">table = &#123;&apos;Google&apos;: 1, &apos;Runoob&apos;: 2, &apos;Taobao&apos;: 3&#125;</span><br><span class="line">print(&apos;Runoob: &#123;Runoob:d&#125;; Google: &#123;Google:d&#125;; Taobao: &#123;Taobao:d&#125;&apos;.format(**table))</span><br></pre></td></tr></table></figure><ul><li>早期的格式化输出<br>早期的字符串格式化使用 %s、%d、%f 来格式化字符串</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># 我叫ben,今年25岁,体重70.30公斤</span><br><span class="line">&apos;我叫%s,今年%d岁,体重%.2f公斤&apos;%(&apos;ben&apos;, 25, 70.3)</span><br></pre></td></tr></table></figure><ul><li>截取，语法：变量[头下标:尾下标:步长]</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">mystr = &apos;Runoob&apos;</span><br><span class="line"></span><br><span class="line"># 输出字符串第一个字符，R</span><br><span class="line">print(mystr[0])</span><br><span class="line"></span><br><span class="line"># 输出从第三个开始到第五个的字符，noo</span><br><span class="line">print(mystr[2:5])</span><br><span class="line"></span><br><span class="line"># 输出第一个到倒数第二个的字符，步长为 2，Rno</span><br><span class="line">print(mystr[0:-1:2])</span><br><span class="line"></span><br><span class="line"># 输出第三个到最后一个，noob</span><br><span class="line">print(mystr[2:])</span><br><span class="line"></span><br><span class="line"># 输出字符串两次，也可以写成 print(2 * str)，RunoobRunoob</span><br><span class="line">print(mystr * 2)</span><br><span class="line"></span><br><span class="line"># Python 字符串不能被改变。向一个索引位置赋值，比如 mystr[0] = &apos;m&apos;会导致错误</span><br></pre></td></tr></table></figure><ul><li>str.find(目标串, [开始位置], [结束位置])</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"># 9</span><br><span class="line">&apos;Nice to meet you&apos;.find(&apos;ee&apos;)</span><br><span class="line"></span><br><span class="line"># 21</span><br><span class="line">&apos;Nice to meet you, i need you help!&apos;.find(&apos;ee&apos;, 17)</span><br><span class="line"></span><br><span class="line"># -1</span><br><span class="line">&apos;Nice to meet you, i need you help!&apos;.find(&apos;ee&apos;, 17, 22)</span><br></pre></td></tr></table></figure><ul><li><p>rfind<br>类似于 find，只不过是从右面开始查找，返回的是第一个字符的索引，如果查询不到同样返回 -1</p></li><li><p>index<br>跟 find() 方法一样，只不过如果 str 不在 mystr 中会报错，会报一个异常</p></li><li><p>rindex<br>类似 index，只不过是从右面开始查找，返回的是开始查询的索引，如果查询不到则报错</p></li><li><p>str.count(mystr, start=0, end=len(str))<br>返回 mystr 在 start 和 end 之间在 mystr 中出现的次数；如果找到需要的数据，返回出现的次数，如果没有找到，则返回 0</p></li><li><p>endswith(suffix, beg=0, end=len(string))<br>检查字符串是否以 obj 结束，如果 beg 或者 end 指定则检查指定的范围内是否以 obj 结束，如果是，返回 True,否则返回 False</p></li><li><p>startswith(substr, beg=0,end=len(string))<br>检查字符串是否是以指定子字符串 substr 开头，是则返回 True，否则返回 False。如果 beg 和 end 指定值，则在指定范围内检查</p></li><li><p>.isalpha()<br>如果字符串只包含字母则返回 True 否则返回 False</p></li><li><p>isdigit()<br>如果字符串只包含数字则返回 True 否则返回 False</p></li><li><p>isnumeric()<br>如果字符串中只包含数字字符，则返回 True，否则返回 False</p></li><li><p>split(str=””, num=string.count(str))</p></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">str = &quot;this is string example....wow!!!&quot;</span><br><span class="line"># [&apos;this&apos;, &apos;is&apos;, &apos;string&apos;, &apos;example....wow!!!&apos;]</span><br><span class="line">print (str.split( ))       # 以空格为分隔符</span><br><span class="line"></span><br><span class="line"># [&apos;th&apos;, &apos;s is string example....wow!!!&apos;]</span><br><span class="line">print (str.split(&apos;i&apos;,1))   # 以 i 为分隔符，num 为分割次数，默认为 -1, 即分隔所有</span><br><span class="line"></span><br><span class="line"># [&apos;this is string example....&apos;, &apos;o&apos;, &apos;!!!&apos;]</span><br><span class="line">print (str.split(&apos;w&apos;))     # 以 w 为分隔符</span><br></pre></td></tr></table></figure><ul><li>join(seq)<br>以指定字符串作为分隔符，将 seq 中所有的元素(的字符串表示)合并为一个新的字符串</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># r,u,n,o,o,b</span><br><span class="line">&apos;,&apos;.join([&quot;r&quot;, &quot;u&quot;, &quot;n&quot;, &quot;o&quot;, &quot;o&quot;, &quot;b&quot;])</span><br></pre></td></tr></table></figure><ul><li>in</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># True</span><br><span class="line">&apos;ee&apos; in &apos;Nice to meet you&apos;</span><br></pre></td></tr></table></figure><ul><li>str.replace(原始串, 目标串, [替换次数])</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># aaaddbccc</span><br><span class="line">&apos;aaabbbccc&apos;.replace(&apos;b&apos;, &apos;d&apos;, 2)</span><br><span class="line"></span><br><span class="line"># aaadddccc</span><br><span class="line">&apos;aaabbbccc&apos;.replace(&apos;b&apos;, &apos;d&apos;)</span><br></pre></td></tr></table></figure><ul><li>删除空白<ul><li>str.lstrip() 删除左侧空白</li><li>str.rstrip() 删除右侧空白</li><li>str.strip() 删除两端空白</li></ul></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># Marry</span><br><span class="line">&apos;    Marry    &apos;.strip(&apos; &apos;)</span><br><span class="line">&apos;####Marry####&apos;.strip(&apos;#&apos;)</span><br></pre></td></tr></table></figure><ul><li>字符长度 len(str)</li><li>行分割，返回一个包含各个元素的列表<ul><li>mystr.splitlines()</li></ul></li></ul><h3 id="四、列表-List"><a href="#四、列表-List" class="headerlink" title="四、列表 List"></a>四、列表 List</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br></pre></td><td class="code"><pre><span class="line"># 创建</span><br><span class="line">list1 = [&apos;Google&apos;, &apos;Runoob&apos;, 1997, 2000]</span><br><span class="line">list2 = [12, 3, 14]</span><br><span class="line"></span><br><span class="line"># 访问 [&apos;Runoob&apos;, 2000]</span><br><span class="line">list1[1:4:2]</span><br><span class="line"></span><br><span class="line"># 列表截取</span><br><span class="line">inputWords = &apos;I like runoob&apos;.split(&quot; &quot;)</span><br><span class="line">inputWords=inputWords[-1::-1] # 三个参数分别为：最后一个元素；移动到列表末尾；逆向</span><br><span class="line">&apos; &apos;.join(inputWords) # runoob like I</span><br><span class="line"></span><br><span class="line"># [&apos;Google&apos;, &apos;Runoob&apos;, 2001, 2000]</span><br><span class="line">list1[2] = 2001</span><br><span class="line"></span><br><span class="line"># [&apos;Google&apos;, &apos;Runoob&apos;, 2000]</span><br><span class="line">del list1[2]</span><br><span class="line"></span><br><span class="line"># 3</span><br><span class="line">len(list1)</span><br><span class="line"></span><br><span class="line"># [1, 2, 3, 4, 5, 6]</span><br><span class="line">[1, 2, 3] + [4, 5, 6]</span><br><span class="line"></span><br><span class="line"># [&apos;Hi!&apos;, &apos;Hi!&apos;, &apos;Hi!&apos;, &apos;Hi!&apos;]</span><br><span class="line">[&apos;Hi!&apos;] * 4</span><br><span class="line"></span><br><span class="line"># True</span><br><span class="line">3 in [1, 2, 3]</span><br><span class="line"></span><br><span class="line"># 1 2 3</span><br><span class="line">for x in [1, 2, 3]: print(x, end=&quot; &quot;)</span><br><span class="line"></span><br><span class="line"># 14</span><br><span class="line">max(list2)</span><br><span class="line"></span><br><span class="line"># 3</span><br><span class="line">min(list2)</span><br><span class="line"></span><br><span class="line"># 将元组转换为列表</span><br><span class="line">list(seq)</span><br><span class="line"></span><br><span class="line"># 在列表末尾添加新的对象 [12, 3, 14, 13]</span><br><span class="line">list2.append(13)</span><br><span class="line"></span><br><span class="line"># 统计某个元素在列表中出现的次数 1</span><br><span class="line">list2.count(3)</span><br><span class="line"></span><br><span class="line"># 在列表末尾一次性追加另一个序列中的多个值（用新列表扩展原来的列表），可以是列表、元组、集合、字典</span><br><span class="line">list.extend(seq)</span><br><span class="line"></span><br><span class="line"># 从列表中找出某个值第一个匹配项的索引位置</span><br><span class="line">list.index(obj)</span><br><span class="line"></span><br><span class="line"># 将对象插入列表</span><br><span class="line">list.insert(index, obj)</span><br><span class="line"></span><br><span class="line"># 移除列表中的一个元素（默认最后一个元素），并且返回该元素的值</span><br><span class="line">list.pop([index=-1])</span><br><span class="line"></span><br><span class="line"># 移除列表中某个值的第一个匹配项</span><br><span class="line">list.remove(obj)</span><br><span class="line"></span><br><span class="line"># 反向列表中元素</span><br><span class="line">list.reverse()</span><br><span class="line"></span><br><span class="line"># 对原列表进行排序，key 指定可迭代对象中的一个元素来进行排序</span><br><span class="line">list.sort( key=None, reverse=False)</span><br><span class="line"># 降序 [&apos;u&apos;, &apos;o&apos;, &apos;i&apos;, &apos;e&apos;, &apos;a&apos;]</span><br><span class="line">vowels = [&apos;e&apos;, &apos;a&apos;, &apos;u&apos;, &apos;o&apos;, &apos;i&apos;]</span><br><span class="line">vowels.sort(reverse=True)</span><br><span class="line"># 指定列表中的元素排序 [(4, 1), (2, 2), (1, 3), (3, 4)]</span><br><span class="line">def takeSecond(elem):</span><br><span class="line">    return elem[1]</span><br><span class="line">random = [(2, 2), (3, 4), (4, 1), (1, 3)]</span><br><span class="line">random.sort(key=takeSecond)</span><br><span class="line"></span><br><span class="line"># 清空列表</span><br><span class="line">list.clear()</span><br><span class="line"></span><br><span class="line"># 复制列表，浅拷贝</span><br><span class="line">list.copy()</span><br><span class="line"></span><br><span class="line"># 推导式，语法：[被追加的数据 循环语句 循环或判断]</span><br><span class="line">[i * 10 for i in range(10, 20)] # [100, 110, 120, 130, 140, 150, 160, 170, 180, 190]</span><br><span class="line">[i * 10 for i in range(10, 20) if i % 2 == 0] # [100, 120, 140, 160, 180]</span><br><span class="line"></span><br><span class="line"># 索引位置和对应值可以使用 enumerate() 函数同时得到</span><br><span class="line">for i, v in enumerate([&apos;tic&apos;, &apos;tac&apos;, &apos;toe&apos;]):</span><br><span class="line">    print(i, v)</span><br><span class="line"></span><br><span class="line"># 同时遍历两个或更多的序列，可以使用 zip() 组合</span><br><span class="line">questions = [&apos;name&apos;, &apos;quest&apos;, &apos;favorite color&apos;]</span><br><span class="line">answers = [&apos;lancelot&apos;, &apos;the holy grail&apos;, &apos;blue&apos;]</span><br><span class="line">for q, a in zip(questions, answers):</span><br><span class="line">    print(&apos;What is your &#123;0&#125;?  It is &#123;1&#125;.&apos;.format(q, a))</span><br><span class="line"></span><br><span class="line"># 反向遍历一个序列，首先指定这个序列，然后调用 reversed() 函数</span><br><span class="line">for i in reversed(range(1, 10, 2)):</span><br><span class="line">    print(i) # 9 7 5 3 1</span><br><span class="line"></span><br><span class="line"># 按顺序遍历一个序列，使用 sorted() 函数返回一个已排序的序列，并不修改原值</span><br><span class="line">basket = [&apos;apple&apos;, &apos;orange&apos;, &apos;apple&apos;, &apos;pear&apos;, &apos;orange&apos;, &apos;banana&apos;]</span><br><span class="line">for f in sorted(set(basket)):</span><br><span class="line">    print(f) # apple banana orange pear</span><br></pre></td></tr></table></figure><h3 id="五、字典-Dict"><a href="#五、字典-Dict" class="headerlink" title="五、字典 Dict"></a>五、字典 Dict</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><span class="line"># 创建 键必须是不可变的，如字符串，数字或元组；不允许同一个键出现两次，创建时如果同一个键被赋值两次，后一个值会被记住</span><br><span class="line">dict1 = &#123;&apos;Name&apos;: &apos;Runoob&apos;, &apos;Age&apos;: 7, &apos;Class&apos;: &apos;First&apos;&#125;</span><br><span class="line">dict2 = &#123;&apos;Alice&apos;: &apos;2341&apos;, &apos;Beth&apos;: &apos;9102&apos;, &apos;Cecil&apos;: 3258, , 98.6: 37&#125;</span><br><span class="line"># &#123;&apos;name&apos;: &apos;ben&apos;, &apos;age&apos;: 12&#125;</span><br><span class="line">dict2(name=&apos;ben&apos;, age=12)</span><br><span class="line"># &#123;&apos;name&apos;: 10, &apos;age&apos;: 10, &apos;sex&apos;: 10&#125;</span><br><span class="line">dict4 = dict.fromkeys((&apos;name&apos;, &apos;age&apos;, &apos;sex&apos;), 10)</span><br><span class="line"></span><br><span class="line"># 修改字典 &#123;&apos;Alice&apos;: &apos;2341&apos;, &apos;Beth&apos;: &apos;9102&apos;, &apos;Cecil&apos;: 8, 98.6: 37&#125;</span><br><span class="line">dict2[&apos;Cecil&apos;] = 8</span><br><span class="line">dict2[98.6] = 8</span><br><span class="line"></span><br><span class="line"># 删除 &#123;&apos;Age&apos;: 7, &apos;Class&apos;: &apos;First&apos;&#125;</span><br><span class="line">del dict1[&apos;Name&apos;]</span><br><span class="line"># &#123;&#125;</span><br><span class="line">dict1.clear()</span><br><span class="line"></span><br><span class="line"># 计算字典元素个数，即键的总数</span><br><span class="line">len(dict2)</span><br><span class="line"></span><br><span class="line"># 输出字典，以可打印的字符串表示</span><br><span class="line">str(dict2)</span><br><span class="line"></span><br><span class="line"># 返回输入的变量类型，如果变量是字典就返回字典类型</span><br><span class="line">type(dict2)</span><br><span class="line"></span><br><span class="line"># 返回一个字典的浅复制</span><br><span class="line">radiansdict.copy()</span><br><span class="line"></span><br><span class="line"># 创建一个新字典，以序列seq中元素做字典的键，val为字典所有键对应的初始值</span><br><span class="line">radiansdict.fromkeys()</span><br><span class="line">seq = (&apos;name&apos;, &apos;age&apos;, &apos;sex&apos;)</span><br><span class="line"># &#123;&apos;age&apos;: 10, &apos;name&apos;: 10, &apos;sex&apos;: 10&#125;, 第二个参数可选，默认为 None</span><br><span class="line">dict3 = dict.fromkeys(seq, 10)</span><br><span class="line"></span><br><span class="line"># 返回指定键的值，如果值不在字典中返回 default 值</span><br><span class="line">radiansdict.get(key, default=None)</span><br><span class="line"></span><br><span class="line"># 如果键在字典 dict 里返回 true，否则返回 false</span><br><span class="line">key in dict</span><br><span class="line"></span><br><span class="line"># 以列表返回可遍历的(键, 值) 元组数组</span><br><span class="line">radiansdict.items()</span><br><span class="line"># dict_items([(&apos;Name&apos;, &apos;Runoob&apos;), (&apos;Age&apos;, 7)])</span><br><span class="line">&#123;&apos;Name&apos;: &apos;Runoob&apos;, &apos;Age&apos;: 7&#125;.items()</span><br><span class="line"></span><br><span class="line"># 返回一个迭代器，可以使用 list() 来转换为列表</span><br><span class="line">radiansdict.keys()</span><br><span class="line"></span><br><span class="line"># 返回一个迭代器，可以使用 list() 来转换为列表</span><br><span class="line">radiansdict.values()</span><br><span class="line"></span><br><span class="line"># 和get()类似, 但如果键不存在于字典中，将会添加键并将值设为default，并返回 default</span><br><span class="line">radiansdict.setdefault(key, default=None)</span><br><span class="line"></span><br><span class="line"># 返回并删除字典中的最后一对键和值，如果字典已经为空，则报 KeyError 异常</span><br><span class="line">popitem()</span><br><span class="line"></span><br><span class="line"># 删除字典给定键 key 所对应的值，返回值为被删除的值。key值必须给出。否则，返回default值。</span><br><span class="line">pop(key[,default])</span><br><span class="line"></span><br><span class="line"># 把字典dict2的键/值对更新到dict里</span><br><span class="line">radiansdict.update(dict2)</span><br><span class="line"></span><br><span class="line"># 生成散列值，多次运行时，每次结果不同</span><br><span class="line">hash(&apos;ben&apos;) # 2712347711650408443</span><br><span class="line">hash(&apos;ben&apos;) == hash(&apos;ben&apos;) # True，每次生成的结果都相同</span><br><span class="line">hash(8838183) # 8838183，数字相同</span><br><span class="line"></span><br><span class="line"># 字典生成式，语法：&#123;key: value 循环语句 循环或判断&#125;</span><br><span class="line">&#123;i: i * 10 for i in range(10, 20)&#125; # &#123;10: 100, 11: 110, 12: 120, 13: 130, 14: 140, 15: 150, 16: 160, 17: 170, 18: 180, 19: 190&#125;</span><br><span class="line"></span><br><span class="line"># 直接从键值对序列中构建字典</span><br><span class="line">dict([(&apos;Runoob&apos;, 1), (&apos;Google&apos;, 2), (&apos;Taobao&apos;, 3)]) # &#123;&apos;Taobao&apos;: 3, &apos;Runoob&apos;: 1, &apos;Google&apos;: 2&#125;</span><br><span class="line"></span><br><span class="line"># 使用关键字参数指定键值对</span><br><span class="line">dict(Runoob=1, Google=2, Taobao=3) # &#123;&apos;Runoob&apos;: 1, &apos;Google&apos;: 2, &apos;Taobao&apos;: 3&#125;</span><br></pre></td></tr></table></figure><h3 id="六、元组-Tuple"><a href="#六、元组-Tuple" class="headerlink" title="六、元组 Tuple"></a>六、元组 Tuple</h3><ul><li>元组与列表类似，不同之处在于元组的元素不能修改；</li><li>元组使用小括号，列表使用方括号；</li><li>元组创建很简单，只需要在括号中添加元素，并使用逗号隔开即可</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"># 创建</span><br><span class="line">tup1 = (&apos;Google&apos;, &apos;Runoob&apos;, 1997, 2000)</span><br><span class="line">tup2 = () # 空元组</span><br><span class="line">tup3 = &quot;a&quot;, &quot;b&quot;, &quot;c&quot;, &quot;d&quot;   # 不需要括号也可以</span><br><span class="line"></span><br><span class="line"># 访问</span><br><span class="line">tup1[1:3] # (&apos;Runoob&apos;, 1997)</span><br><span class="line">tup1[-2] # 1997</span><br><span class="line">tup1[1:] # (&apos;Runoob&apos;, 1997, 2000)</span><br><span class="line"></span><br><span class="line"># (&apos;Google&apos;, &apos;Runoob&apos;, 1997, 2000, &apos;a&apos;, &apos;b&apos;, &apos;c&apos;, &apos;d&apos;) 修改元组（元组中的元素值是不允许修改的，但我们可以对元组进行连接组合）</span><br><span class="line">tup1 + tup3</span><br><span class="line"></span><br><span class="line"># 删除元组（元组被删除后，输出变量会有异常信息）</span><br><span class="line">tup4 = (&apos;Google&apos;, &apos;Runoob&apos;, 1997, 2000)</span><br><span class="line">del tup4</span><br><span class="line"></span><br><span class="line"># 元组运算符</span><br><span class="line">(1, 2, 3) + (4, 5, 6) # (1, 2, 3, 4, 5, 6)，连接</span><br><span class="line">(&apos;Hi!&apos;,) * 4 # (&apos;Hi!&apos;, &apos;Hi!&apos;, &apos;Hi!&apos;, &apos;Hi!&apos;)，复制</span><br><span class="line">3 in (1, 2, 3) # True，元素是否存在</span><br><span class="line">for x in (1, 2, 3): print (x,) # 1 2 3，迭代</span><br><span class="line"></span><br><span class="line"># 内置函数</span><br><span class="line">len(tuple) # 计算元素个数</span><br><span class="line">max(tuple) # 返回元组中元素最大值</span><br><span class="line">min(tuple) # 返回元组中元素最小值</span><br><span class="line">tuple(iterable) # 将可迭代系列转换为元组</span><br><span class="line"></span><br><span class="line"># 不可变，指向的内存中的内容不可变</span><br><span class="line">tup5 = (&apos;r&apos;, &apos;u&apos;, &apos;n&apos;, &apos;o&apos;, &apos;o&apos;, &apos;b&apos;)</span><br><span class="line">id(tup5) # 4461192104</span><br><span class="line">tup5 = (1, 2, 3)</span><br><span class="line">id(tup5) # 4461390080</span><br><span class="line"></span><br><span class="line"># 如果元组内持有列表，那么列表的内容是允许被修改的</span><br><span class="line">tup6 = ([1, 2, 3], [6, 8, 10])</span><br><span class="line">item = tup6[0]</span><br><span class="line">item[1] = 12</span><br><span class="line">tup6 # ([1, 12, 3], [6, 8, 10])</span><br><span class="line"></span><br><span class="line"># 如果元组只有一个元素时，必须后加 ,</span><br><span class="line">(10) * 5 # 50</span><br><span class="line">(10,) * 5 # (10, 10, 10, 10, 10)</span><br><span class="line"></span><br><span class="line"># 序列类型相互转换（序列包含常用的数据结构：字符串 str、列表 list、元组 tuple、数字序列 Range）</span><br><span class="line">- list() 转换为列表</span><br><span class="line">- tuple() 转换为元组</span><br><span class="line">- str() 用于将单个数据转为字符串</span><br><span class="line">- join() 对列表进行拼接，要求列表中所有元素都是字符串</span><br></pre></td></tr></table></figure><h3 id="七、集合-Set"><a href="#七、集合-Set" class="headerlink" title="七、集合 Set"></a>七、集合 Set</h3><p>集合（set）是一个无序的不重复元素序列，可以使用大括号 { } 或者 set() 函数创建集合，注意：创建一个空集合必须用 set() 而不是 { }，因为 { } 是用来创建一个空字典。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"># 创建，参数可以是字典、列表、元素、字符串、集合</span><br><span class="line">set([&apos;a&apos;, &apos;b&apos;]) # 从列表中转变</span><br><span class="line">set(&apos;dajksd&apos;) # 从字符串中转变</span><br><span class="line"></span><br><span class="line"># 去重</span><br><span class="line">basket = &#123;&apos;apple&apos;, &apos;orange&apos;, &apos;apple&apos;, &apos;pear&apos;, &apos;orange&apos;, &apos;banana&apos;&#125; # &#123;&apos;orange&apos;, &apos;banana&apos;, &apos;pear&apos;, &apos;apple&apos;&#125;</span><br><span class="line"></span><br><span class="line"># 快速判断元素是否在集合内</span><br><span class="line">&apos;orange&apos; in basket # false</span><br><span class="line"></span><br><span class="line"># 添加元素</span><br><span class="line">basket.add(&apos;xxx&apos;) # 将 xxx 添加到集合中</span><br><span class="line">basket.update(x) # 参数可以是列表，元组，字典</span><br><span class="line">thisset = set((&quot;Google&quot;, &quot;Runoob&quot;, &quot;Taobao&quot;))</span><br><span class="line">thisset.update(&#123;1,3&#125;) # &#123;1, 3, &apos;Google&apos;, &apos;Taobao&apos;, &apos;Runoob&apos;&#125;</span><br><span class="line">thisset.update([1,4],[5,6], &#123;&apos;a&apos;: &apos;c&apos;&#125;, (&apos;e&apos;, &apos;f&apos;)) # &#123;1, 3, 4, 5, 6, &apos;a&apos;, &apos;e&apos;, &apos;f&apos;, &apos;Google&apos;, &apos;Taobao&apos;, &apos;Runoob&apos;&#125;</span><br><span class="line"></span><br><span class="line"># 移除元素</span><br><span class="line">s.remove(x) # 不存在会发生错误</span><br><span class="line">s.discard(x) # 元素不存在，不会发生错误</span><br><span class="line">s.pop() # 随机删除集合中的一个元素</span><br><span class="line"></span><br><span class="line"># 计算集合元素个数</span><br><span class="line">len(s)</span><br><span class="line"></span><br><span class="line"># 清空集合</span><br><span class="line">s.clear()</span><br><span class="line"></span><br><span class="line"># 集合间的运算</span><br><span class="line">a = set(&apos;abracadabra&apos;) # &#123;&apos;a&apos;, &apos;r&apos;, &apos;b&apos;, &apos;c&apos;, &apos;d&apos;&#125;</span><br><span class="line">b = set(&apos;alacazam&apos;) # &#123;&apos;m&apos;, &apos;z&apos;, &apos;a&apos;, &apos;l&apos;, &apos;c&apos;&#125;</span><br><span class="line"># 集合a中包含而集合b中不包含的元素</span><br><span class="line">a - b # &#123;&apos;r&apos;, &apos;d&apos;, &apos;b&apos;&#125;</span><br><span class="line"># 集合a或b中包含的所有元素</span><br><span class="line">a | b # &#123;&apos;a&apos;, &apos;c&apos;, &apos;r&apos;, &apos;d&apos;, &apos;b&apos;, &apos;m&apos;, &apos;z&apos;, &apos;l&apos;&#125;</span><br><span class="line"># 集合a和b中都包含了的元素</span><br><span class="line">a &amp; b # &#123;&apos;a&apos;, &apos;c&apos;&#125;</span><br><span class="line"># 不同时包含于a和b的元素</span><br><span class="line">a ^ b # &#123;&apos;r&apos;, &apos;d&apos;, &apos;b&apos;, &apos;m&apos;, &apos;z&apos;, &apos;l&apos;&#125;</span><br><span class="line"># 判断两个集合的元素是否完全相同</span><br><span class="line">a = b</span><br><span class="line"></span><br><span class="line"># 常用方法</span><br><span class="line">- copy() 拷贝一个集合</span><br><span class="line">- isdisjoint() 判断两个集合是否包含相同的元素，如果没有返回 True，否则返回 False</span><br><span class="line">- issubset() 判断指定集合是否为该方法参数集合的子集</span><br><span class="line">- issuperset() 判断该方法的参数集合是否为指定集合的子集</span><br><span class="line">- difference() 返回多个集合的差集</span><br><span class="line">- difference_update() 移除集合中的元素，该元素在指定的集合也存在，更新原有集合</span><br><span class="line">- intersection() 返回集合的交集</span><br><span class="line">- intersection_update() 返回集合的交集，更新原有集合</span><br><span class="line">- symmetric_difference 返回两个集合中不重复的元素集合</span><br><span class="line">- symmetric_difference_update() 移除当前集合中在另外一个指定集合相同的元素，并将另外一个指定集合中不同的元素插入到当前集合中</span><br><span class="line">- union() 返回两个集合的并集</span><br><span class="line"></span><br><span class="line"># 集合生成式，语法：&#123;被追加的数据 循环语句 循环或判断&#125;</span><br><span class="line">&#123;i * 10 for i in range(10, 20) if i % 2 == 0&#125; # &#123;160, 100, 140, 180, 120&#125;</span><br></pre></td></tr></table></figure><h3 id="八、类型转换"><a href="#八、类型转换" class="headerlink" title="八、类型转换"></a>八、类型转换</h3><ul><li>字符串转数字：int(字符串) float(字符串) complex(x, y)</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"># 报错</span><br><span class="line">int(&apos;101.5&apos;)</span><br><span class="line"></span><br><span class="line"># 101</span><br><span class="line">int(float(&apos;101.5&apos;))</span><br><span class="line"></span><br><span class="line"># complex(x, y) 将 x 和 y 转换到一个复数，实数部分为 x，虚数部分为 y。x 和 y 是数字表达式。</span><br></pre></td></tr></table></figure><ul><li>数字转字符串：str(数字)</li><li>数字与布尔：数字 0 代表 False，非 0 代表 True</li><li>常用方法<ul><li>int(x [,base]) 将 x 转换为一个整数</li><li>float(x) 将 x 转换到一个浮点数</li><li>complex(real [,imag]) 创建一个复数</li><li>str(x) 将对象 x 转换为字符串</li><li>tuple(s) 将序列 s 转换为一个元组</li><li>list(s) 将序列 s 转换为一个列表</li><li>set(s) 转换为可变集合</li><li>dict(d) 创建一个字典。d 必须是一个 (key, value)元组序列</li><li>frozenset(s) 转换为不可变集合</li><li>hex(x) 将一个整数转换为一个十六进制字符串</li><li>oct(x) 将一个整数转换为一个八进制字符串</li></ul></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;python 数据类型&lt;/p&gt;
    
    </summary>
    
      <category term="note" scheme="http://blog.master-ss.cn/categories/note/"/>
    
    
  </entry>
  
  <entry>
    <title>python 基础</title>
    <link href="http://blog.master-ss.cn/note/python/base/"/>
    <id>http://blog.master-ss.cn/note/python/base/</id>
    <published>2020-03-10T00:42:17.341Z</published>
    <updated>2020-03-13T14:59:24.872Z</updated>
    
    <content type="html"><![CDATA[<p>python 基础知识</p><a id="more"></a><h3 id="一、环境安装"><a href="#一、环境安装" class="headerlink" title="一、环境安装"></a>一、环境安装</h3><ul><li>brew install python3</li><li>设置别名（~/.bash_profile）</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">alias python=&quot;/usr/local/Cellar/python/3.7.0/bin/python3.7&quot;</span><br><span class="line">alias pip=&quot;/usr/local/Cellar/python/3.7.0/bin/pip3.7&quot;</span><br></pre></td></tr></table></figure><ul><li>安装 vscode python 插件</li><li>指定 vscode 环境变量 python.pythonPath</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 输入 interpreter，查看解释器路径 --&gt;</span><br><span class="line">commond + shift + p</span><br><span class="line">&lt;!-- 设置环境变量值 --&gt;</span><br><span class="line">/usr/local/bin/python3</span><br></pre></td></tr></table></figure><ul><li>安装设置 virtualenv</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 安装 --&gt;</span><br><span class="line">pip3 install virtualenv</span><br><span class="line">&lt;!-- 设置 --&gt;</span><br><span class="line">cd ~</span><br><span class="line">virtualenv .pyenv</span><br><span class="line">&lt;!-- 设置环境变量 python.venvPath --&gt;</span><br><span class="line">~/.pyenv</span><br></pre></td></tr></table></figure><h3 id="二、基础知识"><a href="#二、基础知识" class="headerlink" title="二、基础知识"></a>二、基础知识</h3><h4 id="2-1、注释"><a href="#2-1、注释" class="headerlink" title="2.1、注释"></a>2.1、注释</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 单行注释 --&gt;</span><br><span class="line">#</span><br><span class="line"></span><br><span class="line">&lt;!-- 多行注释 --&gt;</span><br><span class="line">&apos;&apos;&apos;</span><br><span class="line">&apos;&apos;&apos;</span><br><span class="line">&lt;!-- 或 --&gt;</span><br><span class="line">&quot;&quot;&quot;</span><br><span class="line">&quot;&quot;&quot;</span><br></pre></td></tr></table></figure><h4 id="2-2、保留字"><a href="#2-2、保留字" class="headerlink" title="2.2、保留字"></a>2.2、保留字</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- Python 的标准库提供了一个 keyword 模块，可以输出当前版本的所有关键字 --&gt;</span><br><span class="line">&gt;&gt;&gt; import keyword</span><br><span class="line">&gt;&gt;&gt; keyword.kwlist</span><br><span class="line">&lt;!-- 保留字列表 --&gt;</span><br><span class="line">[&apos;False&apos;, &apos;None&apos;, &apos;True&apos;, &apos;and&apos;, &apos;as&apos;, &apos;assert&apos;, &apos;async&apos;, &apos;await&apos;, &apos;break&apos;, &apos;class&apos;,</span><br><span class="line"> &apos;continue&apos;, &apos;def&apos;, &apos;del&apos;, &apos;elif&apos;, &apos;else&apos;, &apos;except&apos;, &apos;finally&apos;, &apos;for&apos;, &apos;from&apos;,</span><br><span class="line"> &apos;global&apos;, &apos;if&apos;, &apos;import&apos;, &apos;in&apos;, &apos;is&apos;, &apos;lambda&apos;, &apos;nonlocal&apos;, &apos;not&apos;, &apos;or&apos;, &apos;pass&apos;,</span><br><span class="line"> &apos;raise&apos;, &apos;return&apos;, &apos;try&apos;, &apos;while&apos;, &apos;with&apos;, &apos;yield&apos;]</span><br><span class="line"></span><br><span class="line"> &lt;!-- 获取使用 help 命令 --&gt;</span><br><span class="line"> help(&apos;keywords&apos;)</span><br></pre></td></tr></table></figure><h4 id="2-3、行与缩进"><a href="#2-3、行与缩进" class="headerlink" title="2.3、行与缩进"></a>2.3、行与缩进</h4><p>缩进的空格数是可变的，但是同一个代码块的语句必须包含相同的缩进空格数</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">if True:</span><br><span class="line">    print (&quot;Answer&quot;)</span><br><span class="line">    print (&quot;True&quot;)</span><br><span class="line">else:</span><br><span class="line">    print (&quot;Answer&quot;)</span><br><span class="line">  print (&quot;False&quot;)    # 缩进不一致，会导致运行错误</span><br></pre></td></tr></table></figure><h4 id="2-4、语句、输出、输入、del、换行"><a href="#2-4、语句、输出、输入、del、换行" class="headerlink" title="2.4、语句、输出、输入、del、换行"></a>2.4、语句、输出、输入、del、换行</h4><ul><li>如果语句很长，我们可以使用反斜杠(\)来实现多行语句</li><li>print 默认输出是换行的，如果要实现不换行需要在变量末尾加上 end=’’</li><li>input 用户等待用户输入</li><li>del 用于删除单个或多个对象的引用</li><li>可以在同一行中使用多条语句，语句之间使用分号(;)分割</li><li>制表符，增加字符缩进 \t</li><li>换行符，换行输出 \n</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 多条语句同行显示 --&gt;</span><br><span class="line">import sys; x = &apos;runoob&apos;; sys.stdout.write(x + &apos;\n&apos;)</span><br><span class="line">&lt;!-- input 输入 --&gt;</span><br><span class="line">input(&quot;\n\n按下 enter 键后退出。&quot;)</span><br></pre></td></tr></table></figure><h4 id="2-5、基本运算符"><a href="#2-5、基本运算符" class="headerlink" title="2.5、基本运算符"></a>2.5、基本运算符</h4><ul><li>算术运算符<ul><li>+</li><li>-</li><li>*</li><li>/ 浮点数除法，比如 10 / 2 = 5.0</li><li>// 除法取整，向下取接近除数的整数，比如 9 // 2 = 4，-9 // 2 = -5，7 // 2.0 = 3.0</li><li>** N 次方，也可以用 pow() 方法</li><li>% 取模</li></ul></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 计算公式：r = a - n * (a // n) --&gt;</span><br><span class="line">print(-123 % 10) # 7</span><br><span class="line">print(123 % -10) # -7</span><br><span class="line">print(-123 % -10) # -3</span><br></pre></td></tr></table></figure><ul><li><p>比较运算符</p><ul><li>比较运算符返回 1 表示真，返回 0 表示假，与特殊的变量 True 和 False 等价，注意变量名的大写</li><li>==</li><li>!=</li><li>></li><li>&lt;</li><li>>=</li><li>&lt;=</li></ul></li><li><p>赋值运算符</p><ul><li>=</li><li>+=</li><li>-=</li><li>*=</li><li>/=</li><li>%=</li><li>**=</li><li>//=</li></ul></li><li><p>位运算符</p><ul><li>&amp; 与</li><li>| 或</li><li>^ 异或</li><li>~ 取反</li><li>&lt;&lt; 左移动</li><li>>&gt; 右移动</li></ul></li><li><p>逻辑运算符</p><ul><li>假设变量 a 为 10, b 为 20:</li><li>and (a and b) 返回 20</li><li>or (a or b) 返回 10</li><li>not not(a and b) 返回 False</li></ul></li><li><p>成员运算符</p><ul><li>比如：’a’ in ‘abc’，1 in [1, 2, 3]</li><li>in</li><li>not in</li></ul></li><li><p>身份运算符</p><ul><li>id() 函数用于获取对象内存地址，比如：a = 20; b = 20; print(a is b);</li><li>is 判断两个标识符是不是引用自一个对象，类似 id(x) == id(y)</li><li>is not 判断两个标识符是不是引用自不同对象，类似 id(a) != id(b)</li></ul></li><li><p>运算符优先级</p><ul><li>以下列出了从最高到最低优先级的所有运算符：</li><li>** 指数 (最高优先级)</li><li>~ + - 按位翻转, 一元加号和减号 (最后两个的方法名为 +@ 和 -@)</li><li>* / % // 乘，除，求余数和取整除</li><li>+ - 加法减法</li><li>>&gt; &lt;&lt; 右移，左移运算符</li><li>&amp; 位 ‘AND’</li><li>^ | 位运算符</li><li>&lt;= &lt; &gt; &gt;= 比较运算符</li><li>== != 等于运算符</li><li>= %= /= //= -= += *= **= 赋值运算符</li><li>is is not 身份运算符</li><li>in not in 成员运算符</li><li>not and or 逻辑运算符</li></ul></li></ul><h4 id="2-6、流程控制"><a href="#2-6、流程控制" class="headerlink" title="2.6、流程控制"></a>2.6、流程控制</h4><ul><li>条件：if elif else</li><li>循环：<ul><li>while … else …</li><li>for … in … else …</li><li>break：跳出 for 和 while 的循环体，任何对应的循环 else 块将不执行</li><li>continue：跳过当前循环块中的剩余语句，然后继续进行下一轮循环</li></ul></li><li>pass：空语句，不做任何事情，一般用做占位语句，保持程序结构的完整性</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;python 基础知识&lt;/p&gt;
    
    </summary>
    
      <category term="note" scheme="http://blog.master-ss.cn/categories/note/"/>
    
    
  </entry>
  
  <entry>
    <title>微信公众号开发</title>
    <link href="http://blog.master-ss.cn/project/wx/"/>
    <id>http://blog.master-ss.cn/project/wx/</id>
    <published>2019-11-10T01:40:30.453Z</published>
    <updated>2019-11-10T12:37:18.633Z</updated>
    
    <content type="html"><![CDATA[<p>总结一波微信公众号开发的流程。<br><a id="more"></a> </p><h3 id="一、基础知识"><a href="#一、基础知识" class="headerlink" title="一、基础知识"></a>一、基础知识</h3><h4 id="1-1、企业号"><a href="#1-1、企业号" class="headerlink" title="1.1、企业号"></a>1.1、企业号</h4><p>为企业或组织提供移动应用入口，帮助企业建立与员工、上下游供应链及企业应用间的连接（管理全学校所有学院，团委，学生处各个部门上班人员的考勤，活动进程等，目前钉钉是更好的选择）</p><h4 id="1-2、订阅号"><a href="#1-2、订阅号" class="headerlink" title="1.2、订阅号"></a>1.2、订阅号</h4><p>适合于个人、小团队，主要是用于信息传播，帮助管理用户以及用户互动。比如撰写文章，咨询传播，消息定制等等（比如管理一个班级，一个学院的信息订阅，通知和互动）</p><h4 id="1-3、服务号"><a href="#1-3、服务号" class="headerlink" title="1.3、服务号"></a>1.3、服务号</h4><p>企业和组织，提供更强大的业务服务与用户管理能力。比如支付，智能接口（管理全学校的水果商店或者打印店，可以直接支付送货上门，及时推送一些特价水果）</p><h4 id="1-4、认证"><a href="#1-4、认证" class="headerlink" title="1.4、认证"></a>1.4、认证</h4><p>一般是需要你有一个开户过的企业，可以以法人身份折腾下开一个小公司，建议是认证一下</p><h4 id="1-5、订阅号和服务号区别"><a href="#1-5、订阅号和服务号区别" class="headerlink" title="1.5、订阅号和服务号区别"></a>1.5、订阅号和服务号区别</h4><ul><li>出现位置不同；</li><li>单月发送消息数量不同，订阅号可以一天一篇，服务号一个月最多4篇；</li><li>订阅号没有一些接口和功能</li></ul><h3 id="二、公众号开发"><a href="#二、公众号开发" class="headerlink" title="二、公众号开发"></a>二、公众号开发</h3><h4 id="2-1、配置微信公众号后台"><a href="#2-1、配置微信公众号后台" class="headerlink" title="2.1、配置微信公众号后台"></a>2.1、配置微信公众号后台</h4><ul><li>URL 用来接收微信消息和事件；</li><li>Token 任意填写，用作生成签名；</li><li>EncodingAESKey 手动填写或随机生成，用作消息体加解密密钥</li></ul><h4 id="2-2、公众号验证"><a href="#2-2、公众号验证" class="headerlink" title="2.2、公众号验证"></a>2.2、公众号验证</h4><p>在公众号平台上设置服务器配置后，微信会用 GET 请求配置中的服务器地址，含以下参数：</p><ul><li>signature 微信加密签名</li><li>timestamp 时间戳</li><li>nonce 随机数</li><li>echostr 随机字符串</li></ul><p>验证流程如下：</p><ul><li>将token、timestamp、nonce三个参数进行字典序排序</li><li>将三个参数字符串拼接成一个字符串进行sha1加密</li><li>开发者获得加密后的字符串可与signature对比，标识该请求来源于微信，若确认此次GET请求来自微信服务器，则返回echostr参数内容</li><li>服务器配置启用大概需要10分钟的缓存时间，停用大概5分钟的反应时间</li></ul><h4 id="2-3、被动回复消息"><a href="#2-3、被动回复消息" class="headerlink" title="2.3、被动回复消息"></a>2.3、被动回复消息</h4><ul><li>处理POST类型的控制逻辑，接收这个XML的数据包</li><li>解析这个数据包（获得数据包的消息类型或者事件类型）</li><li>拼装好我们定义好的消息</li><li>包装成XML的格式</li><li>在5秒内返回回去</li></ul><h4 id="2-4、access-token"><a href="#2-4、access-token" class="headerlink" title="2.4、access_token"></a>2.4、access_token</h4><ul><li>access_token是公众号的全局唯一接口调用凭据，公众号调用各接口时都需使用access_token。开发者需要进行妥善保存。access_token的存储至少要保留512个字符空间</li><li>access_token的有效期目前为2个小时，需定时刷新，重复获取将导致上次获取的access_token失效</li><li>服务器需要根据有效时间提前去刷新新access_token。在刷新过程后的5分钟内，新老access_token都可用</li><li>建议统一获取和刷新access_token，其他服务器所使用的access_token均来自于该中控服务器，不应该各自去刷新，否则容易造成冲突，导致access_token覆盖而影响业务</li></ul><h4 id="2-5、jssdk"><a href="#2-5、jssdk" class="headerlink" title="2.5、jssdk"></a>2.5、jssdk</h4><ul><li>jsapi_ticket是公众号用于调用微信JS接口的临时票据，有效期为2小时</li><li>jsapi_ticket通过access_token来获取，获取的api调用次数非常有限，须在服务全局缓存</li><li>绑定域名</li><li>引入JS文件</li><li>通过config接口注入权限验证配置</li><li>通过ready接口处理成功验证</li><li>通过error接口处理失败验证</li></ul><h3 id="三、vue-单页调用-JSSDK"><a href="#三、vue-单页调用-JSSDK" class="headerlink" title="三、vue 单页调用 JSSDK"></a>三、vue 单页调用 JSSDK</h3><h4 id="3-1、定义-vuex-缓存"><a href="#3-1、定义-vuex-缓存" class="headerlink" title="3.1、定义 vuex 缓存"></a>3.1、定义 vuex 缓存</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">export default new Vuex.Store(&#123;</span><br><span class="line">  state: &#123;</span><br><span class="line">    wxSignUrl: &apos;&apos;,</span><br><span class="line">  &#125;,</span><br><span class="line">  mutations: &#123;</span><br><span class="line">    // IOS仅记录第一次进入页面时的URL，IOS微信切换路由实际URL不变，只能使用第一进入页面的URL进行签名</span><br><span class="line">    setWechatSignUrl(state, value) &#123;</span><br><span class="line">      if (tools.isIos() &amp;&amp; state.wxSignUrl !== &apos;&apos;) &#123;</span><br><span class="line">        return</span><br><span class="line">      &#125;</span><br><span class="line">      state.wxSignUrl = value</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  getters: &#123;</span><br><span class="line">    getWechatSignUrl: state =&gt; state.wxSignUrl</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h4 id="3-2、路由守卫内触发更新签名"><a href="#3-2、路由守卫内触发更新签名" class="headerlink" title="3.2、路由守卫内触发更新签名"></a>3.2、路由守卫内触发更新签名</h4><p>在IOS上，无论路由切换到哪个页面，实际真正有效的的签名URL是【第一次进入应用时的URL】。这里保证IOS是使用当前页面URL，Android是使用目标路由完整地址再加上域名<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">// 获取真实有效微信签名URL</span><br><span class="line">function getWechatSignUrl(to) &#123;</span><br><span class="line">  if (tools.isIos()) &#123;</span><br><span class="line">    return window.location.href</span><br><span class="line">  &#125; else &#123;</span><br><span class="line">    return process.env.VUE_APP_DOMAIN + to.fullPath</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">router.beforeEach((to, from, next) =&gt; &#123;</span><br><span class="line">  store.commit(&apos;setWechatSignUrl&apos;, getWechatSignUrl(to))</span><br><span class="line">  next()</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></p><h4 id="3-3、定义全局-mixin"><a href="#3-3、定义全局-mixin" class="headerlink" title="3.3、定义全局 mixin"></a>3.3、定义全局 mixin</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line">export default &#123;</span><br><span class="line">  data() &#123;</span><br><span class="line">    return &#123;</span><br><span class="line">      firstIn: true,</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  mounted() &#123;</span><br><span class="line">    this.initWechatShareConfig()</span><br><span class="line">  &#125;,</span><br><span class="line">  activated() &#123;</span><br><span class="line">    if (!this.firstIn) &#123;</span><br><span class="line">      this.initWechatShareConfig()</span><br><span class="line">    &#125;</span><br><span class="line">    this.firstIn = false</span><br><span class="line">  &#125;,</span><br><span class="line">  methods: &#123;</span><br><span class="line">    initWechatShareConfig() &#123;</span><br><span class="line">      const u = navigator.userAgent.toLowerCase()</span><br><span class="line">      if (u.match(/MicroMessenger/i) != &apos;micromessenger&apos;) return</span><br><span class="line">      // 获取服务端签名配置信息</span><br><span class="line">      this.$service(&#123;</span><br><span class="line">        host: &apos;coupon&apos;,</span><br><span class="line">        api: &apos;getWxConfig&apos;,</span><br><span class="line">        option: &#123;</span><br><span class="line">          data: &#123;</span><br><span class="line">            url: this.$store.getters[&apos;getWechatSignUrl&apos;]</span><br><span class="line">          &#125;,</span><br><span class="line">        &#125;,</span><br><span class="line">      &#125;).then(res =&gt; &#123;</span><br><span class="line">        if (res.code === 200) &#123;</span><br><span class="line">          this.$tools.initWx(res.data, this.$route.meta.title, this.$route.fullPath)</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">          this.$toast(&#123;</span><br><span class="line">            position: &apos;top&apos;,</span><br><span class="line">            message: res.message || &apos;请求失败&apos;,</span><br><span class="line">          &#125;)</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;).catch(() =&gt; &#123;</span><br><span class="line">        this.$toast.clear()</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="3-4、定义初始化工具方法"><a href="#3-4、定义初始化工具方法" class="headerlink" title="3.4、定义初始化工具方法"></a>3.4、定义初始化工具方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">initWx: function (wxConfig, title, path) &#123;</span><br><span class="line">  window.wx.config(&#123;</span><br><span class="line">    debug: process.env.NODE_ENV === &apos;production&apos; ? false : true, // 调试模式,</span><br><span class="line">    appId: process.env.VUE_APP_APPID, // 必填，服务号的唯一标识</span><br><span class="line">    timestamp: parseInt(wxConfig.timestamp), // 必填，生成签名的时间戳</span><br><span class="line">    nonceStr: wxConfig.noncestr, // 必填，生成签名的随机串</span><br><span class="line">    signature: wxConfig.signature,// 必填，签名，见附录1</span><br><span class="line">    jsApiList: [&apos;updateAppMessageShareData&apos;, &apos;updateTimelineShareData&apos;] // 必填，需要使用的JS接口列表</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">  window.wx.ready(function () &#123;</span><br><span class="line">    // 调用jssdk方法</span><br><span class="line">    ...</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">  window.wx.error(function (err) &#123;</span><br><span class="line">    console.log(&apos;wx error: &apos;, err)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="3-5、页面继承-mixin"><a href="#3-5、页面继承-mixin" class="headerlink" title="3.5、页面继承 mixin"></a>3.5、页面继承 mixin</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">export default &#123;</span><br><span class="line">  mixins: [mixins],</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;总结一波微信公众号开发的流程。&lt;br&gt;
    
    </summary>
    
      <category term="project" scheme="http://blog.master-ss.cn/categories/project/"/>
    
    
  </entry>
  
  <entry>
    <title>jenkins 之构建部署</title>
    <link href="http://blog.master-ss.cn/tools/jenkins/"/>
    <id>http://blog.master-ss.cn/tools/jenkins/</id>
    <published>2019-11-09T01:24:59.565Z</published>
    <updated>2019-11-09T02:26:50.883Z</updated>
    
    <content type="html"><![CDATA[<p>最近刚刚搞定 jenkins 构建部署前端项目，现在总结一波。<br><a id="more"></a> </p><h3 id="一、需求"><a href="#一、需求" class="headerlink" title="一、需求"></a>一、需求</h3><p>自己业余时间搭建的项目让前后端杂糅在一起，然后共同在服务端构建部署。但是由于服务器配置有限，每次构建都会触发监控报警，所以考虑把前端构建工作放在本地 mac 机上，构建成功后再部署到服务器。</p><h3 id="二、安装"><a href="#二、安装" class="headerlink" title="二、安装"></a>二、安装</h3><h4 id="2-1、下载-java"><a href="#2-1、下载-java" class="headerlink" title="2.1、下载 java"></a>2.1、下载 java</h4><ul><li>从官网下载并安装</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">brew cask install java</span><br></pre></td></tr></table></figure><ul><li>查看版本信息</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">brew cask info java</span><br></pre></td></tr></table></figure><ul><li>检查 java 环境</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java -version</span><br></pre></td></tr></table></figure><h4 id="2-2、安装-jenkins"><a href="#2-2、安装-jenkins" class="headerlink" title="2.2、安装 jenkins"></a>2.2、安装 jenkins</h4><ul><li>安装</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">brew install jenkins</span><br></pre></td></tr></table></figure><ul><li>卸载</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">brew uninstall jenkins</span><br></pre></td></tr></table></figure><ul><li>启用</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">jenkins</span><br></pre></td></tr></table></figure><ul><li>登录</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://localhost:8080</span><br></pre></td></tr></table></figure><h3 id="三、初始化"><a href="#三、初始化" class="headerlink" title="三、初始化"></a>三、初始化</h3><p>首次设置项目：unlock Jenkins（administrator password）-&gt; Customize Jenkins（install suggested plugins）—&gt; Create First Admin User（用户名、密码、确认密码、全名、电子邮件地址）—&gt; Jenkins is ready</p><h4 id="3-1、安装时查看解锁密码"><a href="#3-1、安装时查看解锁密码" class="headerlink" title="3.1、安装时查看解锁密码"></a>3.1、安装时查看解锁密码</h4><p><img src="/assets/tools/jenkins/install.png"></p><p>由于安装时没有截图，这里使用网上的截图，也可以使用命令行查看：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cat /Users/zhangshaoyu/.jenkins/secrets/installAdminPassword</span><br></pre></td></tr></table></figure></p><h4 id="3-2、解锁"><a href="#3-2、解锁" class="headerlink" title="3.2、解锁"></a>3.2、解锁</h4><p><img src="/assets/tools/jenkins/unlock.png"></p><h4 id="3-3、插件安装"><a href="#3-3、插件安装" class="headerlink" title="3.3、插件安装"></a>3.3、插件安装</h4><p><img src="/assets/tools/jenkins/plugin.png"></p><p><img src="/assets/tools/jenkins/failure.png"></p><p>这里插件安装时可能有部分插件会安装失败，可以进行下一步，到最后再重新安装回来</p><h4 id="3-4、推荐插件"><a href="#3-4、推荐插件" class="headerlink" title="3.4、推荐插件"></a>3.4、推荐插件</h4><p>除了默认推荐插件以外，还有一些比较好的插件：</p><ul><li>Role-based Authorization Strategy 角色管理插件</li><li>Extended Choice Parameter 项目参数选择插件</li><li>Git Parameter 可用于获取 git 项目分支等信息作为参数</li><li>Email Extension Plugin 构建成功后进行邮件推送</li><li>Publish Over SSH 用于推送静态资源包到服务器</li></ul><h3 id="四、构建"><a href="#四、构建" class="headerlink" title="四、构建"></a>四、构建</h3><h4 id="4-1、基本信息"><a href="#4-1、基本信息" class="headerlink" title="4.1、基本信息"></a>4.1、基本信息</h4><p><img src="/assets/tools/jenkins/general.png"></p><h4 id="4-2、源码信息"><a href="#4-2、源码信息" class="headerlink" title="4.2、源码信息"></a>4.2、源码信息</h4><p><img src="/assets/tools/jenkins/source.png"></p><h4 id="4-3、构建脚本"><a href="#4-3、构建脚本" class="headerlink" title="4.3、构建脚本"></a>4.3、构建脚本</h4><p><img src="/assets/tools/jenkins/build.png"></p><h3 id="五、部署"><a href="#五、部署" class="headerlink" title="五、部署"></a>五、部署</h3><h4 id="5-1、全局-ssh-配置"><a href="#5-1、全局-ssh-配置" class="headerlink" title="5.1、全局 ssh 配置"></a>5.1、全局 ssh 配置</h4><p><img src="/assets/tools/jenkins/global.png"></p><h4 id="5-2、部署配置"><a href="#5-2、部署配置" class="headerlink" title="5.2、部署配置"></a>5.2、部署配置</h4><p><img src="/assets/tools/jenkins/deploy.png"></p><h3 id="六、服务器配置"><a href="#六、服务器配置" class="headerlink" title="六、服务器配置"></a>六、服务器配置</h3><h4 id="6-1、nginx-配置"><a href="#6-1、nginx-配置" class="headerlink" title="6.1、nginx 配置"></a>6.1、nginx 配置</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">  listen 80;</span><br><span class="line">  server_name admin-coupon.master-ss.cn;</span><br><span class="line">  rewrite ^(.*) https://$host$1 permanent;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">server &#123;</span><br><span class="line">  listen 443;</span><br><span class="line">  server_name admin-coupon.master-ss.cn;</span><br><span class="line">  ssl on;</span><br><span class="line">  ssl_certificate /etc/nginx/conf.d/ssl/1_admin-coupon.master-ss.cn_bundle.crt;</span><br><span class="line">  ssl_certificate_key /etc/nginx/conf.d/ssl/2_admin-coupon.master-ss.cn.key;</span><br><span class="line">  ssl_session_timeout 5m;</span><br><span class="line">  ssl_protocols TLSv1 TLSv1.1 TLSv1.2;</span><br><span class="line">  ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:HIGH:!aNULL:!MD5:!RC4:!DHE;#按照这个套件配置</span><br><span class="line">  ssl_prefer_server_ciphers on;</span><br><span class="line"></span><br><span class="line">  location / &#123;</span><br><span class="line">    proxy_set_header X-Real-IP $remote_addr;</span><br><span class="line">    proxy_set_header X-Forward-For $proxy_add_x_forwarded_for;</span><br><span class="line">    proxy_set_header Host $http_host;</span><br><span class="line">    proxy_set_header X-Nginx-Proxy true;</span><br><span class="line">   </span><br><span class="line">    root /usr/share/nginx/coupon_admin_dist;</span><br><span class="line">    index index.html;</span><br><span class="line">    try_files $uri /index.html;</span><br><span class="line">  &#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;最近刚刚搞定 jenkins 构建部署前端项目，现在总结一波。&lt;br&gt;
    
    </summary>
    
      <category term="tools" scheme="http://blog.master-ss.cn/categories/tools/"/>
    
    
  </entry>
  
  <entry>
    <title>nginx 简介</title>
    <link href="http://blog.master-ss.cn/note/nginx/index/"/>
    <id>http://blog.master-ss.cn/note/nginx/index/</id>
    <published>2019-11-05T06:50:13.367Z</published>
    <updated>2019-11-05T08:53:50.134Z</updated>
    
    <content type="html"><![CDATA[<p>Nginx 是一个高性能的 HTTP 和反向代理 web 服务器，这次来系统总结下 nginx。<br><a id="more"></a></p><h3 id="一、优点"><a href="#一、优点" class="headerlink" title="一、优点"></a>一、优点</h3><ul><li>支持海量高并发</li><li>内存消耗少</li><li>免费使用可以商业化</li><li>配置文件简单</li></ul><h3 id="二、使用"><a href="#二、使用" class="headerlink" title="二、使用"></a>二、使用</h3><h4 id="2-1、版本说明"><a href="#2-1、版本说明" class="headerlink" title="2.1、版本说明"></a>2.1、版本说明</h4><ul><li>Mainline version：开发版，主要是给广大 Nginx 爱好者，测试、研究和学习的，但是不建议使用于生产环境</li><li>Stable version：稳定版,也就是我们说的长期更新版本。这种版本一般比较成熟，经过长时间的更新测试，所以这种版本也是主流版本</li><li>Legacy version：历史版本，如果你需要以前的版本，Nginx 也是有提供的</li></ul><h4 id="2-2、安装"><a href="#2-2、安装" class="headerlink" title="2.2、安装"></a>2.2、安装</h4><ul><li>mac</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 使用 homebrew 快捷安装 --&gt;</span><br><span class="line">brew install nginx</span><br><span class="line"></span><br><span class="line">&lt;!-- 查看软件包信息，可浏览到配置文件信息 --&gt;</span><br><span class="line">brew info nginx</span><br><span class="line"></span><br><span class="line">&lt;!-- 启动 nginx，注意需要加 sudo，不然会出现命令行提示启动成功实际上进程没有执行的情况 --&gt;</span><br><span class="line">sudo brew services start nginx</span><br></pre></td></tr></table></figure><ul><li>centos</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 安装 nginx 安装包 --&gt;</span><br><span class="line">yum install nginx</span><br><span class="line"></span><br><span class="line">&lt;!-- 查看软件包信息 --&gt;</span><br><span class="line">yum info nginx</span><br><span class="line"></span><br><span class="line">&lt;!-- 启动 nginx --&gt;</span><br><span class="line">systemctl start nginx.service</span><br></pre></td></tr></table></figure><h3 id="三、常用命令"><a href="#三、常用命令" class="headerlink" title="三、常用命令"></a>三、常用命令</h3><ul><li><p>nginx -v<br>检测版本</p></li><li><p>rpm -ql nginx<br>查看安装目录，rpm 是 linux 的 rpm 包管理工具，-q 代表询问模式，-l 代表返回列表，这样我们就可以找到 nginx 的所有安装位置了</p></li><li><p>nginx -t<br>测试配置是否有语法错误</p></li><li><p>nginx<br>启动 nginx</p></li><li><p>nginx -s reload<br>重新载入配置文件，不用重启</p></li><li><p>nginx -s stop<br>立即停止服务，无论进程是否在工作，都直接停止进程</p></li><li><p>nginx -s quit<br>从容停止服务，需要进程完成当前工作后再停止</p></li><li><p>ps aux | grep nginx<br>查看服务运行状态</p></li><li><p>systemctl start nginx.service<br>启动 nginx</p></li><li><p>systemctl stop nginx.service<br>systemctl 停止</p></li><li><p>systemctl restart nginx.service<br>重启服务</p></li><li><p>killall nginx<br>直接杀死进程，用于上面方法没有效果时</p></li><li><p>netstat -tlnp<br>查看端口号的占用情况。默认情况下，nginx启动后会监听 80 端口，从而提供 HTTP 访问，如果 80 端口已经被占用则会启动失败</p></li></ul><h3 id="四、配置解读"><a href="#四、配置解读" class="headerlink" title="四、配置解读"></a>四、配置解读</h3><h4 id="4-1、初始配置（-etc-nginx-nginx-conf）"><a href="#4-1、初始配置（-etc-nginx-nginx-conf）" class="headerlink" title="4.1、初始配置（/etc/nginx/nginx.conf）"></a>4.1、初始配置（/etc/nginx/nginx.conf）</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">#运行用户，默认即是nginx，可以不进行设置</span><br><span class="line">user  nginx;</span><br><span class="line">#Nginx进程，一般设置为和CPU核数一样</span><br><span class="line">worker_processes  1;   </span><br><span class="line">#错误日志存放目录</span><br><span class="line">error_log  /var/log/nginx/error.log warn;</span><br><span class="line">#进程pid存放位置</span><br><span class="line">pid        /var/run/nginx.pid;</span><br><span class="line">events &#123;</span><br><span class="line">    worker_connections  1024; # 单个后台进程的最大并发数</span><br><span class="line">&#125;</span><br><span class="line">http &#123;</span><br><span class="line">    include       /etc/nginx/mime.types;   #文件扩展名与类型映射表</span><br><span class="line">    default_type  application/octet-stream;  #默认文件类型</span><br><span class="line">    #设置日志模式</span><br><span class="line">    log_format  main  &apos;$remote_addr - $remote_user [$time_local] &quot;$request&quot; &apos;</span><br><span class="line">                      &apos;$status $body_bytes_sent &quot;$http_referer&quot; &apos;</span><br><span class="line">                      &apos;&quot;$http_user_agent&quot; &quot;$http_x_forwarded_for&quot;&apos;;</span><br><span class="line">    access_log  /var/log/nginx/access.log  main;   #nginx访问日志存放位置</span><br><span class="line">    sendfile        on;   #开启高效传输模式</span><br><span class="line">    #tcp_nopush     on;    #减少网络报文段的数量</span><br><span class="line">    keepalive_timeout  65;  #保持连接的时间，也叫超时时间</span><br><span class="line">    #gzip  on;  #开启gzip压缩</span><br><span class="line">    include /etc/nginx/conf.d/*.conf; #包含的子配置项位置和文件</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="4-2、默认配置（-etc-nginx-conf-d-default-conf）"><a href="#4-2、默认配置（-etc-nginx-conf-d-default-conf）" class="headerlink" title="4.2、默认配置（/etc/nginx/conf.d/default.conf）"></a>4.2、默认配置（/etc/nginx/conf.d/default.conf）</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">    listen       80;   #配置监听端口</span><br><span class="line">    server_name  localhost;  //配置域名</span><br><span class="line">    #charset koi8-r;     </span><br><span class="line">    #access_log  /var/log/nginx/host.access.log  main;</span><br><span class="line">    location / &#123;</span><br><span class="line">        root   /usr/share/nginx/html;     #服务默认启动目录</span><br><span class="line">        index  index.html index.htm;    #默认访问文件</span><br><span class="line">    &#125;</span><br><span class="line">    #error_page  404              /404.html;   # 配置404页面，还可以使用外部地址，如 http://abc.com</span><br><span class="line">    # redirect server error pages to the static page /50x.html</span><br><span class="line">    #</span><br><span class="line">    error_page   500 502 503 504  /50x.html;   #错误状态码的显示页面，配置后需要重启</span><br><span class="line">    location = /50x.html &#123;</span><br><span class="line">        root   /usr/share/nginx/html;</span><br><span class="line">    &#125;</span><br><span class="line">    # proxy the PHP scripts to Apache listening on 127.0.0.1:80</span><br><span class="line">    #</span><br><span class="line">    #location ~ \.php$ &#123;</span><br><span class="line">    #    proxy_pass   http://127.0.0.1;</span><br><span class="line">    #&#125;</span><br><span class="line">    # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000</span><br><span class="line">    #</span><br><span class="line">    #location ~ \.php$ &#123;</span><br><span class="line">    #    root           html;</span><br><span class="line">    #    fastcgi_pass   127.0.0.1:9000;</span><br><span class="line">    #    fastcgi_index  index.php;</span><br><span class="line">    #    fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;</span><br><span class="line">    #    include        fastcgi_params;</span><br><span class="line">    #&#125;</span><br><span class="line">    # deny access to .htaccess files, if Apache&apos;s document root</span><br><span class="line">    # concurs with nginx&apos;s one</span><br><span class="line">    #</span><br><span class="line">    #location ~ /\.ht &#123;</span><br><span class="line">    #    deny  all;</span><br><span class="line">    #&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="五、常用功能"><a href="#五、常用功能" class="headerlink" title="五、常用功能"></a>五、常用功能</h3><h4 id="5-1、访问控制"><a href="#5-1、访问控制" class="headerlink" title="5.1、访问控制"></a>5.1、访问控制</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"># 简单访问控制</span><br><span class="line">location / &#123;</span><br><span class="line">    # allow 是允许访问，在同一个块下的两个权限指令，先出现的设置会覆盖后出现的设置</span><br><span class="line">    allow  45.76.202.231;</span><br><span class="line">    # deny 是禁止访问，如果 123.9.51.42/200 表示 42-200 都被禁止，all 表示禁止所有 IP</span><br><span class="line">    deny   123.9.51.42;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"># 复杂访问控制权限匹配</span><br><span class="line">location =/img&#123;</span><br><span class="line">    # = 号代表精确匹配，使用了 = 后是根据其后的模式进行精确匹配</span><br><span class="line">    allow all;</span><br><span class="line">&#125;</span><br><span class="line">location =/admin&#123;</span><br><span class="line">    deny all;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 使用正则表达式设置访问权限，以 ~ 开头</span><br><span class="line">location ~\.php$ &#123;</span><br><span class="line">    deny all;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="5-2、配置虚拟主机"><a href="#5-2、配置虚拟主机" class="headerlink" title="5.2、配置虚拟主机"></a>5.2、配置虚拟主机</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"># 基于端口号：原理就是Nginx监听多个端口，根据不同的端口号，来区分不同的网站</span><br><span class="line"># 可以直接配置在主文件里 etc/nginx/nginx.conf 文件里</span><br><span class="line"># 也可以配置在子配置文件里 etc/nginx/conf.d/default.conf</span><br><span class="line"># 还可以再新建一个文件，只要在 conf.d 文件夹下就可以了</span><br><span class="line">server&#123;</span><br><span class="line">    listen 8001;</span><br><span class="line">    server_name localhost;</span><br><span class="line">    root /usr/share/nginx/html/html8001;</span><br><span class="line">    index index.html;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"># 基于 IP</span><br><span class="line">server&#123;</span><br><span class="line">    listen 80;</span><br><span class="line">    server_name 112.74.164.244;</span><br><span class="line">    root /usr/share/nginx/html/html8001;</span><br><span class="line">    index index.html;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"># 基于域名</span><br><span class="line">server&#123;</span><br><span class="line">    listen 80;</span><br><span class="line">    server_name nginx2.abc.com;</span><br><span class="line">    location / &#123;</span><br><span class="line">        root /usr/share/nginx/html/html8001;</span><br><span class="line">        index index.html index.htm;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="5-3、反向代理"><a href="#5-3、反向代理" class="headerlink" title="5.3、反向代理"></a>5.3、反向代理</h4><p>正向代理：把不让访问的服务器的网页请求，代理到一个可以访问该网站的代理服务器上来，一般叫做 proxy 服务器，再转发给客户<br>反向代理：向外部客户端提供了一个统一的代理入口，客户端的请求都要先经过这个 proxy 服务器。使用反向代理客户端用户只能通过外来网来访问代理服务器，并且用户并不知道自己访问的真实服务器是那一台，可以很好的提供安全保护；主要用途是为多个服务器提供负债均衡、缓存等功能<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"># proxy_set_header :在将客户端请求发送给后端服务器之前，更改来自客户端的请求头信息</span><br><span class="line"># proxy_connect_timeout:配置Nginx与后端代理服务器尝试建立连接的超时时间</span><br><span class="line"># proxy_read_timeout : 配置Nginx向后端服务器组发出read请求后，等待相应的超时时间</span><br><span class="line"># proxy_send_timeout：配置Nginx向后端服务器组发出write请求后，等待相应的超时时间</span><br><span class="line"># proxy_redirect :用于修改后端服务器返回的响应头中的Location和Refresh</span><br><span class="line">server&#123;</span><br><span class="line">    listen 80;</span><br><span class="line">    server_name nginx2.abc.com;</span><br><span class="line">    location / &#123;</span><br><span class="line">        proxy_pass http://abc.com;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h4 id="5-4、适配-PC-或移动设备"><a href="#5-4、适配-PC-或移动设备" class="headerlink" title="5.4、适配 PC 或移动设备"></a>5.4、适配 PC 或移动设备</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">location ~ ^/gzact/copyright/(.*)$ &#123;  </span><br><span class="line">    proxy_set_header Host   $host;</span><br><span class="line">    proxy_set_header X-Real-IP      $remote_addr;</span><br><span class="line">    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;</span><br><span class="line">    if ($http_user_agent ~* &quot;(android|bb\d+|meego).+mobile|avantgo|bada\/|blackberry|blazer|compal|elaine|fennec|hiptop|iemobile|ip(hone|od)|iris|kindle|lge |maemo|midp|mmp|mobile.+firefox|netfront|opera m(ob|in)i|palm( os)?|phone|p(ixi|re)\/|plucker|pocket|psp|series(4|6)0|symbian|treo|up\.(browser|link)|vodafone|wap|windows ce|xda|xiino&quot;) &#123;</span><br><span class="line">        set $mobile_rewrite &quot;wap&quot;;</span><br><span class="line">    &#125;</span><br><span class="line">    if ($mobile_rewrite != &quot;wap&quot;) &#123; </span><br><span class="line">        rewrite ^(/gzact/copyright)/(.*)  /gzact/copyright/pc/$2 break; </span><br><span class="line">        proxy_pass http://localhost:9091;</span><br><span class="line">    &#125;</span><br><span class="line">    if ($mobile_rewrite = &quot;wap&quot;) &#123; </span><br><span class="line">        rewrite ^(/gzact/copyright)/(.*)  /gzact/copyright/wap/$2 break;</span><br><span class="line">        proxy_pass http://localhost:9091;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="5-5、Gzip-压缩配置"><a href="#5-5、Gzip-压缩配置" class="headerlink" title="5.5、Gzip 压缩配置"></a>5.5、Gzip 压缩配置</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">// gzip: 该指令用于开启或 关闭 gzip 模块</span><br><span class="line">// gzip_buffers: 设置系统获取几个单位的缓存用于存储 gzip 的压缩结果数据流</span><br><span class="line">// gzip_comp_level: gzip 压缩比，压缩级别是 1-9，1 的压缩级别最低，9 的压缩级别最高。压缩级别越高压缩率越大，压缩时间越长</span><br><span class="line">// gzip_disable: 可以通过该指令对一些特定的 User-Agent 不使用压缩功能</span><br><span class="line">// gzip_min_length: 设置允许压缩的页面最小字节数，页面字节数从相应消息头的 Content-length 中进行获取</span><br><span class="line">// gzip_http_version：识别 HTTP 协议版本，其值可以是 1.1. 或 1.0.</span><br><span class="line">// gzip_proxied: 用于设置启用或禁用从代理服务器上收到相应内容 gzip 压缩</span><br><span class="line">// gzip_vary: 用于在响应消息头中添加 Vary：Accept-Encoding，使代理服务器根据请求头中的 Accept-Encoding 识别是否启用 gzip 压缩</span><br><span class="line">// 配置成功后，HTTP 响应头 Content-Encoding 为 gzip 类型，或使用 gzip 在线检测网页查看。</span><br><span class="line">http &#123;</span><br><span class="line">    .....</span><br><span class="line">    gzip on;</span><br><span class="line">    gzip_types text/plain application/javascript text/css;</span><br><span class="line">    .....</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="5-6、负载均衡"><a href="#5-6、负载均衡" class="headerlink" title="5.6、负载均衡"></a>5.6、负载均衡</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">upstream webservers &#123;</span><br><span class="line">    server 172.18.144.23:4789 weight=10;</span><br><span class="line">    server 172.18.144.23:5789 weight=10;</span><br><span class="line">&#125;</span><br><span class="line">server &#123;</span><br><span class="line">    listen 8000;</span><br><span class="line">    location / &#123;</span><br><span class="line">        proxy_pass http://myapp1;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="5-7、获取真实-IP"><a href="#5-7、获取真实-IP" class="headerlink" title="5.7、获取真实 IP"></a>5.7、获取真实 IP</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">  listen 80;</span><br><span class="line">  server_name bbs.expressjiaocheng.com;</span><br><span class="line">  #charset koi8-r;</span><br><span class="line">  #access_log /var/log/nginx/host.access.log main;</span><br><span class="line">  location / &#123;</span><br><span class="line">    #设置主机头和客户端真实地址，以便服务器获取客户端真实 IP</span><br><span class="line">    proxy_set_header X-Real-IP $remote_addr;</span><br><span class="line">    proxy_set_header X-Forward-For $proxy_add_x_forwarded_for;</span><br><span class="line">    proxy_set_header Host $http_host;</span><br><span class="line">    proxy_set_header X-Nginx-Proxy true;</span><br><span class="line">    #禁用缓存</span><br><span class="line">    proxy_buffering off;</span><br><span class="line">    proxy_pass http://bakeaaa;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="5-8、spa-刷新设置及二级目录"><a href="#5-8、spa-刷新设置及二级目录" class="headerlink" title="5.8、spa 刷新设置及二级目录"></a>5.8、spa 刷新设置及二级目录</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">  listen 8000;</span><br><span class="line">  server_name localhost;</span><br><span class="line"> </span><br><span class="line">  location /dianping &#123;</span><br><span class="line">    root /usr/local/var/web;</span><br><span class="line">    index index.html;</span><br><span class="line">    try_files $uri /dianping/index.html;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  location /mock &#123;</span><br><span class="line">    root /usr/local/var/web/dianping;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="5-9、https-设置"><a href="#5-9、https-设置" class="headerlink" title="5.9、https 设置"></a>5.9、https 设置</h4><p>相应 https 配置信息及文件需要去云服务器商去配置获取，具体信息见 <a href="/note/net/https/">网络之 https 协议</a><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">  listen 80;</span><br><span class="line">  server_name coupon.master-ss.cn;</span><br><span class="line">  rewrite ^(.*) https://$host$1 permanent;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">server &#123;</span><br><span class="line">  listen 443;</span><br><span class="line">  server_name coupon.master-ss.cn;</span><br><span class="line">  ssl on;</span><br><span class="line">  ssl_certificate /etc/nginx/conf.d/ssl/1_coupon.master-ss.cn_bundle.crt;</span><br><span class="line">  ssl_certificate_key /etc/nginx/conf.d/ssl/2_coupon.master-ss.cn.key;</span><br><span class="line">  ssl_session_timeout 5m;</span><br><span class="line">  ssl_protocols TLSv1 TLSv1.1 TLSv1.2;</span><br><span class="line">  ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:HIGH:!aNULL:!MD5:!RC4:!DHE;#按照这个套件配置</span><br><span class="line">  ssl_prefer_server_ciphers on;</span><br><span class="line">  </span><br><span class="line">  location / &#123;</span><br><span class="line">    proxy_set_header X-Real-IP $remote_addr;</span><br><span class="line">    proxy_set_header X-Forward-For $proxy_add_x_forwarded_for;</span><br><span class="line">    proxy_set_header Host $http_host;</span><br><span class="line">    proxy_set_header X-Nginx-Proxy true;</span><br><span class="line">   </span><br><span class="line">    proxy_pass http://127.0.0.1:3001; </span><br><span class="line">    proxy_redirect off;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h4 id="5-10、案例"><a href="#5-10、案例" class="headerlink" title="5.10、案例"></a>5.10、案例</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">upstream contentact_proxy &#123;</span><br><span class="line">  server 192.168.31.88:5697 max_fails=3 fail_timeout=5s;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">location ~ ^/gzact/copyright/(.*)$ &#123;  </span><br><span class="line">  if ($http_user_agent ~* &quot;(android|bb\d+|meego).+mobile|avantgo|bada\/|blackberry|blazer|compal|elaine|fennec|hiptop|iemobile|ip(hone|od)|iris|kindle|lge |maemo|midp|mmp|mobile.+firefox|netfront|opera m(ob|in)i|palm( os)?|phone|p(ixi|re)\/|plucker|pocket|psp|series(4|6)0|symbian|treo|up\.(browser|link)|vodafone|wap|windows ce|xda|xiino&quot;) &#123;</span><br><span class="line">    set $mobile_rewrite &quot;wap&quot;;</span><br><span class="line">  &#125;</span><br><span class="line">  if ($mobile_rewrite != &quot;wap&quot;) &#123; </span><br><span class="line">    rewrite ^(/gzact/copyright)/(.*)  /gzact/copyright/pc/$2 break; </span><br><span class="line">    proxy_pass http://contentact_proxy;</span><br><span class="line">  &#125;</span><br><span class="line">  if ($mobile_rewrite = &quot;wap&quot;) &#123; </span><br><span class="line">    rewrite ^(/gzact/copyright)/(.*)  /gzact/copyright/wap/$2 break; </span><br><span class="line">    proxy_pass http://contentact_proxy;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">    </span><br><span class="line">location ~ ^/gzact/(.*)\.(gif|jpg|jpeg|png|bmp|swf|ico)$ &#123;</span><br><span class="line">  access_log off;</span><br><span class="line">  proxy_pass http://contentact_proxy;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">location ~ ^/gzact/(.*)\.(js|css)$ &#123;</span><br><span class="line">  access_log off;</span><br><span class="line">  proxy_pass http://contentact_proxy;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Nginx 是一个高性能的 HTTP 和反向代理 web 服务器，这次来系统总结下 nginx。&lt;br&gt;
    
    </summary>
    
      <category term="note" scheme="http://blog.master-ss.cn/categories/note/"/>
    
    
  </entry>
  
  <entry>
    <title>redis 简介</title>
    <link href="http://blog.master-ss.cn/note/redis/index/"/>
    <id>http://blog.master-ss.cn/note/redis/index/</id>
    <published>2019-11-04T03:45:41.738Z</published>
    <updated>2019-11-05T06:40:31.033Z</updated>
    
    <content type="html"><![CDATA[<p>Redis 是使用 C 语言开发的一个高性能键值数据库。Redis 可以通过一些键值类型来存储数据，键值类型： String字符类型、Map散列类型、 List列表类型、Set集合类型、Sortedset有序集合类型<br><a id="more"></a></p><h3 id="一、应用场景"><a href="#一、应用场景" class="headerlink" title="一、应用场景"></a>一、应用场景</h3><ul><li>缓存，如数据查询、短连接、新闻内容、商品内容等等</li><li>分布式集群架构中的 session 分离</li><li>任务队列，如秒杀、抢购、12306等等</li><li>数据过期处理（可以精确到毫秒）</li></ul><h3 id="二、使用"><a href="#二、使用" class="headerlink" title="二、使用"></a>二、使用</h3><h4 id="2-1、安装"><a href="#2-1、安装" class="headerlink" title="2.1、安装"></a>2.1、安装</h4><ul><li>mac</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 使用 homebrew 快捷安装 --&gt;</span><br><span class="line">brew install redis</span><br><span class="line">brew services start/stop redis</span><br></pre></td></tr></table></figure><ul><li>windows<br>windows 中下载安装就不介绍了，下载链接如下：</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://github.com/MicrosoftArchive/redis/releases</span><br></pre></td></tr></table></figure><ul><li>centos</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 查看软件包信息 --&gt;</span><br><span class="line">yum info redis</span><br><span class="line"></span><br><span class="line">&lt;!-- 安装redis安装包 --&gt;</span><br><span class="line">yum install redis</span><br><span class="line"></span><br><span class="line">&lt;!-- 启动redis --&gt;</span><br><span class="line">systemctl start redis</span><br><span class="line"></span><br><span class="line">&lt;!-- 重启redis --&gt;</span><br><span class="line">systemctl restart redis</span><br><span class="line"></span><br><span class="line">&lt;!-- 设置redis开机启动 --&gt;</span><br><span class="line">systemctl enable redis</span><br></pre></td></tr></table></figure><h4 id="2-2、进入命令行"><a href="#2-2、进入命令行" class="headerlink" title="2.2、进入命令行"></a>2.2、进入命令行</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 输入后回车即进入redis客户端 --&gt;</span><br><span class="line">redis-cli</span><br></pre></td></tr></table></figure><h3 id="三、类型"><a href="#三、类型" class="headerlink" title="三、类型"></a>三、类型</h3><h4 id="3-1、字符串"><a href="#3-1、字符串" class="headerlink" title="3.1、字符串"></a>3.1、字符串</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 查看所有的 key --&gt;</span><br><span class="line">keys *</span><br><span class="line"></span><br><span class="line">&lt;!-- 普通设置 --&gt;</span><br><span class="line">set key value</span><br><span class="line"></span><br><span class="line">&lt;!-- 设置并加过期时间，表示 30 秒后过期 --&gt;</span><br><span class="line">set key value EX 30</span><br><span class="line"></span><br><span class="line">&lt;!-- 获取数据 --&gt;</span><br><span class="line">get key</span><br><span class="line"></span><br><span class="line">&lt;!-- 删除指定数据 --&gt;</span><br><span class="line">del key</span><br><span class="line"></span><br><span class="line">&lt;!-- 删除全部数据 --&gt;</span><br><span class="line">flushall</span><br><span class="line"></span><br><span class="line">&lt;!-- 查看类型 --&gt;</span><br><span class="line">type key</span><br><span class="line"></span><br><span class="line">&lt;!-- 设置过期时间，表示指定的 key 20 秒后过期 --&gt;</span><br><span class="line">expire key 20</span><br></pre></td></tr></table></figure><h4 id="3-2、列表"><a href="#3-2、列表" class="headerlink" title="3.2、列表"></a>3.2、列表</h4><p>Redis 列表是简单的字符串列表，按照插入顺序排序，你可以添加一个元素到列表的头部(左边)或者尾部(右边)<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 列表右侧增加值 --&gt;</span><br><span class="line">rpush key value</span><br><span class="line"></span><br><span class="line">&lt;!-- 列表左侧增加值 --&gt;</span><br><span class="line">lpush key value</span><br><span class="line"></span><br><span class="line">&lt;!-- 右侧删除值 --&gt;</span><br><span class="line">rpop key</span><br><span class="line"></span><br><span class="line">&lt;!-- 左侧删除值 --&gt;</span><br><span class="line">lpop key</span><br><span class="line"></span><br><span class="line">&lt;!-- 获取数据，索引可以是负数，如：“-1”代表最后边的一个元素 --&gt;</span><br><span class="line">lrange key start stop</span><br><span class="line"></span><br><span class="line">&lt;!-- 删除指定数据 --&gt;</span><br><span class="line">del key</span><br><span class="line"></span><br><span class="line">&lt;!-- 删除全部数据 --&gt;</span><br><span class="line">flushall</span><br><span class="line"></span><br><span class="line">&lt;!-- 查看类型 --&gt;</span><br><span class="line">type key</span><br></pre></td></tr></table></figure></p><h4 id="3-3、集合"><a href="#3-3、集合" class="headerlink" title="3.3、集合"></a>3.3、集合</h4><p>Redis 的 Set 是 String 类型的无序集合。集合成员是唯一的，这就意味着集合中不能出现重复的数据，它和列表的最主要区别就是没法增加重复值<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 给集合增数据 --&gt;</span><br><span class="line">sadd key value</span><br><span class="line"></span><br><span class="line">&lt;!-- 删除集合中的一个值 --&gt;</span><br><span class="line">srem key value</span><br><span class="line"></span><br><span class="line">&lt;!-- 获取数据 --&gt;</span><br><span class="line">smembers key</span><br><span class="line"></span><br><span class="line">&lt;!-- 删除指定数据 --&gt;</span><br><span class="line">del key</span><br><span class="line"></span><br><span class="line">&lt;!-- 删除全部数据 --&gt;</span><br><span class="line">flushall</span><br></pre></td></tr></table></figure></p><h4 id="3-4、哈希"><a href="#3-4、哈希" class="headerlink" title="3.4、哈希"></a>3.4、哈希</h4><p>hash 是一个 string 类型的 field 和 value 的映射表，hash 特别适合用于存储对象<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 设置值 hmset --&gt;</span><br><span class="line">hmset zhangsan name &quot;张三&quot; age 20 sex &quot;男&quot;</span><br><span class="line"></span><br><span class="line">&lt;!-- 设置值 hset --&gt;</span><br><span class="line">hset zhangsan name &quot;张三&quot;</span><br><span class="line"></span><br><span class="line">&lt;!-- 获取数据 --&gt;</span><br><span class="line">hgetall key</span><br><span class="line"></span><br><span class="line">&lt;!-- 删除指定数据 --&gt;</span><br><span class="line">del key</span><br><span class="line"></span><br><span class="line">&lt;!-- 删除全部数据 --&gt;</span><br><span class="line">flushall</span><br></pre></td></tr></table></figure></p><h3 id="四、订阅发布"><a href="#四、订阅发布" class="headerlink" title="四、订阅发布"></a>四、订阅发布</h3><p>Redis 发布订阅（pub/sub）是一种消息通信模式：发送者（pub）发送消息，订阅者（sub）接收消息。 Redis 客户端可以订阅任意数量的频道。<br>下图展示了频道 channel1 ， 以及订阅这个频道的三个客户端 —— client2 、 client5 和 client1 之间的关系：<br><img src="/assets/note/redis/subscribe.png"><br>当有新消息通过 PUBLISH 命令发送给频道 channel1 时， 这个消息就会被发送给订阅它的三个客户端：<br><img src="/assets/note/redis/publish.png"></p><p>代码示例如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 发布 --&gt;</span><br><span class="line">var redis = require(&apos;redis&apos;);</span><br><span class="line">var client = redis.createClient(6379, &apos;localhost&apos;);</span><br><span class="line">client.publish(&apos;testPublish&apos;, &apos;message from publish.js&apos;);</span><br><span class="line"></span><br><span class="line">&lt;!-- 订阅 --&gt;</span><br><span class="line">client.subscribe(&apos;testPublish&apos;);</span><br><span class="line">client.on(&apos;message&apos;, function(channel, msg) &#123;</span><br><span class="line">  console.log(&apos;client.on message, channel:&apos;, channel, &apos; message:&apos;, msg);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p><h3 id="五、设置密码"><a href="#五、设置密码" class="headerlink" title="五、设置密码"></a>五、设置密码</h3><h4 id="5-1、临时设置"><a href="#5-1、临时设置" class="headerlink" title="5.1、临时设置"></a>5.1、临时设置</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 进入命令行 --&gt;</span><br><span class="line">redis-cli</span><br><span class="line"></span><br><span class="line">&lt;!-- 查看当前是否设置密码 --&gt;</span><br><span class="line">config get requirepass</span><br><span class="line">&lt;!-- 返回，第二行为密码 --&gt;</span><br><span class="line">1) &quot;requirepass&quot;</span><br><span class="line">2) &quot;&quot;</span><br><span class="line"></span><br><span class="line">&lt;!-- 设置密码 --&gt;</span><br><span class="line">config set requirepass xxx</span><br></pre></td></tr></table></figure><h4 id="5-2、永久设置"><a href="#5-2、永久设置" class="headerlink" title="5.2、永久设置"></a>5.2、永久设置</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- max 上查看配置文件路径，为 /usr/local/etc/redis.conf --&gt;</span><br><span class="line">brew info redis</span><br><span class="line"></span><br><span class="line">&lt;!-- centos 上查看配置文件路径，为 /etc/redis.conf --&gt;</span><br><span class="line">whereis redis</span><br><span class="line"></span><br><span class="line">&lt;!-- 修改配置文件 --&gt;</span><br><span class="line"># requirepass foobared</span><br><span class="line">requirepass xxx</span><br></pre></td></tr></table></figure><p>保存后重启 redis 即可</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Redis 是使用 C 语言开发的一个高性能键值数据库。Redis 可以通过一些键值类型来存储数据，键值类型： String字符类型、Map散列类型、 List列表类型、Set集合类型、Sortedset有序集合类型&lt;br&gt;
    
    </summary>
    
      <category term="note" scheme="http://blog.master-ss.cn/categories/note/"/>
    
    
  </entry>
  
  <entry>
    <title>Linux 之软件安装</title>
    <link href="http://blog.master-ss.cn/note/linux/install/"/>
    <id>http://blog.master-ss.cn/note/linux/install/</id>
    <published>2019-11-03T09:03:22.361Z</published>
    <updated>2019-11-04T02:23:48.858Z</updated>
    
    <content type="html"><![CDATA[<p>以 Centos 为标准，这章说软件安装。<br><a id="more"></a></p><h3 id="一、软件管理器"><a href="#一、软件管理器" class="headerlink" title="一、软件管理器"></a>一、软件管理器</h3><ul><li>rpm<br>全名“RedHat Package Manager”，简称 RPM，以数据库记录的方式将所需要的软件安装到 Linux 系统。最大特点是将要安装的软件先编译过，并且打包成 RPM 机制的安装包，通过软件里头默认的数据库记录要安装的时候必须具备的依赖属性软件。</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">rpm -ivh package_name</span><br><span class="line">-i：install 的意思</span><br><span class="line">-v：查看更详细的安装信息画面</span><br><span class="line">-h：以安装信息栏显示安装进度</span><br><span class="line"></span><br><span class="line">&lt;!--安装 rp-pppoe-3.5-32.1.i386.rpm--&gt;</span><br><span class="line">rpm -ivh rp-pppoe-3.5-32.1.i386.rpm</span><br><span class="line"></span><br><span class="line">&lt;!--直接由网络上面的某个档案安装，以网址来安装--&gt;</span><br><span class="line">rpm -ivh http://website.name/path/pkgname.rpm</span><br><span class="line"></span><br><span class="line">&lt;!--列出所有的，已经安装在本机 Linux 系统上面的所有软件名称--&gt;</span><br><span class="line">rpm -qa</span><br><span class="line"></span><br><span class="line">&lt;!--仅查询，后面接的软件名称是否有安装--&gt;</span><br><span class="line">rpm -q 软件名称</span><br><span class="line"></span><br><span class="line">&lt;!--httpd 表示要卸载的软件包--&gt;</span><br><span class="line">rpm -e httpd</span><br></pre></td></tr></table></figure><ul><li>yum：rpm 属性依赖解决方式<br>依赖属性的软件列表，在有要安装软件需求的时候先到列表去找，同时与系统内已安装的软件相比较，没安装到的依赖软件就一口气同时安装起来，这就是 YUM 机制的由来。<br>想要使用 yum 功能，必须先找到适合的 yum server 才行，而每个 yum server 可能都会提供不同的软件功能</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">&lt;!--yum 搜索 rpm 包--&gt;</span><br><span class="line">yum search 名称</span><br><span class="line"></span><br><span class="line">&lt;!--yum 显示 rpm 包信息--&gt;</span><br><span class="line">yum info package1</span><br><span class="line"></span><br><span class="line">&lt;!--yum 查看 rpm 包--&gt;</span><br><span class="line">yum list</span><br><span class="line">yum list | grep httpd</span><br><span class="line">&lt;!--列出所有可更新的软件包--&gt;</span><br><span class="line">yum list updates</span><br><span class="line">&lt;!--列出所有已安装的软件包--&gt;</span><br><span class="line">yum list installed</span><br><span class="line"></span><br><span class="line">&lt;!--yum 卸载 rpm 包--&gt;</span><br><span class="line">yum [-y] remove wget</span><br><span class="line">-y：当 yum 要等用户输入时，自动提供 yes 的响应</span><br><span class="line"></span><br><span class="line">&lt;!--yum 安装 rpm 包--&gt;</span><br><span class="line">yum [-y] install unzip zip</span><br><span class="line"></span><br><span class="line">&lt;!--后面接要升级的软件，若要整个系统都升级，直接 update 即可--&gt;</span><br><span class="line">yum [-y] update [软件名]</span><br></pre></td></tr></table></figure><ul><li>yum 的设置文件</li></ul><p><code>ll /etc/yum.repos.d/</code>返回相关文件信息，然后动态设置部分软件的 yum 的镜像站点<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">total 44</span><br><span class="line">-rw-r--r--. 1 root root  614 Oct 25  2018 CentOS-Base.repo</span><br><span class="line">-rw-r--r--  1 root root 1309 Oct  8  2018 CentOS-CR.repo</span><br><span class="line">-rw-r--r--  1 root root  649 Oct  8  2018 CentOS-Debuginfo.repo</span><br><span class="line">-rw-r--r--  1 root root  230 Oct 25  2018 CentOS-Epel.repo</span><br><span class="line">-rw-r--r--  1 root root  314 Oct  8  2018 CentOS-fasttrack.repo</span><br><span class="line">-rw-r--r--  1 root root  630 Oct  8  2018 CentOS-Media.repo</span><br><span class="line">-rw-r--r--  1 root root 1331 Oct  8  2018 CentOS-Sources.repo</span><br><span class="line">-rw-r--r--  1 root root 4768 Oct  8  2018 CentOS-Vault.repo</span><br><span class="line">-rw-r--r--  1 root root  196 Oct 31  2018 mongodb.repo</span><br><span class="line">-rw-r--r--  1 root root   99 Jan  4  2019 nginx.repo</span><br></pre></td></tr></table></figure></p><h3 id="二、源码与-Tarball"><a href="#二、源码与-Tarball" class="headerlink" title="二、源码与 Tarball"></a>二、源码与 Tarball</h3><ul><li><p>make<br>执行时在当前目录下搜索 Makefile 文本文件，这个文件记录了源码如何编译，make 自动判别源码是否经过变动而自动更新执行文件</p></li><li><p>源代码（C语言）如何编译安装</p></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&lt;!--先安装源代码编译的软件 gcc，make，openssl--&gt;</span><br><span class="line">yum install -y gcc make gcc-c++ openssl-devel</span><br><span class="line"></span><br><span class="line">&lt;!--检查系统中是否已经安装 gcc--&gt;</span><br><span class="line">rpm -qa | grep gcc / rpm -ql gcc</span><br><span class="line"></span><br><span class="line">&lt;!--1.生成编译配置文件(Makefile)--&gt;</span><br><span class="line">&lt;!--2.开始编译(make)--&gt;</span><br><span class="line">&lt;!--3.开始安装(make install)--&gt;</span><br><span class="line">安装 httpd-2.2.9.tar.gz 源代码:</span><br><span class="line">1) 减压并 cd 到对应目录</span><br><span class="line">2) ./configure --prefix=/usr/local/apache（安装路径设置为/usr/local/apache）</span><br><span class="line">3) make / make -j4</span><br><span class="line">4) make install</span><br></pre></td></tr></table></figure><ul><li>卸载源代码安装的软件</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 1、结束进程，pkill 与 killall 差不多 --&gt;</span><br><span class="line">pstree | grep httpd</span><br><span class="line">pkill httpd</span><br><span class="line">&lt;!-- 2、删除源代码 --&gt;</span><br><span class="line">cd /usr/local/</span><br><span class="line">直接删除源代码</span><br><span class="line">rm -rf apache/</span><br></pre></td></tr></table></figure><ul><li>源代码安装 nodejs</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">1、 下载 nodejs 源码包</span><br><span class="line">2、 减压到 usr/local/nodejs 目录</span><br><span class="line">3、 ./configure</span><br><span class="line">4、 make / make -j4</span><br><span class="line">5、 make install</span><br></pre></td></tr></table></figure><ul><li>源代码安装 Apache</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">1.减压 httpd-2.2.9.tar.gz 到对应目录</span><br><span class="line">2、 ./configure 编译</span><br><span class="line">./configure --prefix=/usr/local/apache2/ --sysconfdir=/usr/local/apache2/etc/ --with-included-apr --enable-dav --enable-so --enable-deflate=shared --enable-expires=shared</span><br><span class="line">--enable-rewrite=shared</span><br><span class="line">3、make</span><br><span class="line">4、make install</span><br><span class="line">&lt;!--启动 Apache 测试:--&gt;</span><br><span class="line">/usr/local/apache2/bin/apachectl restart</span><br><span class="line">&lt;!--查看进程:--&gt;</span><br><span class="line">ps -le | grep httpd</span><br></pre></td></tr></table></figure><ul><li>二进制安装配置 nodejs<br>二进制包里面包括了已经经过编译，可以马上运行的程序，所以二进制包的安装只需要丢到一个目录里面</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">wget https://nodejs.org/dist/v8.9.3/node-v8.9.3-linux-x64.tar.xz</span><br><span class="line"></span><br><span class="line">xz -d node-v8.9.3-linux-x64.tar.xz</span><br><span class="line">tar -xvf node-v8.9.3-linux-x64.tar</span><br><span class="line"></span><br><span class="line">mv node-v8.9.3-linux-x64 /usr/local/nodejs</span><br><span class="line"></span><br><span class="line">&lt;!--配置环境变量--&gt;</span><br><span class="line">vi /etc/profile</span><br><span class="line"></span><br><span class="line">&lt;!--最后面添加:--&gt;</span><br><span class="line">export NODE_HOME=/usr/local/nodejs/bin</span><br><span class="line">export PATH=$NODE_HOME:$PATH</span><br><span class="line"></span><br><span class="line">&lt;!--:wq 保存，然后运行--&gt;</span><br><span class="line">source /etc/profile</span><br><span class="line"></span><br><span class="line">&lt;!--用 node -v 和 npm -v 来检查下:--&gt;</span><br><span class="line">node -v</span><br><span class="line"></span><br><span class="line">&lt;!--查看环境变量是否生效--&gt;</span><br><span class="line">echo $PATH</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;以 Centos 为标准，这章说软件安装。&lt;br&gt;
    
    </summary>
    
      <category term="note" scheme="http://blog.master-ss.cn/categories/note/"/>
    
    
  </entry>
  
  <entry>
    <title>Linux 之进程管理</title>
    <link href="http://blog.master-ss.cn/note/linux/process/"/>
    <id>http://blog.master-ss.cn/note/linux/process/</id>
    <published>2019-11-03T08:42:38.285Z</published>
    <updated>2019-11-04T02:16:55.720Z</updated>
    
    <content type="html"><![CDATA[<p>以 Centos 为标准，这章说进程管理。<br><a id="more"></a></p><h3 id="一、基础"><a href="#一、基础" class="headerlink" title="一、基础"></a>一、基础</h3><h4 id="1-1、概念"><a href="#1-1、概念" class="headerlink" title="1.1、概念"></a>1.1、概念</h4><ul><li>程序：通常为二进制程序放置存储媒介中，以物理文件的形式存在</li><li>进程：程序被触发后，执行者的权限与属性、程序的代码与所需数据等都会被加载到内存中，可以说进程就是一个正在进行中的程序</li><li>系统服务：常驻内存的进程，被称为服务</li></ul><h4 id="1-2、命令执行的判断依据"><a href="#1-2、命令执行的判断依据" class="headerlink" title="1.2、命令执行的判断依据"></a>1.2、命令执行的判断依据</h4><ul><li><code>;</code> 不考虑命令相关性的连续命令执行</li><li><code>&amp;&amp;</code> 前面执行正确才继续执行</li><li><code>||</code> 前面执行错误才继续执行</li></ul><h3 id="二、工作管理"><a href="#二、工作管理" class="headerlink" title="二、工作管理"></a>二、工作管理</h3><ul><li>&amp;：直接将命令丢到后台中“执行”</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;!--由于没有加上数据流重定向，所以会影响界面，不会影响前台的操作--&gt;</span><br><span class="line">tar -zpcf /tmp/etc.tar.gz /etc &amp;</span><br><span class="line"></span><br><span class="line">&lt;!--利用数据流重定向，将输出数据传送至某个文件中，2&gt;&amp;1 表示将错误重定向到标准输出上--&gt;</span><br><span class="line">tar -zpcvf /tmp/etc.tar.gz /etc &gt; /tmp/log.txt 2&gt;&amp;1 &amp;</span><br></pre></td></tr></table></figure><ul><li>kill：管理后台当中的工作</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;!--列出目前kill能够使用的信号--&gt;</span><br><span class="line">kill -l</span><br><span class="line"></span><br><span class="line">kill -signal %jobnumber</span><br><span class="line">-1：重新读取一次参数的配置文件</span><br><span class="line">-9：立刻强制删除一个工作</span><br><span class="line">-15：以正常的程序方式终止一项工作，与 -9 是不一样的</span><br></pre></td></tr></table></figure><ul><li>killAll：删除某个服务，基本同 pkill</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;!--将系统中以某个命令名称启动的进程全部删除--&gt;</span><br><span class="line">killAll -signal 命令名称</span><br></pre></td></tr></table></figure><ul><li>nohup 脱机管理</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;!--终端机前台中工作--&gt;</span><br><span class="line">nohup [命令与参数]</span><br><span class="line"></span><br><span class="line">&lt;!--终端机后台中工作--&gt;</span><br><span class="line">nohup [命令与参数] &amp;</span><br></pre></td></tr></table></figure><h3 id="三、进程管理"><a href="#三、进程管理" class="headerlink" title="三、进程管理"></a>三、进程管理</h3><ul><li>ps 将某个时间点的进程运行情况选取下来</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;!--查看系统所有的进程数据，以 PID 顺序排列--&gt;</span><br><span class="line">ps aux</span><br><span class="line">-a：显示现行终端机下的所有程序，包括其他用户的程序</span><br><span class="line">-u：显示所有程序，不以终端机区分</span><br><span class="line">-x：以用户为主的格式显示程序状况，通常与 a 参数一起使用，可列出较完整信息</span><br><span class="line"></span><br><span class="line"> ps -aux | grep nginx</span><br><span class="line"> &lt;!--各字段意义分别为：进程用户账号、进程标识符PID、使用CPU百分比、物理内存百分比、虚拟内存使用量KB、占用固定内存量KB、哪个终端机运行，与终端机无关则显示？、进程目前状态、进程被触发启动时间、使用CPU运行时间、进程实际命令--&gt;</span><br><span class="line"> nginx     2778  0.0  0.4  50208  4196 ?        S    Oct15   0:10 nginx: worker process</span><br></pre></td></tr></table></figure><ul><li>pstree 查看进程树</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;!--显示所有信息--&gt;</span><br><span class="line">pstree -ap</span><br><span class="line">-a：各进程树之间的连接以 ASCII 字符来连接</span><br><span class="line">-p：列出每个进行的PID</span><br><span class="line"></span><br><span class="line">pstree | grep httpd</span><br><span class="line">pstree -ap | grep httpd</span><br></pre></td></tr></table></figure><ul><li>top 动态查看进程的变化</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">&lt;!--相对于 ps 选取一个时间点的进程状态，top 可以持续监测进程运行的状态--&gt;</span><br><span class="line">top [-d 数字] | [-p pid]</span><br><span class="line">-d：后面可以接秒数，就是进程界面更新的秒数，默认是5秒</span><br><span class="line">-p：指定某个PID来进行查看检测</span><br><span class="line"></span><br><span class="line">&lt;!--第一行依次对应:系统当前时间 up 系统到目前为止 i 运行的时间， 当前登陆系统的用户数量， load average 后 面的三个数字分别表示距离现在一分钟，五分钟，十五分钟的负载情况--&gt;</span><br><span class="line">&lt;!--这三个负载即分别表示系统在过去1分钟、5分钟、15分钟内运行进程队列中的平均进程数量--&gt;</span><br><span class="line">top - 14:29:34 up 372 days,  3:54,  1 user,  load average: 0.04, 0.07, 0.06</span><br><span class="line"></span><br><span class="line">&lt;!--第二行依次对应:tasks 表示任务(进程)，78 total 则表示现在有 78 个进程，其中处于运行中 的有 1 个，77 个在休眠(挂起)，stopped 状态即停止的进程数为 0，zombie 状态即僵尸 的进程数为 0 个。--&gt;</span><br><span class="line">Tasks:  78 total,   1 running,  77 sleeping,   0 stopped,   0 zombie</span><br><span class="line"></span><br><span class="line">&lt;!--第三行只看空闲就可以了:cpu 空闲率为 99.0%--&gt;</span><br><span class="line">%Cpu(s):  0.7 us,  0.3 sy,  0.0 ni, 99.0 id,  0.0 wa,  0.0 hi,  0.0 si,  0.0 st</span><br><span class="line"></span><br><span class="line">&lt;!--第四行依次对应：总内存:0.969g 空闲:82348/1024/1024=0.0785g，已经使用0.5g，缓存区0.39g--&gt;</span><br><span class="line">&lt;!--缓冲区是从主内存中特地预留出的内存，用来存放特定的一些信息，例如从磁盘中取得的文件表，程序正在读取的内容等等--&gt;</span><br><span class="line">KiB Mem :  1016380 total,    82348 free,   523948 used,   410084 buff/cache</span><br><span class="line"></span><br><span class="line">&lt;!--第七行依次对应：进程 id、进程所有者、进程优先级、nice 值，负值表示高优先级，正值表示低优先级、进程使用的虚拟内存总量，单位 kb，VIRT=SWAP+RES、进程使用的、未被换出的物理内存大小，单位 kb，RES=CODE+DATA、共享内存大小，单位 kb、进程状态，D=不可中断的睡眠状态 R=运行 S=睡眠 T=跟踪/停止 Z=僵尸进程、上次更新到现在的 CPU 时间占用百分比、进程使用的物理内存百分比、进程使用的 CPU 时间总计，单位 1/100 秒、进程名称(命令名/命令行)--&gt;</span><br><span class="line">PID USER      PR  NI    VIRT    RES    SHR S %CPU %MEM     TIME+ COMMAND</span><br></pre></td></tr></table></figure><h3 id="四、查看系统资源"><a href="#四、查看系统资源" class="headerlink" title="四、查看系统资源"></a>四、查看系统资源</h3><ul><li>free 查看内存使用情况</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&lt;!--显示目前系统的内存总量--&gt;</span><br><span class="line">free [-b|-k|-m|-g]</span><br><span class="line"></span><br><span class="line">free -m</span><br><span class="line">              total        used        free      shared  buff/cache   available</span><br><span class="line">Mem:            992         509          86           0         396         292</span><br><span class="line">Swap:             0           0           0</span><br><span class="line">total 系统总的可用物理内存大小</span><br><span class="line">used 已被使用的物理内存大小</span><br><span class="line">free 还有多少物理内存可用</span><br><span class="line">shared 被共享使用的物理内存大小</span><br><span class="line">buff/cache 被 buffer 和 cache 使用的物理内存大小</span><br><span class="line">available 还可以被&quot;应用程序&quot;使用的物理内存大小，程序认为的</span><br><span class="line">系统很有效率地将所有内存用光，目的是为了让系统的访问性能加速</span><br></pre></td></tr></table></figure><ul><li>netstat 跟踪网络</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;!--常用在网络监控--&gt;</span><br><span class="line">netstat -tunpl | grep httpd</span><br><span class="line">-a：将目前系统上所有的连接、监听、Socket 数据都列出来</span><br><span class="line">-t：显示 TCP 传输协议的连线状况</span><br><span class="line">-u：显示 UDP 传输协议的连线状况</span><br><span class="line">-n：直接使用 IP 地址，而不通过域名服务器</span><br><span class="line">-p：显示正在使用 Socket 的程序识别码和程序名称</span><br><span class="line">-l：显示监控中的服务器的 Socket</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;以 Centos 为标准，这章说进程管理。&lt;br&gt;
    
    </summary>
    
      <category term="note" scheme="http://blog.master-ss.cn/categories/note/"/>
    
    
  </entry>
  
  <entry>
    <title>Linux 之文件压缩、编辑与别名管理</title>
    <link href="http://blog.master-ss.cn/note/linux/pack/"/>
    <id>http://blog.master-ss.cn/note/linux/pack/</id>
    <published>2019-11-03T08:21:46.178Z</published>
    <updated>2019-11-10T01:49:47.028Z</updated>
    
    <content type="html"><![CDATA[<p>以 Centos 为标准，这章说文件压缩、编辑与别名管理。<br><a id="more"></a></p><h3 id="一、文件系统的压缩打包"><a href="#一、文件系统的压缩打包" class="headerlink" title="一、文件系统的压缩打包"></a>一、文件系统的压缩打包</h3><ul><li>zip &amp; unzip</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;!--安装 zip 减压软件--&gt;</span><br><span class="line">yum install -y unzip zip</span><br><span class="line"></span><br><span class="line">&lt;!---r：递归，表示将指定的目录下的所有子目录以及文件一起处理--&gt;</span><br><span class="line">zip -r public.zip(压缩包名称) ./public(压缩目录路径)</span><br><span class="line"></span><br><span class="line">unzip ./public.zip(压缩包路径) [-d dir]</span><br></pre></td></tr></table></figure><ul><li>tar</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">&lt;!--制作 gz 包--&gt;</span><br><span class="line">tar czvf public.tar.gz ./public</span><br><span class="line"></span><br><span class="line">&lt;!--解压 gz 包--&gt;</span><br><span class="line">tar xzvf public.tar.gz</span><br><span class="line"></span><br><span class="line">&lt;!--查看 gz 包--&gt;</span><br><span class="line">tar tf public.tar.gz</span><br><span class="line"></span><br><span class="line">&lt;!--制作 tar 包，仅打包，不压缩！--&gt;</span><br><span class="line">tar cvf wwwroot.tar wwwroot</span><br><span class="line"></span><br><span class="line">&lt;!--减压 tar 包--&gt;</span><br><span class="line">tar xvf wwwroot.tar</span><br><span class="line"></span><br><span class="line">特别注意，在参数的下达中，c/x/t 仅能存在一个！不可同时存在！因为不可能同时压缩与解压缩。</span><br><span class="line">-c：建立一个压缩档案的参数指令(create 的意思)</span><br><span class="line">-x：解开一个压缩档案的参数指令</span><br><span class="line">-t：查看 tarfile 里面的文件</span><br><span class="line"></span><br><span class="line">-z：是否同时具有 gzip 的属性？亦即是否需要用 gzip 压缩？</span><br><span class="line">-j：是否同时具有 bzip2 的属性？亦即是否需要用 bzip2 压缩？</span><br><span class="line">-v：压缩的过程中显示档案！这个常用，但不建议用在背景执行过程！</span><br><span class="line">-f：使用文件名，请留意，在 f 之后要立即接文件名喔！不要再加参数！</span><br></pre></td></tr></table></figure><h3 id="二、vi-vim-快速入门"><a href="#二、vi-vim-快速入门" class="headerlink" title="二、vi/vim 快速入门"></a>二、vi/vim 快速入门</h3><p>vi 是 Unix 和类 Unix 环境下的可用于创建文件的屏幕编辑器。vi 有两种工作模式：命令模式和文本输入模式。vim 是 vi 的升级版本，它不仅兼容 vi 的所有指令，而且还有一些新的特性在里面。</p><p>vi 命令模式：<br>默认编辑一个文件的时候第一次进入的就是命令模式，vi 从命令模式切换到文本输入模式可以在键盘上面按(i 或者 I 或者 a 或者 A 或者 O 或者 o)，按[ESC]键使 vi 从文本输入模式回到命令模式。按 [/] 键并输入文本即可在命令模式下查询该文本出现位置，按 [n] 键表示聚焦下个匹配项。<br><img src="/assets/note/linux/vi1.png"></p><p>退出 vi 命令模式：<br><img src="/assets/note/linux/vi2.png"></p><p>命令模式下面文本修改键：<br><img src="/assets/note/linux/vi3.png"><br><img src="/assets/note/linux/vi4.png"></p><h3 id="三、命名别名设置"><a href="#三、命名别名设置" class="headerlink" title="三、命名别名设置"></a>三、命名别名设置</h3><ul><li>alias（仅在当前终端有效）</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- alias 后面加 &#123;&quot;别名&quot;=&apos;命令参数...&apos;&#125;，如： --&gt;</span><br><span class="line">alias ll=&apos;ls -l&apos;</span><br><span class="line"></span><br><span class="line">&lt;!--查看目前所有的命名别名--&gt;</span><br><span class="line">alias</span><br></pre></td></tr></table></figure><ul><li>unalias（仅在当前终端有效）</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;!--取消别名--&gt;</span><br><span class="line">unalias ll</span><br></pre></td></tr></table></figure><h3 id="四、环境变量设置别名"><a href="#四、环境变量设置别名" class="headerlink" title="四、环境变量设置别名"></a>四、环境变量设置别名</h3><ul><li><code>/etc/profile</code> 和 <code>/etc/bashrc</code> 是 系统整体的设置，最好不要修改</li><li><code>~/.bash_history</code> 记录之前输入命令</li><li><code>~/.bash_logout</code> 退出时执行的命令</li><li><code>~/.bash_profile</code> 登入shell时执行</li><li><code>~/.bashrc</code> 非登入shell，一般被显式 <code>~/.bash_profile</code> 调用</li><li>source 读入环境配置文件，使其生效，而不必重启</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;!--source 配置文件名--&gt;</span><br><span class="line">source ~/.bashrc</span><br><span class="line"></span><br><span class="line">&lt;!-- 比如可在 `~/.bash_profile` 文件编辑添加配置文件使别名永久生效 --&gt;</span><br><span class="line"># User specific aliases and functions</span><br><span class="line">alias ll=&apos;ls -l&apos;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;以 Centos 为标准，这章说文件压缩、编辑与别名管理。&lt;br&gt;
    
    </summary>
    
      <category term="note" scheme="http://blog.master-ss.cn/categories/note/"/>
    
    
  </entry>
  
  <entry>
    <title>Linux 之用户管理与文件权限</title>
    <link href="http://blog.master-ss.cn/note/linux/auth/"/>
    <id>http://blog.master-ss.cn/note/linux/auth/</id>
    <published>2019-11-03T07:12:05.786Z</published>
    <updated>2019-11-03T07:22:13.332Z</updated>
    
    <content type="html"><![CDATA[<p>以 Centos 为标准，这章说用户管理与文件权限。<br><a id="more"></a></p><h3 id="一、用户管理"><a href="#一、用户管理" class="headerlink" title="一、用户管理"></a>一、用户管理</h3><ul><li>useradd 添加用户</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">useradd lisi</span><br></pre></td></tr></table></figure><ul><li>passwd 设置密码</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;!--后面没有加账号就是改自己的密码--&gt;</span><br><span class="line">passwd lisi</span><br></pre></td></tr></table></figure><ul><li>userdel 删除用户</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;!---r:递归的删除目录下面文件以及子目录下文件--&gt;</span><br><span class="line">userdel -r lisi</span><br></pre></td></tr></table></figure><ul><li>id 查看用户</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">id user</span><br></pre></td></tr></table></figure><ul><li>groups 查看用户组</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;!--有效与支持用户组的查看--&gt;</span><br><span class="line">groups</span><br></pre></td></tr></table></figure><ul><li>groupadd 新增用户组</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;!--新建一个用户组，名为 group1--&gt;</span><br><span class="line">groupadd group1</span><br></pre></td></tr></table></figure><ul><li>groupdel 删除用户组</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;!--删除 mygroup 组，不能删除初始用户组--&gt;</span><br><span class="line">groupdel mygroup</span><br></pre></td></tr></table></figure><ul><li>gpasswd 用户组管理</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;!--把用户 testuser 加入到 root 组，加入组后 testuser 获取到 user 组及 root 组所有权限--&gt;</span><br><span class="line">gpasswd -a testuser root</span><br><span class="line"></span><br><span class="line">&lt;!--移出组--&gt;</span><br><span class="line">gpasswd -d testuser root</span><br></pre></td></tr></table></figure><h3 id="二、用户身份切换"><a href="#二、用户身份切换" class="headerlink" title="二、用户身份切换"></a>二、用户身份切换</h3><ul><li>su 需新切换的用户密码</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;!--切换 root 身份--&gt;</span><br><span class="line">su -</span><br><span class="line"></span><br><span class="line">&lt;!--切换 dmtsai 身份--&gt;</span><br><span class="line">su -l dmtsai</span><br></pre></td></tr></table></figure><ul><li>sudo 仅需要自己的密码</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;!--以 sshd 身份在 /tmp 下新建 mysshd 文件，不设置默认为 root--&gt;</span><br><span class="line">sudo -u sshd touch /tmp/mysshd</span><br><span class="line"></span><br><span class="line">&lt;!--查看当前用户可执行的命令--&gt;</span><br><span class="line">sudo -l</span><br></pre></td></tr></table></figure><ul><li>visudo 为用户添加 sudo 权限</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;!--输入--&gt;</span><br><span class="line">visudo</span><br><span class="line"></span><br><span class="line">&lt;!--编辑--&gt;</span><br><span class="line">%zhangsan ALL=(root) /usr/sbin/useradd</span><br><span class="line">%zhangsan ALL=(root) /usr/sbin/userdel</span><br><span class="line"></span><br><span class="line">&lt;!--用户账号  登陆者来源主机名=（可切换的身份） 可执行的命令--&gt;</span><br><span class="line">&lt;!--在用户账号最左边加上 % 代表后面接的是“用户组”--&gt;</span><br><span class="line">%admin    ALL = (ALL) ALL</span><br></pre></td></tr></table></figure><h3 id="三、文件权限"><a href="#三、文件权限" class="headerlink" title="三、文件权限"></a>三、文件权限</h3><h4 id="3-1、介绍"><a href="#3-1、介绍" class="headerlink" title="3.1、介绍"></a>3.1、介绍</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;!--显示文件与相关属性--&gt;</span><br><span class="line">ls -al</span><br><span class="line"></span><br><span class="line">-rw-r--r--  1 root root   331 Oct 28  2018 server.js</span><br></pre></td></tr></table></figure><p>第一个字符代表文件类型：</p><ul><li><code>d</code>为目录</li><li><code>-</code>为文件</li><li><p><code>l</code>为连接文件</p></li><li><p>接下来的字符串 3 个为一组，均为<code>rwx</code>组合，<code>r</code>代表可读，<code>w</code>代表可写，<code>x</code>代表可执行</p><ul><li>第一组为‘文件所有者的权限’</li><li>第二组为‘同用户组的权限’</li><li>第三组为‘其他非本用户组的权限’</li></ul></li><li>第二列表示有多少个文件名连接到此节点</li><li>第三列表示这个文件的‘所有者账号’</li><li>第四列表示这个文件的所属用户组</li><li>第五列为这个文件的容量大小，默认为B</li><li>第六列为这个文件的创建或最近修改时间</li><li>第七列为该文件名</li></ul><h4 id="3-2、改变文件属性与权限"><a href="#3-2、改变文件属性与权限" class="headerlink" title="3.2、改变文件属性与权限"></a>3.2、改变文件属性与权限</h4><ul><li>chgrp 改变文件所属用户组</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">chgrp [-R] dirname/filename</span><br><span class="line">-R：进行递归更改，即连同子目录下的所有文件、目录都更新成为这个用户组，常用于更新某一目录内所有的文件情况</span><br><span class="line"></span><br><span class="line">如修改用户组为 users</span><br><span class="line">chgrp users install.log</span><br></pre></td></tr></table></figure><ul><li>chown 改变文件所有者</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">chown [-R] 账号名称 文件或目录</span><br><span class="line">chown [-R] 账号名称:组名 文件或目录</span><br><span class="line"></span><br><span class="line">将 install.log 的拥有者改为 bin 这个账号</span><br><span class="line">chown bin install.log</span><br><span class="line"></span><br><span class="line">将 install.log 的拥有者和群组改回为 root</span><br><span class="line">chown root:root install.log</span><br></pre></td></tr></table></figure><ul><li><p>chmod 改变文件的权限<br>文件权限的改变使用的是 chmod 这个指令，但是权限的设置方法有两种， 分别可以使用数字或者<br>符号来进行权限的变更</p><ul><li><p>数字类型改变档案权限<br>r：4<br>w：2<br>x：1</p></li><li><p>符号类型改变档案权限<br>u：user<br>g：group<br>o：others<br>a：all<br>+：加入<br>-：除去<br>=：设置</p></li></ul></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">chmod [-R] xyz 文件或目录</span><br><span class="line">xyz: 就是刚刚提到的数字类型的权限属性，为 rwx 属性数值的相加</span><br><span class="line"></span><br><span class="line">如：将 .bashrc 文件的权限修改为-rw-r--r--</span><br><span class="line">chmod 644 .bashrc</span><br><span class="line"></span><br><span class="line">如：将 .bashrc 文件的权限修改为-rwxr-xr-x</span><br><span class="line">chmod u=rwx,go=rx .bashrc</span><br><span class="line"></span><br><span class="line">如：不知道原先的文件属性，只想增加.bashrc 这个文件的每个人均可写入的权限</span><br><span class="line">chmod a+w .bashrc</span><br></pre></td></tr></table></figure><h4 id="3-3、目录与文件的权限意义"><a href="#3-3、目录与文件的权限意义" class="headerlink" title="3.3、目录与文件的权限意义"></a>3.3、目录与文件的权限意义</h4><ul><li>权限对文件的重要性<ul><li>r：读取文件的实际内容，如读取文本文件的文字内容等</li><li>w：编辑、新增、修改文件内容（不含删除）</li><li>x：具备被系统执行的权限</li></ul></li><li>权限对目录的重要性<ul><li>r：读取目录结构列表</li><li>w：更新目录结构列表的权限，如：新建文件或目录、删除文件或目录（不论该文件的权限）、重命名文件或目录、转移目录内文件或目录位置</li><li>x：代表用户能否进入该目录成为工作目录，所谓工作目录就是你目前所在的目录</li></ul></li></ul><p>要开放目录给任何人浏览时，应该至少也要给予 r 及 x 的权限，但 w 权限不可随便给</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;以 Centos 为标准，这章说用户管理与文件权限。&lt;br&gt;
    
    </summary>
    
      <category term="note" scheme="http://blog.master-ss.cn/categories/note/"/>
    
    
  </entry>
  
  <entry>
    <title>Linux 之文件及目录</title>
    <link href="http://blog.master-ss.cn/note/linux/file/"/>
    <id>http://blog.master-ss.cn/note/linux/file/</id>
    <published>2019-11-03T02:45:26.523Z</published>
    <updated>2019-11-03T08:55:07.685Z</updated>
    
    <content type="html"><![CDATA[<p>这周把 Linux 基础总结了一下，以 Centos 为标准，先说文件和目录这块。<br><a id="more"></a></p><h3 id="一、基础知识"><a href="#一、基础知识" class="headerlink" title="一、基础知识"></a>一、基础知识</h3><h4 id="1-1、shell-命令技巧"><a href="#1-1、shell-命令技巧" class="headerlink" title="1.1、shell 命令技巧"></a>1.1、shell 命令技巧</h4><ul><li>tab 补全<ul><li>如果 1 次 tab 且文件或命令唯一存在，则补全代码</li><li>如果 2 次 tab 则列出所有匹配到的文件或命令</li></ul></li><li>上下键盘查看最近的历史命令</li></ul><h4 id="1-2、目录结构介绍"><a href="#1-2、目录结构介绍" class="headerlink" title="1.2、目录结构介绍"></a>1.2、目录结构介绍</h4><p><img src="/assets/note/linux/construct.png"></p><ul><li>root 目录：linxu 超级权限 root 的主目录</li><li>home 目录：系统默认的用户主目录，如果添加用户是不指定用户的主目录，默认在<code>/home</code><br>下创建与用户同名的文件夹</li><li>bin 目录：存放系统所需要的重要命令，比如文件或目录操作的命令 ls、cp、mkdir 等，另外<code>/usr/bin</code>也放了一些系统命令。这些命令对应着文件都是可以执行的</li><li>sbin 目录：存放只有 root 超级管理员才能执行的程序</li><li>boot 目录：存放着 linux 启动时内核及引导系统程序所需要的核心文件，内核文件和 grub 系统引导管理器都位于此目录</li><li>dev 目录：存放这 linux 系统下的设备文件，如光驱等</li></ul><h3 id="二、目录与路径"><a href="#二、目录与路径" class="headerlink" title="二、目录与路径"></a>二、目录与路径</h3><h4 id="2-1、目录相关操作"><a href="#2-1、目录相关操作" class="headerlink" title="2.1、目录相关操作"></a>2.1、目录相关操作</h4><p>所有的目录下面都会存在两个目录，分别是“.”和“..”<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">.  代表此层目录</span><br><span class="line">.. 代表上一层目录</span><br><span class="line">-  代表前一个工作目录</span><br><span class="line">~  代表“目前用户身份”所在的主文件夹</span><br><span class="line">~account 代表 account 这个用户主文件夹(account 是个账号名称)</span><br></pre></td></tr></table></figure></p><h4 id="2-2、处理目录"><a href="#2-2、处理目录" class="headerlink" title="2.2、处理目录"></a>2.2、处理目录</h4><ul><li>cd: 切换目录</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">cd [相对路径或绝对路径]</span><br><span class="line"></span><br><span class="line">&lt;!--代表去到 vbird 这个用户的主文件夹，即 /home/vbird--&gt;</span><br><span class="line">cd ~vbird</span><br><span class="line"></span><br><span class="line">&lt;!--表示回到自己主文件夹，即 /root 目录--&gt;</span><br><span class="line">cd ~</span><br><span class="line"></span><br><span class="line">&lt;!--没有加上任何路径，也还是代表回到主文件夹--&gt;</span><br><span class="line">cd</span><br><span class="line"></span><br><span class="line">&lt;!--表示去到目前的上层目录，即 /root 的上层目录--&gt;</span><br><span class="line">cd ..</span><br><span class="line"></span><br><span class="line">&lt;!--表示回到刚刚的个目录--&gt;</span><br><span class="line">cd -</span><br><span class="line"></span><br><span class="line">&lt;!--绝对路径--&gt;</span><br><span class="line">cd /var/spool/mail</span><br><span class="line"></span><br><span class="line">&lt;!--相对路径--&gt;</span><br><span class="line">cd ../mqueue</span><br></pre></td></tr></table></figure><ul><li>ls：查看文件与目录<br>当只执行 <code>ls</code> 时，默认显示的是只有非隐藏文件的文件名、以文件名进行排序及文件名代表的颜色显示</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">ls [-adl] 目录名称</span><br><span class="line">a: 全部的档案，连同隐藏文件（开头为 . 的文件）一起列出来</span><br><span class="line">d: 仅列出目录本身，而不是列出目录的文件数据</span><br><span class="line">l: 长数据串，包含文件的属性与权限等数据</span><br></pre></td></tr></table></figure><ul><li>pwd: 显示当前目录</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pwd</span><br></pre></td></tr></table></figure><ul><li>mkdir: 新建新目录</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">mkdir [-mp] 目录名称</span><br><span class="line">&lt;!---m: 配置文件目录权限，直接设定，不需要看默认权限 (umask)--&gt;</span><br><span class="line">&lt;!---p: 帮你直接将所需要的目录(包括上层目录)递归建立--&gt;</span><br><span class="line"></span><br><span class="line">&lt;!--建立名为 test 新目录--&gt;</span><br><span class="line">mkdir test</span><br><span class="line"></span><br><span class="line">&lt;!--加了 -p 的选项，可自行帮你建立多层目录--&gt;</span><br><span class="line">mkdir -p test1/test2/test3/test4</span><br><span class="line"></span><br><span class="line">&lt;!--建立权限为 rwx--x--x 的目录--&gt;</span><br><span class="line">mkdir -m 711 test2</span><br></pre></td></tr></table></figure><ul><li>rmdir: 删除空目录，被删除的目录里面必定不能存在其他的目录或文件</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">rmdir [-p] 目录名称</span><br><span class="line">&lt;!---p: 连同上层“空的”目录也一起删除--&gt;</span><br></pre></td></tr></table></figure><h4 id="2-3、关于执行文件路径的变量：-PATH"><a href="#2-3、关于执行文件路径的变量：-PATH" class="headerlink" title="2.3、关于执行文件路径的变量：$PATH"></a>2.3、关于执行文件路径的变量：$PATH</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;!--查询环境变量--&gt;</span><br><span class="line">echo $PATH</span><br><span class="line">/root/.nvm/versions/node/v8.11.2/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/root/bin</span><br></pre></td></tr></table></figure><h3 id="三、文件与目录管理"><a href="#三、文件与目录管理" class="headerlink" title="三、文件与目录管理"></a>三、文件与目录管理</h3><ul><li>touch：创建新文件</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">touch 文件</span><br><span class="line"></span><br><span class="line">&lt;!--新建一个空的文件--&gt;</span><br><span class="line">touch testtouch</span><br></pre></td></tr></table></figure><ul><li>cp：复制文件或目录<br>在默认条件中，cp 的源文件与目标文件的权限是不同的，目标文件的所有者通常会是命令操作者本身</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">cp [-ir] 源文件(source) 目标文件(destination)</span><br><span class="line">-i: 若目标文件已存在时，在覆盖时会先询问操作的进行</span><br><span class="line">-r: 递归持续复制，用于目录的复制行为</span><br><span class="line"></span><br><span class="line">&lt;!--用 root 身份，将主文件下的 .bashrc 复制到 /tmp 下，并更名为 bashrc--&gt;</span><br><span class="line">cp ~/.bashrc /tmp/bashrc</span><br><span class="line"></span><br><span class="line">&lt;!--复制到当前目录，最后的 . 不要忘--&gt;</span><br><span class="line">cp /var/log/wtmp .</span><br><span class="line"></span><br><span class="line">&lt;!--可以将多个数据一次复制到同一个目录去，最后面一定是目录--&gt;</span><br><span class="line">cp ~/.bashrc ~/.bash_history /tmp</span><br></pre></td></tr></table></figure><ul><li>rm：移除文件或目录</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">rm [-fr] 档案或目录</span><br><span class="line">-f: 就是 force，忽略不存在的文件，不会出现警告;</span><br><span class="line">-r: 递归删除，常用在目录的删除</span><br><span class="line"></span><br><span class="line">&lt;!--透过通配符*的帮忙，将开头为 bashrc 文件名通通删除:--&gt;</span><br><span class="line">rm -i bashrc*</span><br><span class="line"></span><br><span class="line">&lt;!--将 /tmp/etc/ 这个目录删除掉--&gt;</span><br><span class="line">rm -r /tmp/etc</span><br></pre></td></tr></table></figure><ul><li>mv：移动文件与目录，或更名</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">mv [-f] source destination</span><br><span class="line">-f: force 强制的意思，如果目标文件已经存在，不会询问而直接覆盖</span><br><span class="line"></span><br><span class="line">&lt;!--将目录名称更名为 mvtest2--&gt;</span><br><span class="line">mv mvtest mvtest2</span><br><span class="line"></span><br><span class="line">&lt;!--如果有多个源文件或目录，则最后一定是目录，即将所有的数据移动到该目录--&gt;</span><br><span class="line">mv bashrc1 bashrc2 mvtest2</span><br></pre></td></tr></table></figure><h3 id="四、文件内容查阅"><a href="#四、文件内容查阅" class="headerlink" title="四、文件内容查阅"></a>四、文件内容查阅</h3><ul><li>cat: 由第一行开始显示文件内容</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">cat [-n]</span><br><span class="line">-n: 打印出行号，连同空白行也会有行号</span><br><span class="line"></span><br><span class="line">&lt;!--查看 /etc/issue 这个文件的内容，加印行号--&gt;</span><br><span class="line">cat -n /etc/issue</span><br><span class="line">&lt;!--返回结果--&gt;</span><br><span class="line">1 CentOS release 5.3 (Final)</span><br><span class="line">2 Kernel \r on an \m</span><br><span class="line">3</span><br></pre></td></tr></table></figure><ul><li>tac: 从最后一行开始显示</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">tac /etc/issue</span><br><span class="line"></span><br><span class="line">&lt;!--返回--&gt;</span><br><span class="line">Kernel \r on an \m</span><br><span class="line">CentOS release 5.3 (Final)</span><br></pre></td></tr></table></figure><ul><li>more: 一页一页地显示文件内容</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">more master-stdout.log</span><br><span class="line"></span><br><span class="line">Space：向下翻页</span><br><span class="line">Enter：向下滚动一行</span><br><span class="line">/字符串：代表在显示的内容中，向下查询“字符串”这个关键词</span><br><span class="line">:f: 立即显示出文件名以及目前显示的行数</span><br><span class="line">q: 立即离开more，不再显示该文件内容</span><br></pre></td></tr></table></figure><ul><li>less：与 more 类似，可以往前翻页</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Space: 向下翻页</span><br><span class="line">Enter：向下滚动一行</span><br><span class="line">PageDown【fn+上方向】：向下翻页</span><br><span class="line">PageUp【fn+下方向】：向上翻页</span><br><span class="line">/字符串：向下查询“字符串”的功能</span><br><span class="line">?字符串：向上查询“字符串”的功能</span><br><span class="line">q：离开less这个程序</span><br></pre></td></tr></table></figure><ul><li>head：取出前面几行</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">head [-n number] 文件</span><br><span class="line">-n: 后面接数字，代表显示几行</span><br><span class="line"></span><br><span class="line">&lt;!--默认的情况显示前十行，若要显示前 20 行，如下所示--&gt;</span><br><span class="line">head -n 20 /etc/man.config</span><br><span class="line"></span><br><span class="line">&lt;!--列出前面的所有行数，但不包括后面100行--&gt;</span><br><span class="line">head -n -100 /etc/man.config</span><br></pre></td></tr></table></figure><ul><li>tail：取出后面几行</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">tail [-n number] 档案</span><br><span class="line">-n :后面接数字，代表显示几行</span><br><span class="line">-f :表示持续侦测后面的文件，要等到按下ctrl+c才会结束</span><br><span class="line"></span><br><span class="line">&lt;!--默认显示最后十行，若要显示最后 20 行，就得要这样--&gt;</span><br><span class="line">tail -n 20 /etc/man.config</span><br><span class="line"></span><br><span class="line">&lt;!--不知道/etc/man.config 有几行，只想列出 100 行以后的数据--&gt;</span><br><span class="line">tail -n +100 /etc/man.config</span><br><span class="line"></span><br><span class="line">&lt;!--持续侦测/var/log/messages 的内容--&gt;</span><br><span class="line">tail -f /var/log/messages</span><br></pre></td></tr></table></figure><ul><li><p>|：管道命令<br>数据经过几道手续之后才能得到我们所想要的格式，使用<code>|</code>界定符号。每个管道后面接的必定是“命令”，而且这个命令能接受 standard input，如 less, more, head, tail 等都是可以接受 standard input 的管道命令</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;!--使用ls命令输出后的内容能被less读取，并利用less功能翻动相关信息，按字母 ‘q’ 退出--&gt;</span><br><span class="line">ls -al /etc | less</span><br></pre></td></tr></table></figure></li><li><p>grep 选取命令</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">grep [-inv] [--color=auto] &apos;查找字符串&apos; filename</span><br><span class="line">-i 忽略大小写</span><br><span class="line">-n 输出行号</span><br><span class="line">-v 反向选择</span><br><span class="line">--color=auto 找到关键词部分加上颜色显示</span><br><span class="line"></span><br><span class="line">&lt;!--将 last 当中有 root 的那一行读取出来--&gt;</span><br><span class="line">last | grep &apos;root&apos;</span><br><span class="line"></span><br><span class="line">&lt;!--只有没有 root 就取出来--&gt;</span><br><span class="line">last | grep -v &apos;root&apos;</span><br><span class="line"></span><br><span class="line">&lt;!--取出 /etc/man.config 内行含 MAHPATH 的那几行--&gt;</span><br><span class="line">grep --color=auto &apos;MAHPATH&apos; /etc/man.config</span><br></pre></td></tr></table></figure></li></ul><h3 id="五、文件的查询"><a href="#五、文件的查询" class="headerlink" title="五、文件的查询"></a>五、文件的查询</h3><ul><li>which：寻找“执行文件”</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">which [-a] command</span><br><span class="line">-a :将所有由 PATH 目录中可以找到的命令均列出，而不只第一个被找到的命令名称</span><br><span class="line"></span><br><span class="line">&lt;!--搜寻 ifconfig 指令完整文件名--&gt;</span><br><span class="line">which ifconfig</span><br></pre></td></tr></table></figure><ul><li>whereis: 寻找特定文件<br>Linux 会将系统内的所有文件都记录在一个数据库文件里面，当使用 whereis 或 locate 时，以数据库文件为准。有时还能找到已经被删除的文件，而且找不到最新的刚创建的文件</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;!--找出 nginx 这个文件名--&gt;</span><br><span class="line">whereis nginx</span><br><span class="line">nginx: /usr/sbin/nginx /usr/lib64/nginx /etc/nginx /usr/share/nginx /usr/share/man/man8/nginx.8.gz</span><br></pre></td></tr></table></figure><ul><li>locate: 找出关键词文件<br>输入“文件的部分名称”就能够得到结果</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">locate keyword</span><br></pre></td></tr></table></figure><ul><li>find：磁盘查找文件</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">find [PATH] [option] [action]</span><br><span class="line"></span><br><span class="line">&lt;!--搜寻文件名为 filename 的文件--&gt;</span><br><span class="line">find / -name passwd</span><br></pre></td></tr></table></figure><h3 id="六、文件系统简单操作"><a href="#六、文件系统简单操作" class="headerlink" title="六、文件系统简单操作"></a>六、文件系统简单操作</h3><ul><li>df: 列出文件系统的整体磁盘使用量</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">df [-h] [目录或文件名]</span><br><span class="line">-h: 以人们较易阅读的 GBytes, MBytes, KBytes 等格式自行显示</span><br><span class="line"></span><br><span class="line">&lt;!--在 df 后面加上目录或是档案时，df 会自动分析该目录的文件所在分区 ，并将该 分区的容量显示出来--&gt;</span><br><span class="line">df -h /etc</span><br></pre></td></tr></table></figure><ul><li>du: 评估文件系统的磁盘使用量<br>这个命令其实会直接到文件系统内去查找所有的文件数据，会执行段时间</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">du [-skm] 文件或目录名称</span><br><span class="line">-s：列出总量而已，而不列出每个各别的目录占用容量</span><br><span class="line">-k：以 KB 列出容量</span><br><span class="line">-m：以 MB 列出容量</span><br><span class="line"></span><br><span class="line">&lt;!--检查当前目录下所有文件或文件夹所占容量--&gt;</span><br><span class="line">du -sm .</span><br><span class="line">712     ./coupon</span><br><span class="line">3       ./logs</span><br><span class="line">1       ./server.js</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;这周把 Linux 基础总结了一下，以 Centos 为标准，先说文件和目录这块。&lt;br&gt;
    
    </summary>
    
      <category term="note" scheme="http://blog.master-ss.cn/categories/note/"/>
    
    
  </entry>
  
</feed>
